
final_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002334  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001f4  00800060  00002334  000023c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800254  00800254  000025bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000025bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000025ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c0  00000000  00000000  00002628  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004be8  00000000  00000000  000028e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001047  00000000  00000000  000074d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000280b  00000000  00000000  00008517  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004e8  00000000  00000000  0000ad24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a15  00000000  00000000  0000b20c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012a5  00000000  00000000  0000bc21  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f0  00000000  00000000  0000cec6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e3       	ldi	r30, 0x34	; 52
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 35       	cpi	r26, 0x54	; 84
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	22 e0       	ldi	r18, 0x02	; 2
      78:	a4 e5       	ldi	r26, 0x54	; 84
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 35       	cpi	r26, 0x5C	; 92
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 98 11 	jmp	0x2330	; 0x2330 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
	}
	
}
 */
int main(void)
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	64 97       	sbiw	r28, 0x14	; 20
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	0f be       	out	0x3f, r0	; 63
      a4:	cd bf       	out	0x3d, r28	; 61
	DIO_voidInit();
      a6:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <DIO_voidInit>
	LCD_voidInit();
      aa:	0e 94 5f 0c 	call	0x18be	; 0x18be <LCD_voidInit>
	KEYPAD_voidInit();
      ae:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <KEYPAD_voidInit>
	//UART_voidInit();
//EXTI_voidInit();
//EXTI_voidEnable_INT0();
TIMER0_void_Init();
      b2:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <TIMER0_void_Init>
TIMER2_void_Init();
      b6:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <TIMER2_void_Init>
//GIE_voidEnable();
//GIE_voidDisable();
ADC_voidInit();
      ba:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <ADC_voidInit>
TIMER2_void_SetCompareVal(12) ;
      be:	8c e0       	ldi	r24, 0x0C	; 12
      c0:	90 e0       	ldi	r25, 0x00	; 0
      c2:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <TIMER2_void_SetCompareVal>

f32 Local_u8Analog = 0;
u16 Local_u8Digital = 0;
int Buz_Flag = 0 ;
length =1 ;
      c6:	81 e0       	ldi	r24, 0x01	; 1
      c8:	90 e0       	ldi	r25, 0x00	; 0
      ca:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <__data_end+0x1>
      ce:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <__data_end>
ADC_voidInit();
TIMER2_void_SetCompareVal(12) ;

f32 Local_u8Analog = 0;
u16 Local_u8Digital = 0;
int Buz_Flag = 0 ;
      d2:	00 e0       	ldi	r16, 0x00	; 0
      d4:	10 e0       	ldi	r17, 0x00	; 0
length =1 ;
	while (1)
	{   
		 u8 Check_Eeprom_Admin =EEPROM_ui8ReadByteFromAddress(0x0029) ;
      d6:	89 e2       	ldi	r24, 0x29	; 41
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
		
		if (Check_Eeprom_Admin==5)
      de:	85 30       	cpi	r24, 0x05	; 5
      e0:	09 f0       	breq	.+2      	; 0xe4 <main+0x52>
      e2:	eb c1       	rjmp	.+982    	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
		/* admin has already registered */
		/* now he can login */
/*11111111*/ { /*11111111*/ 
		while (KEYPAD_u8GetPressedButton()=='\0');
      e4:	0e 94 8a 0a 	call	0x1514	; 0x1514 <KEYPAD_u8GetPressedButton>
      e8:	88 23       	and	r24, r24
      ea:	e1 f3       	breq	.-8      	; 0xe4 <main+0x52>
		LCD_voidClearDisplay();
      ec:	0e 94 c1 0c 	call	0x1982	; 0x1982 <LCD_voidClearDisplay>
		LCD_voidSendString("admin :+");
      f0:	80 e6       	ldi	r24, 0x60	; 96
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	0e 94 9f 0c 	call	0x193e	; 0x193e <LCD_voidSendString>
		LCD_voidSetCursor(LCD_U8_ROW_2 , LCD_u8_COLUMN_1);
      f8:	60 e0       	ldi	r22, 0x00	; 0
      fa:	81 e0       	ldi	r24, 0x01	; 1
      fc:	0e 94 b2 0c 	call	0x1964	; 0x1964 <LCD_voidSetCursor>
		LCD_voidSendString("user: - ");	
     100:	89 e6       	ldi	r24, 0x69	; 105
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	0e 94 9f 0c 	call	0x193e	; 0x193e <LCD_voidSendString>
		while (KEYPAD_u8GetPressedButton()=='\0');
     108:	0e 94 8a 0a 	call	0x1514	; 0x1514 <KEYPAD_u8GetPressedButton>
     10c:	88 23       	and	r24, r24
     10e:	e1 f3       	breq	.-8      	; 0x108 <main+0x76>
		if (KEYPAD_u8GetPressedButton() == '+' )
     110:	0e 94 8a 0a 	call	0x1514	; 0x1514 <KEYPAD_u8GetPressedButton>
     114:	8b 32       	cpi	r24, 0x2B	; 43
     116:	09 f0       	breq	.+2      	; 0x11a <main+0x88>
     118:	3c c1       	rjmp	.+632    	; 0x392 <main+0x300>
/*222222 */ { /*222222 */ // Logging as admin */ 
			
			LCD_voidClearDisplay();
     11a:	0e 94 c1 0c 	call	0x1982	; 0x1982 <LCD_voidClearDisplay>
			   u8 admin_Check[5] ;
			   u8 Admin_Pass_Check[5] ;
			   Read_Name_Pass( admin_Check , Admin_Pass_Check);
     11e:	be 01       	movw	r22, r28
     120:	65 5f       	subi	r22, 0xF5	; 245
     122:	7f 4f       	sbci	r23, 0xFF	; 255
     124:	ce 01       	movw	r24, r28
     126:	40 96       	adiw	r24, 0x10	; 16
     128:	0e 94 8d 02 	call	0x51a	; 0x51a <Read_Name_Pass>
			while (KEYPAD_u8GetPressedButton()=='\0');
     12c:	0e 94 8a 0a 	call	0x1514	; 0x1514 <KEYPAD_u8GetPressedButton>
     130:	88 23       	and	r24, r24
     132:	e1 f3       	breq	.-8      	; 0x12c <main+0x9a>
			if (IsAdminExist(Admin_Pass_Check,admin_Check))
     134:	be 01       	movw	r22, r28
     136:	60 5f       	subi	r22, 0xF0	; 240
     138:	7f 4f       	sbci	r23, 0xFF	; 255
     13a:	ce 01       	movw	r24, r28
     13c:	0b 96       	adiw	r24, 0x0b	; 11
     13e:	0e 94 39 03 	call	0x672	; 0x672 <IsAdminExist>
     142:	88 23       	and	r24, r24
     144:	09 f4       	brne	.+2      	; 0x148 <main+0xb6>
     146:	08 c1       	rjmp	.+528    	; 0x358 <main+0x2c6>
	/*3333*/ 		{ /* admin successful login */
				LCD_voidSendString("successful login ");
     148:	82 e7       	ldi	r24, 0x72	; 114
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	0e 94 9f 0c 	call	0x193e	; 0x193e <LCD_voidSendString>
				LCD_voidClearDisplay();
     150:	0e 94 c1 0c 	call	0x1982	; 0x1982 <LCD_voidClearDisplay>
				
			if (Buz_Flag!=0){
     154:	01 15       	cp	r16, r1
     156:	11 05       	cpc	r17, r1
     158:	11 f0       	breq	.+4      	; 0x15e <main+0xcc>
			Buz_Flag=0;
     15a:	00 e0       	ldi	r16, 0x00	; 0
     15c:	10 e0       	ldi	r17, 0x00	; 0
			}
				LCD_voidSendString("System :1 ");
     15e:	84 e8       	ldi	r24, 0x84	; 132
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	0e 94 9f 0c 	call	0x193e	; 0x193e <LCD_voidSendString>
				LCD_voidSetCursor(LCD_U8_ROW_2 , LCD_u8_COLUMN_1);
     166:	60 e0       	ldi	r22, 0x00	; 0
     168:	81 e0       	ldi	r24, 0x01	; 1
     16a:	0e 94 b2 0c 	call	0x1964	; 0x1964 <LCD_voidSetCursor>
				
				LCD_voidSendString("registering:+  ");
     16e:	8f e8       	ldi	r24, 0x8F	; 143
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	0e 94 9f 0c 	call	0x193e	; 0x193e <LCD_voidSendString>
				LCD_voidSetCursor(LCD_U8_ROW_1 , LCD_u8_COLUMN_15);
     176:	6e e0       	ldi	r22, 0x0E	; 14
     178:	80 e0       	ldi	r24, 0x00	; 0
     17a:	0e 94 b2 0c 	call	0x1964	; 0x1964 <LCD_voidSetCursor>
				LCD_voidSendString("delete:- ");
     17e:	8f e9       	ldi	r24, 0x9F	; 159
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	0e 94 9f 0c 	call	0x193e	; 0x193e <LCD_voidSendString>
				LCD_voidSetCursor(LCD_U8_ROW_2 , LCD_u8_COLUMN_15);
     186:	6e e0       	ldi	r22, 0x0E	; 14
     188:	81 e0       	ldi	r24, 0x01	; 1
     18a:	0e 94 b2 0c 	call	0x1964	; 0x1964 <LCD_voidSetCursor>
				LCD_voidSendString("For exit : X ");
     18e:	89 ea       	ldi	r24, 0xA9	; 169
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	0e 94 9f 0c 	call	0x193e	; 0x193e <LCD_voidSendString>
				while (KEYPAD_u8GetPressedButton()=='\0');
     196:	0e 94 8a 0a 	call	0x1514	; 0x1514 <KEYPAD_u8GetPressedButton>
     19a:	88 23       	and	r24, r24
     19c:	e1 f3       	breq	.-8      	; 0x196 <main+0x104>
				LCD_voidClearDisplay();
     19e:	0e 94 c1 0c 	call	0x1982	; 0x1982 <LCD_voidClearDisplay>
				if (KEYPAD_u8GetPressedButton() == 'X')
     1a2:	0e 94 8a 0a 	call	0x1514	; 0x1514 <KEYPAD_u8GetPressedButton>
     1a6:	88 35       	cpi	r24, 0x58	; 88
     1a8:	09 f4       	brne	.+2      	; 0x1ac <main+0x11a>
     1aa:	95 cf       	rjmp	.-214    	; 0xd6 <main+0x44>
				{
					continue;
				}
				else if (KEYPAD_u8GetPressedButton() == '+')
     1ac:	0e 94 8a 0a 	call	0x1514	; 0x1514 <KEYPAD_u8GetPressedButton>
     1b0:	8b 32       	cpi	r24, 0x2B	; 43
     1b2:	a1 f5       	brne	.+104    	; 0x21c <main+0x18a>
				{
					u8 user_Jar[5] ;
					u8 Pass_Jar[5] ;
				 Read_Name_Pass( user_Jar, Pass_Jar);
     1b4:	be 01       	movw	r22, r28
     1b6:	6f 5f       	subi	r22, 0xFF	; 255
     1b8:	7f 4f       	sbci	r23, 0xFF	; 255
     1ba:	ce 01       	movw	r24, r28
     1bc:	06 96       	adiw	r24, 0x06	; 6
     1be:	0e 94 8d 02 	call	0x51a	; 0x51a <Read_Name_Pass>

					
					if (AddEntry(user_Jar,Pass_Jar))
     1c2:	be 01       	movw	r22, r28
     1c4:	6f 5f       	subi	r22, 0xFF	; 255
     1c6:	7f 4f       	sbci	r23, 0xFF	; 255
     1c8:	ce 01       	movw	r24, r28
     1ca:	06 96       	adiw	r24, 0x06	; 6
     1cc:	0e 94 a4 03 	call	0x748	; 0x748 <AddEntry>
     1d0:	88 23       	and	r24, r24
     1d2:	29 f0       	breq	.+10     	; 0x1de <main+0x14c>
					{
						LCD_voidSendString("added successfully ");
     1d4:	8d eb       	ldi	r24, 0xBD	; 189
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	0e 94 9f 0c 	call	0x193e	; 0x193e <LCD_voidSendString>
     1dc:	0c c0       	rjmp	.+24     	; 0x1f6 <main+0x164>
						
						
					}
					else{
						LCD_voidSendString("wasnt added successfully ");
     1de:	87 eb       	ldi	r24, 0xB7	; 183
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	0e 94 9f 0c 	call	0x193e	; 0x193e <LCD_voidSendString>
						LCD_voidSetCursor(LCD_U8_ROW_2 , LCD_u8_COLUMN_1);
     1e6:	60 e0       	ldi	r22, 0x00	; 0
     1e8:	81 e0       	ldi	r24, 0x01	; 1
     1ea:	0e 94 b2 0c 	call	0x1964	; 0x1964 <LCD_voidSetCursor>
						LCD_voidSendString("database is complete");
     1ee:	81 ed       	ldi	r24, 0xD1	; 209
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	0e 94 9f 0c 	call	0x193e	; 0x193e <LCD_voidSendString>
					}
					LCD_voidClearDisplay();
     1f6:	0e 94 c1 0c 	call	0x1982	; 0x1982 <LCD_voidClearDisplay>
					LCD_voidSetCursor(LCD_U8_ROW_2 , LCD_u8_COLUMN_1);
     1fa:	60 e0       	ldi	r22, 0x00	; 0
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	0e 94 b2 0c 	call	0x1964	; 0x1964 <LCD_voidSetCursor>
					LCD_voidSendString("For exit : X ");
     202:	89 ea       	ldi	r24, 0xA9	; 169
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	0e 94 9f 0c 	call	0x193e	; 0x193e <LCD_voidSendString>
					while (KEYPAD_u8GetPressedButton()=='\0');
     20a:	0e 94 8a 0a 	call	0x1514	; 0x1514 <KEYPAD_u8GetPressedButton>
     20e:	88 23       	and	r24, r24
     210:	e1 f3       	breq	.-8      	; 0x20a <main+0x178>
					LCD_voidClearDisplay();
     212:	0e 94 c1 0c 	call	0x1982	; 0x1982 <LCD_voidClearDisplay>
					if (KEYPAD_u8GetPressedButton() == 'X')
     216:	0e 94 8a 0a 	call	0x1514	; 0x1514 <KEYPAD_u8GetPressedButton>
     21a:	5d cf       	rjmp	.-326    	; 0xd6 <main+0x44>
						continue;
					}
					
					
				}
				else if (KEYPAD_u8GetPressedButton() == '-')
     21c:	0e 94 8a 0a 	call	0x1514	; 0x1514 <KEYPAD_u8GetPressedButton>
     220:	8d 32       	cpi	r24, 0x2D	; 45
     222:	09 f0       	breq	.+2      	; 0x226 <main+0x194>
     224:	42 c0       	rjmp	.+132    	; 0x2aa <main+0x218>
				{
					u8 user_Delete[5] ;
					u8 Pass_Delete[5] ;
					 Read_Name_Pass( user_Delete , Pass_Delete);
     226:	be 01       	movw	r22, r28
     228:	6f 5f       	subi	r22, 0xFF	; 255
     22a:	7f 4f       	sbci	r23, 0xFF	; 255
     22c:	ce 01       	movw	r24, r28
     22e:	06 96       	adiw	r24, 0x06	; 6
     230:	0e 94 8d 02 	call	0x51a	; 0x51a <Read_Name_Pass>

					
					
					while (KEYPAD_u8GetPressedButton()=='\0');
     234:	0e 94 8a 0a 	call	0x1514	; 0x1514 <KEYPAD_u8GetPressedButton>
     238:	88 23       	and	r24, r24
     23a:	e1 f3       	breq	.-8      	; 0x234 <main+0x1a2>
					if (Find_Delete(Pass_Delete,user_Delete))
     23c:	be 01       	movw	r22, r28
     23e:	6a 5f       	subi	r22, 0xFA	; 250
     240:	7f 4f       	sbci	r23, 0xFF	; 255
     242:	ce 01       	movw	r24, r28
     244:	01 96       	adiw	r24, 0x01	; 1
     246:	0e 94 bc 06 	call	0xd78	; 0xd78 <Find_Delete>
     24a:	88 23       	and	r24, r24
     24c:	d9 f0       	breq	.+54     	; 0x284 <main+0x1f2>
					{
						
						LCD_voidSendString(" deleted successfully ");
     24e:	86 ee       	ldi	r24, 0xE6	; 230
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	0e 94 9f 0c 	call	0x193e	; 0x193e <LCD_voidSendString>
						while (KEYPAD_u8GetPressedButton()=='\0');
     256:	0e 94 8a 0a 	call	0x1514	; 0x1514 <KEYPAD_u8GetPressedButton>
     25a:	88 23       	and	r24, r24
     25c:	e1 f3       	breq	.-8      	; 0x256 <main+0x1c4>
						LCD_voidClearDisplay();
     25e:	0e 94 c1 0c 	call	0x1982	; 0x1982 <LCD_voidClearDisplay>
						LCD_voidSetCursor(LCD_U8_ROW_2 , LCD_u8_COLUMN_1);
     262:	60 e0       	ldi	r22, 0x00	; 0
     264:	81 e0       	ldi	r24, 0x01	; 1
     266:	0e 94 b2 0c 	call	0x1964	; 0x1964 <LCD_voidSetCursor>
						LCD_voidSendString("For exit : X ");
     26a:	89 ea       	ldi	r24, 0xA9	; 169
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	0e 94 9f 0c 	call	0x193e	; 0x193e <LCD_voidSendString>
						while (KEYPAD_u8GetPressedButton()=='\0');
     272:	0e 94 8a 0a 	call	0x1514	; 0x1514 <KEYPAD_u8GetPressedButton>
     276:	88 23       	and	r24, r24
     278:	e1 f3       	breq	.-8      	; 0x272 <main+0x1e0>
						LCD_voidClearDisplay();
     27a:	0e 94 c1 0c 	call	0x1982	; 0x1982 <LCD_voidClearDisplay>
						if (KEYPAD_u8GetPressedButton() == 'X')
     27e:	0e 94 8a 0a 	call	0x1514	; 0x1514 <KEYPAD_u8GetPressedButton>
     282:	29 cf       	rjmp	.-430    	; 0xd6 <main+0x44>
						{
							continue;
						}
					}
					else{
						LCD_voidSendString("dont exist  ");
     284:	8d ef       	ldi	r24, 0xFD	; 253
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	0e 94 9f 0c 	call	0x193e	; 0x193e <LCD_voidSendString>
						LCD_voidSetCursor(LCD_U8_ROW_2 , LCD_u8_COLUMN_1);
     28c:	60 e0       	ldi	r22, 0x00	; 0
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	0e 94 b2 0c 	call	0x1964	; 0x1964 <LCD_voidSetCursor>
						LCD_voidSendString("try again ");
     294:	8a e0       	ldi	r24, 0x0A	; 10
     296:	91 e0       	ldi	r25, 0x01	; 1
     298:	0e 94 9f 0c 	call	0x193e	; 0x193e <LCD_voidSendString>
						while (KEYPAD_u8GetPressedButton()=='\0');
     29c:	0e 94 8a 0a 	call	0x1514	; 0x1514 <KEYPAD_u8GetPressedButton>
     2a0:	88 23       	and	r24, r24
     2a2:	e1 f3       	breq	.-8      	; 0x29c <main+0x20a>
						LCD_voidClearDisplay();
     2a4:	0e 94 c1 0c 	call	0x1982	; 0x1982 <LCD_voidClearDisplay>
						continue;
     2a8:	16 cf       	rjmp	.-468    	; 0xd6 <main+0x44>
				}
				}
				else{
					
		///////////////////////////////////////////////////* admin's system */
					LCD_voidSendString("welcome to system ");
     2aa:	85 e1       	ldi	r24, 0x15	; 21
     2ac:	91 e0       	ldi	r25, 0x01	; 1
     2ae:	0e 94 9f 0c 	call	0x193e	; 0x193e <LCD_voidSendString>
					
					Local_u8Digital = ADC_u16Convert(ADC_u8_Channel0);
     2b2:	80 e0       	ldi	r24, 0x00	; 0
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <ADC_u16Convert>
					Local_u8Analog = ((f32)(Local_u8Digital) * 5.0) / 10.24;
     2ba:	bc 01       	movw	r22, r24
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__floatunsisf>
     2c4:	20 e0       	ldi	r18, 0x00	; 0
     2c6:	30 e0       	ldi	r19, 0x00	; 0
     2c8:	40 ea       	ldi	r20, 0xA0	; 160
     2ca:	50 e4       	ldi	r21, 0x40	; 64
     2cc:	0e 94 2b 11 	call	0x2256	; 0x2256 <__mulsf3>
     2d0:	2a e0       	ldi	r18, 0x0A	; 10
     2d2:	37 ed       	ldi	r19, 0xD7	; 215
     2d4:	43 e2       	ldi	r20, 0x23	; 35
     2d6:	51 e4       	ldi	r21, 0x41	; 65
     2d8:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <__divsf3>
					//dtostrf(float_value, min_width, num_digits_after_decimal, where_to_store_string)
					//dtostrf(Local_u8Analog, 20, 15, buffer);
					//LCD_voidSendString(buffer);
					//_delay_ms(50);
					
					if (Local_u8Analog >= 25 )
     2dc:	20 e0       	ldi	r18, 0x00	; 0
     2de:	30 e0       	ldi	r19, 0x00	; 0
     2e0:	48 ec       	ldi	r20, 0xC8	; 200
     2e2:	51 e4       	ldi	r21, 0x41	; 65
     2e4:	0e 94 26 11 	call	0x224c	; 0x224c <__gesf2>
     2e8:	88 23       	and	r24, r24
     2ea:	1c f0       	brlt	.+6      	; 0x2f2 <main+0x260>
					{
						Dc_Motor_Enable();
     2ec:	0e 94 6f 0a 	call	0x14de	; 0x14de <Dc_Motor_Enable>
     2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <main+0x264>
					}
					else{
					Dc_Motor_Disable();
     2f2:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <Dc_Motor_Disable>
					}
					LCD_voidClearDisplay();
     2f6:	0e 94 c1 0c 	call	0x1982	; 0x1982 <LCD_voidClearDisplay>
					LCD_voidSendString("for System Controle :1 ");
     2fa:	88 e2       	ldi	r24, 0x28	; 40
     2fc:	91 e0       	ldi	r25, 0x01	; 1
     2fe:	0e 94 9f 0c 	call	0x193e	; 0x193e <LCD_voidSendString>
					LCD_voidSetCursor(LCD_U8_ROW_2 , LCD_u8_COLUMN_1);
     302:	60 e0       	ldi	r22, 0x00	; 0
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	0e 94 b2 0c 	call	0x1964	; 0x1964 <LCD_voidSetCursor>
					LCD_voidSendString("For exit : X ");
     30a:	89 ea       	ldi	r24, 0xA9	; 169
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	0e 94 9f 0c 	call	0x193e	; 0x193e <LCD_voidSendString>
					while (KEYPAD_u8GetPressedButton()=='\0');
     312:	0e 94 8a 0a 	call	0x1514	; 0x1514 <KEYPAD_u8GetPressedButton>
     316:	88 23       	and	r24, r24
     318:	e1 f3       	breq	.-8      	; 0x312 <main+0x280>
					LCD_voidClearDisplay();
     31a:	0e 94 c1 0c 	call	0x1982	; 0x1982 <LCD_voidClearDisplay>
					if (KEYPAD_u8GetPressedButton() == '1'){
     31e:	0e 94 8a 0a 	call	0x1514	; 0x1514 <KEYPAD_u8GetPressedButton>
     322:	81 33       	cpi	r24, 0x31	; 49
     324:	09 f0       	breq	.+2      	; 0x328 <main+0x296>
     326:	d7 ce       	rjmp	.-594    	; 0xd6 <main+0x44>
						
						switch (Sys_Contole())
     328:	0e 94 2b 0a 	call	0x1456	; 0x1456 <Sys_Contole>
     32c:	82 33       	cpi	r24, 0x32	; 50
     32e:	51 f0       	breq	.+20     	; 0x344 <main+0x2b2>
     330:	83 33       	cpi	r24, 0x33	; 51
     332:	69 f0       	breq	.+26     	; 0x34e <main+0x2bc>
     334:	81 33       	cpi	r24, 0x31	; 49
     336:	09 f0       	breq	.+2      	; 0x33a <main+0x2a8>
     338:	ce ce       	rjmp	.-612    	; 0xd6 <main+0x44>
						{
							case '1':
							LCD_voidClearDisplay();
     33a:	0e 94 c1 0c 	call	0x1982	; 0x1982 <LCD_voidClearDisplay>
							Led_Controle();
     33e:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <Led_Controle>
							
							break;
     342:	c9 ce       	rjmp	.-622    	; 0xd6 <main+0x44>
							case '2':
							LCD_voidClearDisplay();
     344:	0e 94 c1 0c 	call	0x1982	; 0x1982 <LCD_voidClearDisplay>
							Dimmer_Controle();
     348:	0e 94 c5 0c 	call	0x198a	; 0x198a <Dimmer_Controle>
							
							break;
     34c:	c4 ce       	rjmp	.-632    	; 0xd6 <main+0x44>
							case '3':
							LCD_voidClearDisplay();
     34e:	0e 94 c1 0c 	call	0x1982	; 0x1982 <LCD_voidClearDisplay>
							Door_Controle();
     352:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <Door_Controle>
							break;
     356:	bf ce       	rjmp	.-642    	; 0xd6 <main+0x44>
				
			}
			
		/* 33333 */ /* admin hasn't successfully logged in */ 	
	else{
			LCD_voidSendString("wrong admin password ");
     358:	80 e4       	ldi	r24, 0x40	; 64
     35a:	91 e0       	ldi	r25, 0x01	; 1
     35c:	0e 94 9f 0c 	call	0x193e	; 0x193e <LCD_voidSendString>
			LCD_voidSetCursor(LCD_U8_ROW_2 , LCD_u8_COLUMN_1);
     360:	60 e0       	ldi	r22, 0x00	; 0
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	0e 94 b2 0c 	call	0x1964	; 0x1964 <LCD_voidSetCursor>
			LCD_voidSendString("try again ");
     368:	8a e0       	ldi	r24, 0x0A	; 10
     36a:	91 e0       	ldi	r25, 0x01	; 1
     36c:	0e 94 9f 0c 	call	0x193e	; 0x193e <LCD_voidSendString>
			Buz_Flag++;
     370:	0f 5f       	subi	r16, 0xFF	; 255
     372:	1f 4f       	sbci	r17, 0xFF	; 255
			if (Buz_Flag==2){
     374:	02 30       	cpi	r16, 0x02	; 2
     376:	11 05       	cpc	r17, r1
     378:	29 f4       	brne	.+10     	; 0x384 <main+0x2f2>
				Buz_Flag=0;
					BUZ_voidSetAlarm();
     37a:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <BUZ_voidSetAlarm>
			LCD_voidSendString("wrong admin password ");
			LCD_voidSetCursor(LCD_U8_ROW_2 , LCD_u8_COLUMN_1);
			LCD_voidSendString("try again ");
			Buz_Flag++;
			if (Buz_Flag==2){
				Buz_Flag=0;
     37e:	00 e0       	ldi	r16, 0x00	; 0
     380:	10 e0       	ldi	r17, 0x00	; 0
					BUZ_voidSetAlarm();
					continue;
     382:	a9 ce       	rjmp	.-686    	; 0xd6 <main+0x44>
			}
			while (KEYPAD_u8GetPressedButton()=='\0');
     384:	0e 94 8a 0a 	call	0x1514	; 0x1514 <KEYPAD_u8GetPressedButton>
     388:	88 23       	and	r24, r24
     38a:	e1 f3       	breq	.-8      	; 0x384 <main+0x2f2>
			LCD_voidClearDisplay();
     38c:	0e 94 c1 0c 	call	0x1982	; 0x1982 <LCD_voidClearDisplay>
			continue;
     390:	a2 ce       	rjmp	.-700    	; 0xd6 <main+0x44>
/*222222*/ } /*222222*///user login ///////////////////////
	
		else{
			
			
			LCD_voidClearDisplay();
     392:	0e 94 c1 0c 	call	0x1982	; 0x1982 <LCD_voidClearDisplay>
			u8 user_Check[5] ;
			u8 Pass_Check[5] ;
			
			 Read_Name_Pass( user_Check , Pass_Check);
     396:	be 01       	movw	r22, r28
     398:	6f 5f       	subi	r22, 0xFF	; 255
     39a:	7f 4f       	sbci	r23, 0xFF	; 255
     39c:	ce 01       	movw	r24, r28
     39e:	06 96       	adiw	r24, 0x06	; 6
     3a0:	0e 94 8d 02 	call	0x51a	; 0x51a <Read_Name_Pass>
			
			while (KEYPAD_u8GetPressedButton()=='\0');
     3a4:	0e 94 8a 0a 	call	0x1514	; 0x1514 <KEYPAD_u8GetPressedButton>
     3a8:	88 23       	and	r24, r24
     3aa:	e1 f3       	breq	.-8      	; 0x3a4 <main+0x312>
			if (IsUserExist(Pass_Check,user_Check))
     3ac:	be 01       	movw	r22, r28
     3ae:	6a 5f       	subi	r22, 0xFA	; 250
     3b0:	7f 4f       	sbci	r23, 0xFF	; 255
     3b2:	ce 01       	movw	r24, r28
     3b4:	01 96       	adiw	r24, 0x01	; 1
     3b6:	0e 94 94 04 	call	0x928	; 0x928 <IsUserExist>
     3ba:	88 23       	and	r24, r24
     3bc:	09 f4       	brne	.+2      	; 0x3c0 <main+0x32e>
     3be:	60 c0       	rjmp	.+192    	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
			{   
				if (Buz_Flag!=0){
     3c0:	01 15       	cp	r16, r1
     3c2:	11 05       	cpc	r17, r1
     3c4:	11 f0       	breq	.+4      	; 0x3ca <main+0x338>
					Buz_Flag=0;
     3c6:	00 e0       	ldi	r16, 0x00	; 0
     3c8:	10 e0       	ldi	r17, 0x00	; 0
				}
				LCD_voidSendString("successful login ");
     3ca:	82 e7       	ldi	r24, 0x72	; 114
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	0e 94 9f 0c 	call	0x193e	; 0x193e <LCD_voidSendString>
				LCD_voidClearDisplay();
     3d2:	0e 94 c1 0c 	call	0x1982	; 0x1982 <LCD_voidClearDisplay>
				
				///////////////////////////////////////////////////* user's system */
				LCD_voidSendString("welcome to system ");
     3d6:	85 e1       	ldi	r24, 0x15	; 21
     3d8:	91 e0       	ldi	r25, 0x01	; 1
     3da:	0e 94 9f 0c 	call	0x193e	; 0x193e <LCD_voidSendString>
				
				Local_u8Digital = ADC_u16Convert(ADC_u8_Channel0);
     3de:	80 e0       	ldi	r24, 0x00	; 0
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <ADC_u16Convert>
				Local_u8Analog = ((f32)(Local_u8Digital) * 5.0) / 10.24;
     3e6:	bc 01       	movw	r22, r24
     3e8:	80 e0       	ldi	r24, 0x00	; 0
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__floatunsisf>
     3f0:	20 e0       	ldi	r18, 0x00	; 0
     3f2:	30 e0       	ldi	r19, 0x00	; 0
     3f4:	40 ea       	ldi	r20, 0xA0	; 160
     3f6:	50 e4       	ldi	r21, 0x40	; 64
     3f8:	0e 94 2b 11 	call	0x2256	; 0x2256 <__mulsf3>
     3fc:	2a e0       	ldi	r18, 0x0A	; 10
     3fe:	37 ed       	ldi	r19, 0xD7	; 215
     400:	43 e2       	ldi	r20, 0x23	; 35
     402:	51 e4       	ldi	r21, 0x41	; 65
     404:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <__divsf3>
				//dtostrf(float_value, min_width, num_digits_after_decimal, where_to_store_string)
				//dtostrf(Local_u8Analog, 20, 15, buffer);
				//LCD_voidSendString(buffer);
				//_delay_ms(50);
				
				if (Local_u8Analog >= 25 )
     408:	20 e0       	ldi	r18, 0x00	; 0
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	48 ec       	ldi	r20, 0xC8	; 200
     40e:	51 e4       	ldi	r21, 0x41	; 65
     410:	0e 94 26 11 	call	0x224c	; 0x224c <__gesf2>
     414:	88 23       	and	r24, r24
     416:	1c f0       	brlt	.+6      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
				{
					Dc_Motor_Enable();
     418:	0e 94 6f 0a 	call	0x14de	; 0x14de <Dc_Motor_Enable>
     41c:	02 c0       	rjmp	.+4      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
				}
				else{
					Dc_Motor_Disable();
     41e:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <Dc_Motor_Disable>
				}
				LCD_voidClearDisplay();
     422:	0e 94 c1 0c 	call	0x1982	; 0x1982 <LCD_voidClearDisplay>
				LCD_voidSendString("for System Controle :1 ");
     426:	88 e2       	ldi	r24, 0x28	; 40
     428:	91 e0       	ldi	r25, 0x01	; 1
     42a:	0e 94 9f 0c 	call	0x193e	; 0x193e <LCD_voidSendString>
				LCD_voidSetCursor(LCD_U8_ROW_2 , LCD_u8_COLUMN_1);
     42e:	60 e0       	ldi	r22, 0x00	; 0
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	0e 94 b2 0c 	call	0x1964	; 0x1964 <LCD_voidSetCursor>
				LCD_voidSendString("For exit : X ");
     436:	89 ea       	ldi	r24, 0xA9	; 169
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	0e 94 9f 0c 	call	0x193e	; 0x193e <LCD_voidSendString>
				while (KEYPAD_u8GetPressedButton()=='\0');
     43e:	0e 94 8a 0a 	call	0x1514	; 0x1514 <KEYPAD_u8GetPressedButton>
     442:	88 23       	and	r24, r24
     444:	e1 f3       	breq	.-8      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
				LCD_voidClearDisplay();
     446:	0e 94 c1 0c 	call	0x1982	; 0x1982 <LCD_voidClearDisplay>
				if (KEYPAD_u8GetPressedButton() == 'X')
     44a:	0e 94 8a 0a 	call	0x1514	; 0x1514 <KEYPAD_u8GetPressedButton>
     44e:	88 35       	cpi	r24, 0x58	; 88
     450:	09 f4       	brne	.+2      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
     452:	41 ce       	rjmp	.-894    	; 0xd6 <main+0x44>
				{
					continue;
				}
				else if (KEYPAD_u8GetPressedButton() == '1'){
     454:	0e 94 8a 0a 	call	0x1514	; 0x1514 <KEYPAD_u8GetPressedButton>
     458:	81 33       	cpi	r24, 0x31	; 49
     45a:	09 f0       	breq	.+2      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
     45c:	3c ce       	rjmp	.-904    	; 0xd6 <main+0x44>
					
					switch (Sys_Contole_For_User())
     45e:	0e 94 46 0a 	call	0x148c	; 0x148c <Sys_Contole_For_User>
     462:	81 33       	cpi	r24, 0x31	; 49
     464:	19 f0       	breq	.+6      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
     466:	82 33       	cpi	r24, 0x32	; 50
     468:	31 f0       	breq	.+12     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
     46a:	35 ce       	rjmp	.-918    	; 0xd6 <main+0x44>
					{
						case '1':
						LCD_voidClearDisplay();
     46c:	0e 94 c1 0c 	call	0x1982	; 0x1982 <LCD_voidClearDisplay>
						Led_Controle();
     470:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <Led_Controle>
						
						break;
     474:	30 ce       	rjmp	.-928    	; 0xd6 <main+0x44>
						case '2':
						LCD_voidClearDisplay();
     476:	0e 94 c1 0c 	call	0x1982	; 0x1982 <LCD_voidClearDisplay>
						Dimmer_Controle();
     47a:	0e 94 c5 0c 	call	0x198a	; 0x198a <Dimmer_Controle>
						
						break;
     47e:	2b ce       	rjmp	.-938    	; 0xd6 <main+0x44>
				
				/////////////////////////////
				
			}
			else{
				LCD_voidSendString("wrong password ");
     480:	86 e5       	ldi	r24, 0x56	; 86
     482:	91 e0       	ldi	r25, 0x01	; 1
     484:	0e 94 9f 0c 	call	0x193e	; 0x193e <LCD_voidSendString>
				LCD_voidSetCursor(LCD_U8_ROW_2 , LCD_u8_COLUMN_1);
     488:	60 e0       	ldi	r22, 0x00	; 0
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	0e 94 b2 0c 	call	0x1964	; 0x1964 <LCD_voidSetCursor>
				LCD_voidSendString("try again ");
     490:	8a e0       	ldi	r24, 0x0A	; 10
     492:	91 e0       	ldi	r25, 0x01	; 1
     494:	0e 94 9f 0c 	call	0x193e	; 0x193e <LCD_voidSendString>
				Buz_Flag++;
     498:	0f 5f       	subi	r16, 0xFF	; 255
     49a:	1f 4f       	sbci	r17, 0xFF	; 255
				if (Buz_Flag==2){
     49c:	02 30       	cpi	r16, 0x02	; 2
     49e:	11 05       	cpc	r17, r1
     4a0:	29 f4       	brne	.+10     	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
					Buz_Flag=0;
					BUZ_voidSetAlarm();
     4a2:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <BUZ_voidSetAlarm>
				LCD_voidSendString("wrong password ");
				LCD_voidSetCursor(LCD_U8_ROW_2 , LCD_u8_COLUMN_1);
				LCD_voidSendString("try again ");
				Buz_Flag++;
				if (Buz_Flag==2){
					Buz_Flag=0;
     4a6:	00 e0       	ldi	r16, 0x00	; 0
     4a8:	10 e0       	ldi	r17, 0x00	; 0
					BUZ_voidSetAlarm();
					continue;
     4aa:	15 ce       	rjmp	.-982    	; 0xd6 <main+0x44>
				}
				while (KEYPAD_u8GetPressedButton()=='\0');
     4ac:	0e 94 8a 0a 	call	0x1514	; 0x1514 <KEYPAD_u8GetPressedButton>
     4b0:	88 23       	and	r24, r24
     4b2:	e1 f3       	breq	.-8      	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
				LCD_voidClearDisplay();
     4b4:	0e 94 c1 0c 	call	0x1982	; 0x1982 <LCD_voidClearDisplay>
				continue;
     4b8:	0e ce       	rjmp	.-996    	; 0xd6 <main+0x44>
	/*11111111*/ } /*11111111*/ 
		
		else{
			///////////////////////////////////////
			//there is no admin , we will ask them to register thier admin
			LCD_voidSendString(" First time  ? . Register as admin ");
     4ba:	86 e6       	ldi	r24, 0x66	; 102
     4bc:	91 e0       	ldi	r25, 0x01	; 1
     4be:	0e 94 9f 0c 	call	0x193e	; 0x193e <LCD_voidSendString>
			LCD_voidSetCursor(LCD_U8_ROW_2 , LCD_u8_COLUMN_1);
     4c2:	60 e0       	ldi	r22, 0x00	; 0
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	0e 94 b2 0c 	call	0x1964	; 0x1964 <LCD_voidSetCursor>
			u8 admin_Jar[5] ;
			u8 Admin_Pass_Jar[5] ;
			
			 Read_Name_Pass( admin_Jar, Admin_Pass_Jar);
     4ca:	be 01       	movw	r22, r28
     4cc:	6f 5f       	subi	r22, 0xFF	; 255
     4ce:	7f 4f       	sbci	r23, 0xFF	; 255
     4d0:	ce 01       	movw	r24, r28
     4d2:	06 96       	adiw	r24, 0x06	; 6
     4d4:	0e 94 8d 02 	call	0x51a	; 0x51a <Read_Name_Pass>

			if (AddAdmin(admin_Jar,Admin_Pass_Jar))
     4d8:	be 01       	movw	r22, r28
     4da:	6f 5f       	subi	r22, 0xFF	; 255
     4dc:	7f 4f       	sbci	r23, 0xFF	; 255
     4de:	ce 01       	movw	r24, r28
     4e0:	06 96       	adiw	r24, 0x06	; 6
     4e2:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <AddAdmin>
     4e6:	88 23       	and	r24, r24
     4e8:	09 f4       	brne	.+2      	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
     4ea:	f5 cd       	rjmp	.-1046   	; 0xd6 <main+0x44>
			{
				LCD_voidSendString("added successfully ");
     4ec:	8d eb       	ldi	r24, 0xBD	; 189
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	0e 94 9f 0c 	call	0x193e	; 0x193e <LCD_voidSendString>
				LCD_voidClearDisplay();
     4f4:	0e 94 c1 0c 	call	0x1982	; 0x1982 <LCD_voidClearDisplay>
				LCD_voidSetCursor(LCD_U8_ROW_2 , LCD_u8_COLUMN_1);
     4f8:	60 e0       	ldi	r22, 0x00	; 0
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	0e 94 b2 0c 	call	0x1964	; 0x1964 <LCD_voidSetCursor>
				LCD_voidSendString("For exit : X ");
     500:	89 ea       	ldi	r24, 0xA9	; 169
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	0e 94 9f 0c 	call	0x193e	; 0x193e <LCD_voidSendString>
				while (KEYPAD_u8GetPressedButton()=='\0');
     508:	0e 94 8a 0a 	call	0x1514	; 0x1514 <KEYPAD_u8GetPressedButton>
     50c:	88 23       	and	r24, r24
     50e:	e1 f3       	breq	.-8      	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
				LCD_voidClearDisplay();
     510:	0e 94 c1 0c 	call	0x1982	; 0x1982 <LCD_voidClearDisplay>
				if (KEYPAD_u8GetPressedButton() == 'X')
     514:	0e 94 8a 0a 	call	0x1514	; 0x1514 <KEYPAD_u8GetPressedButton>
     518:	de cd       	rjmp	.-1092   	; 0xd6 <main+0x44>

0000051a <Read_Name_Pass>:

}
int SBD_GetUsedSize(void){
	return length ;

}
     51a:	ef 92       	push	r14
     51c:	ff 92       	push	r15
     51e:	0f 93       	push	r16
     520:	1f 93       	push	r17
     522:	cf 93       	push	r28
     524:	df 93       	push	r29
     526:	7c 01       	movw	r14, r24
     528:	8b 01       	movw	r16, r22
     52a:	8a e8       	ldi	r24, 0x8A	; 138
     52c:	91 e0       	ldi	r25, 0x01	; 1
     52e:	0e 94 9f 0c 	call	0x193e	; 0x193e <LCD_voidSendString>
     532:	0e 94 8a 0a 	call	0x1514	; 0x1514 <KEYPAD_u8GetPressedButton>
     536:	88 23       	and	r24, r24
     538:	e1 f3       	breq	.-8      	; 0x532 <Read_Name_Pass+0x18>
     53a:	0e 94 8a 0a 	call	0x1514	; 0x1514 <KEYPAD_u8GetPressedButton>
     53e:	88 23       	and	r24, r24
     540:	e1 f3       	breq	.-8      	; 0x53a <Read_Name_Pass+0x20>
     542:	0e 94 c1 0c 	call	0x1982	; 0x1982 <LCD_voidClearDisplay>
     546:	c0 e0       	ldi	r28, 0x00	; 0
     548:	d0 e0       	ldi	r29, 0x00	; 0
     54a:	12 c0       	rjmp	.+36     	; 0x570 <Read_Name_Pass+0x56>
     54c:	0e 94 8a 0a 	call	0x1514	; 0x1514 <KEYPAD_u8GetPressedButton>
     550:	f7 01       	movw	r30, r14
     552:	ec 0f       	add	r30, r28
     554:	fd 1f       	adc	r31, r29
     556:	80 83       	st	Z, r24
     558:	8a e2       	ldi	r24, 0x2A	; 42
     55a:	0e 94 47 0b 	call	0x168e	; 0x168e <LCD_voidSendData>
     55e:	0e 94 8a 0a 	call	0x1514	; 0x1514 <KEYPAD_u8GetPressedButton>
     562:	81 11       	cpse	r24, r1
     564:	fc cf       	rjmp	.-8      	; 0x55e <Read_Name_Pass+0x44>
     566:	0e 94 8a 0a 	call	0x1514	; 0x1514 <KEYPAD_u8GetPressedButton>
     56a:	88 23       	and	r24, r24
     56c:	e1 f3       	breq	.-8      	; 0x566 <Read_Name_Pass+0x4c>
     56e:	21 96       	adiw	r28, 0x01	; 1
     570:	c5 30       	cpi	r28, 0x05	; 5
     572:	d1 05       	cpc	r29, r1
     574:	5c f3       	brlt	.-42     	; 0x54c <Read_Name_Pass+0x32>
     576:	0e 94 c1 0c 	call	0x1982	; 0x1982 <LCD_voidClearDisplay>
     57a:	89 e9       	ldi	r24, 0x99	; 153
     57c:	91 e0       	ldi	r25, 0x01	; 1
     57e:	0e 94 9f 0c 	call	0x193e	; 0x193e <LCD_voidSendString>
     582:	0e 94 8a 0a 	call	0x1514	; 0x1514 <KEYPAD_u8GetPressedButton>
     586:	88 23       	and	r24, r24
     588:	e1 f3       	breq	.-8      	; 0x582 <Read_Name_Pass+0x68>
     58a:	0e 94 c1 0c 	call	0x1982	; 0x1982 <LCD_voidClearDisplay>
     58e:	c0 e0       	ldi	r28, 0x00	; 0
     590:	d0 e0       	ldi	r29, 0x00	; 0
     592:	12 c0       	rjmp	.+36     	; 0x5b8 <Read_Name_Pass+0x9e>
     594:	0e 94 8a 0a 	call	0x1514	; 0x1514 <KEYPAD_u8GetPressedButton>
     598:	f8 01       	movw	r30, r16
     59a:	ec 0f       	add	r30, r28
     59c:	fd 1f       	adc	r31, r29
     59e:	80 83       	st	Z, r24
     5a0:	8a e2       	ldi	r24, 0x2A	; 42
     5a2:	0e 94 47 0b 	call	0x168e	; 0x168e <LCD_voidSendData>
     5a6:	0e 94 8a 0a 	call	0x1514	; 0x1514 <KEYPAD_u8GetPressedButton>
     5aa:	81 11       	cpse	r24, r1
     5ac:	fc cf       	rjmp	.-8      	; 0x5a6 <Read_Name_Pass+0x8c>
     5ae:	0e 94 8a 0a 	call	0x1514	; 0x1514 <KEYPAD_u8GetPressedButton>
     5b2:	88 23       	and	r24, r24
     5b4:	e1 f3       	breq	.-8      	; 0x5ae <Read_Name_Pass+0x94>
     5b6:	21 96       	adiw	r28, 0x01	; 1
     5b8:	c5 30       	cpi	r28, 0x05	; 5
     5ba:	d1 05       	cpc	r29, r1
     5bc:	5c f3       	brlt	.-42     	; 0x594 <Read_Name_Pass+0x7a>
     5be:	0e 94 c1 0c 	call	0x1982	; 0x1982 <LCD_voidClearDisplay>
     5c2:	df 91       	pop	r29
     5c4:	cf 91       	pop	r28
     5c6:	1f 91       	pop	r17
     5c8:	0f 91       	pop	r16
     5ca:	ff 90       	pop	r15
     5cc:	ef 90       	pop	r14
     5ce:	08 95       	ret

000005d0 <AddAdmin>:
     5d0:	0f 93       	push	r16
     5d2:	1f 93       	push	r17
     5d4:	cf 93       	push	r28
     5d6:	df 93       	push	r29
     5d8:	8c 01       	movw	r16, r24
     5da:	eb 01       	movw	r28, r22
     5dc:	fc 01       	movw	r30, r24
     5de:	60 81       	ld	r22, Z
     5e0:	8f e1       	ldi	r24, 0x1F	; 31
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     5e8:	f8 01       	movw	r30, r16
     5ea:	61 81       	ldd	r22, Z+1	; 0x01
     5ec:	80 e2       	ldi	r24, 0x20	; 32
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     5f4:	f8 01       	movw	r30, r16
     5f6:	62 81       	ldd	r22, Z+2	; 0x02
     5f8:	81 e2       	ldi	r24, 0x21	; 33
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     600:	f8 01       	movw	r30, r16
     602:	63 81       	ldd	r22, Z+3	; 0x03
     604:	82 e2       	ldi	r24, 0x22	; 34
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     60c:	f8 01       	movw	r30, r16
     60e:	64 81       	ldd	r22, Z+4	; 0x04
     610:	83 e2       	ldi	r24, 0x23	; 35
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     618:	68 81       	ld	r22, Y
     61a:	84 e2       	ldi	r24, 0x24	; 36
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     622:	69 81       	ldd	r22, Y+1	; 0x01
     624:	85 e2       	ldi	r24, 0x25	; 37
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     62c:	6a 81       	ldd	r22, Y+2	; 0x02
     62e:	86 e2       	ldi	r24, 0x26	; 38
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     636:	6b 81       	ldd	r22, Y+3	; 0x03
     638:	87 e2       	ldi	r24, 0x27	; 39
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     640:	6c 81       	ldd	r22, Y+4	; 0x04
     642:	88 e2       	ldi	r24, 0x28	; 40
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     64a:	65 e0       	ldi	r22, 0x05	; 5
     64c:	89 e2       	ldi	r24, 0x29	; 41
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     654:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <Is_There_Admin>
     658:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <Is_There_Admin+0x1>
     65c:	01 96       	adiw	r24, 0x01	; 1
     65e:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <Is_There_Admin+0x1>
     662:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <Is_There_Admin>
     666:	81 e0       	ldi	r24, 0x01	; 1
     668:	df 91       	pop	r29
     66a:	cf 91       	pop	r28
     66c:	1f 91       	pop	r17
     66e:	0f 91       	pop	r16
     670:	08 95       	ret

00000672 <IsAdminExist>:
     672:	0f 93       	push	r16
     674:	1f 93       	push	r17
     676:	cf 93       	push	r28
     678:	df 93       	push	r29
     67a:	8c 01       	movw	r16, r24
     67c:	eb 01       	movw	r28, r22
     67e:	8f e1       	ldi	r24, 0x1F	; 31
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     686:	98 81       	ld	r25, Y
     688:	89 13       	cpse	r24, r25
     68a:	46 c0       	rjmp	.+140    	; 0x718 <IsAdminExist+0xa6>
     68c:	80 e2       	ldi	r24, 0x20	; 32
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     694:	99 81       	ldd	r25, Y+1	; 0x01
     696:	89 13       	cpse	r24, r25
     698:	41 c0       	rjmp	.+130    	; 0x71c <IsAdminExist+0xaa>
     69a:	81 e2       	ldi	r24, 0x21	; 33
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     6a2:	9a 81       	ldd	r25, Y+2	; 0x02
     6a4:	89 13       	cpse	r24, r25
     6a6:	3c c0       	rjmp	.+120    	; 0x720 <IsAdminExist+0xae>
     6a8:	82 e2       	ldi	r24, 0x22	; 34
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     6b0:	9b 81       	ldd	r25, Y+3	; 0x03
     6b2:	89 13       	cpse	r24, r25
     6b4:	37 c0       	rjmp	.+110    	; 0x724 <IsAdminExist+0xb2>
     6b6:	83 e2       	ldi	r24, 0x23	; 35
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     6be:	9c 81       	ldd	r25, Y+4	; 0x04
     6c0:	89 13       	cpse	r24, r25
     6c2:	32 c0       	rjmp	.+100    	; 0x728 <IsAdminExist+0xb6>
     6c4:	84 e2       	ldi	r24, 0x24	; 36
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     6cc:	f8 01       	movw	r30, r16
     6ce:	90 81       	ld	r25, Z
     6d0:	89 13       	cpse	r24, r25
     6d2:	2c c0       	rjmp	.+88     	; 0x72c <IsAdminExist+0xba>
     6d4:	85 e2       	ldi	r24, 0x25	; 37
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     6dc:	f8 01       	movw	r30, r16
     6de:	91 81       	ldd	r25, Z+1	; 0x01
     6e0:	89 13       	cpse	r24, r25
     6e2:	26 c0       	rjmp	.+76     	; 0x730 <IsAdminExist+0xbe>
     6e4:	86 e2       	ldi	r24, 0x26	; 38
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     6ec:	f8 01       	movw	r30, r16
     6ee:	92 81       	ldd	r25, Z+2	; 0x02
     6f0:	89 13       	cpse	r24, r25
     6f2:	20 c0       	rjmp	.+64     	; 0x734 <IsAdminExist+0xc2>
     6f4:	87 e2       	ldi	r24, 0x27	; 39
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     6fc:	f8 01       	movw	r30, r16
     6fe:	93 81       	ldd	r25, Z+3	; 0x03
     700:	89 13       	cpse	r24, r25
     702:	1a c0       	rjmp	.+52     	; 0x738 <IsAdminExist+0xc6>
     704:	88 e2       	ldi	r24, 0x28	; 40
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     70c:	f8 01       	movw	r30, r16
     70e:	94 81       	ldd	r25, Z+4	; 0x04
     710:	89 13       	cpse	r24, r25
     712:	14 c0       	rjmp	.+40     	; 0x73c <IsAdminExist+0xca>
     714:	81 e0       	ldi	r24, 0x01	; 1
     716:	13 c0       	rjmp	.+38     	; 0x73e <IsAdminExist+0xcc>
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	11 c0       	rjmp	.+34     	; 0x73e <IsAdminExist+0xcc>
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	0f c0       	rjmp	.+30     	; 0x73e <IsAdminExist+0xcc>
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	0d c0       	rjmp	.+26     	; 0x73e <IsAdminExist+0xcc>
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	0b c0       	rjmp	.+22     	; 0x73e <IsAdminExist+0xcc>
     728:	80 e0       	ldi	r24, 0x00	; 0
     72a:	09 c0       	rjmp	.+18     	; 0x73e <IsAdminExist+0xcc>
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	07 c0       	rjmp	.+14     	; 0x73e <IsAdminExist+0xcc>
     730:	80 e0       	ldi	r24, 0x00	; 0
     732:	05 c0       	rjmp	.+10     	; 0x73e <IsAdminExist+0xcc>
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	03 c0       	rjmp	.+6      	; 0x73e <IsAdminExist+0xcc>
     738:	80 e0       	ldi	r24, 0x00	; 0
     73a:	01 c0       	rjmp	.+2      	; 0x73e <IsAdminExist+0xcc>
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	df 91       	pop	r29
     740:	cf 91       	pop	r28
     742:	1f 91       	pop	r17
     744:	0f 91       	pop	r16
     746:	08 95       	ret

00000748 <AddEntry>:
     748:	0f 93       	push	r16
     74a:	1f 93       	push	r17
     74c:	cf 93       	push	r28
     74e:	df 93       	push	r29
     750:	8c 01       	movw	r16, r24
     752:	eb 01       	movw	r28, r22
     754:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <__data_end>
     758:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <__data_end+0x1>
     75c:	81 30       	cpi	r24, 0x01	; 1
     75e:	91 05       	cpc	r25, r1
     760:	09 f4       	brne	.+2      	; 0x764 <AddEntry+0x1c>
     762:	4e c0       	rjmp	.+156    	; 0x800 <__DATA_REGION_LENGTH__>
     764:	82 30       	cpi	r24, 0x02	; 2
     766:	91 05       	cpc	r25, r1
     768:	09 f4       	brne	.+2      	; 0x76c <AddEntry+0x24>
     76a:	91 c0       	rjmp	.+290    	; 0x88e <__stack+0x2f>
     76c:	89 2b       	or	r24, r25
     76e:	09 f0       	breq	.+2      	; 0x772 <AddEntry+0x2a>
     770:	d5 c0       	rjmp	.+426    	; 0x91c <__stack+0xbd>
     772:	f8 01       	movw	r30, r16
     774:	60 81       	ld	r22, Z
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     77e:	f8 01       	movw	r30, r16
     780:	61 81       	ldd	r22, Z+1	; 0x01
     782:	81 e0       	ldi	r24, 0x01	; 1
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     78a:	f8 01       	movw	r30, r16
     78c:	62 81       	ldd	r22, Z+2	; 0x02
     78e:	82 e0       	ldi	r24, 0x02	; 2
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     796:	f8 01       	movw	r30, r16
     798:	63 81       	ldd	r22, Z+3	; 0x03
     79a:	83 e0       	ldi	r24, 0x03	; 3
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     7a2:	f8 01       	movw	r30, r16
     7a4:	64 81       	ldd	r22, Z+4	; 0x04
     7a6:	84 e0       	ldi	r24, 0x04	; 4
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     7ae:	68 81       	ld	r22, Y
     7b0:	85 e0       	ldi	r24, 0x05	; 5
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     7b8:	69 81       	ldd	r22, Y+1	; 0x01
     7ba:	86 e0       	ldi	r24, 0x06	; 6
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     7c2:	6a 81       	ldd	r22, Y+2	; 0x02
     7c4:	87 e0       	ldi	r24, 0x07	; 7
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     7cc:	6b 81       	ldd	r22, Y+3	; 0x03
     7ce:	88 e0       	ldi	r24, 0x08	; 8
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     7d6:	6c 81       	ldd	r22, Y+4	; 0x04
     7d8:	89 e0       	ldi	r24, 0x09	; 9
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     7e0:	61 e0       	ldi	r22, 0x01	; 1
     7e2:	8e e1       	ldi	r24, 0x1E	; 30
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     7ea:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <__data_end>
     7ee:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <__data_end+0x1>
     7f2:	01 96       	adiw	r24, 0x01	; 1
     7f4:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <__data_end+0x1>
     7f8:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <__data_end>
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	8f c0       	rjmp	.+286    	; 0x91e <__stack+0xbf>
     800:	f8 01       	movw	r30, r16
     802:	60 81       	ld	r22, Z
     804:	8a e0       	ldi	r24, 0x0A	; 10
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     80c:	f8 01       	movw	r30, r16
     80e:	61 81       	ldd	r22, Z+1	; 0x01
     810:	8b e0       	ldi	r24, 0x0B	; 11
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     818:	f8 01       	movw	r30, r16
     81a:	62 81       	ldd	r22, Z+2	; 0x02
     81c:	8c e0       	ldi	r24, 0x0C	; 12
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     824:	f8 01       	movw	r30, r16
     826:	63 81       	ldd	r22, Z+3	; 0x03
     828:	8d e0       	ldi	r24, 0x0D	; 13
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     830:	f8 01       	movw	r30, r16
     832:	64 81       	ldd	r22, Z+4	; 0x04
     834:	8e e0       	ldi	r24, 0x0E	; 14
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     83c:	68 81       	ld	r22, Y
     83e:	8f e0       	ldi	r24, 0x0F	; 15
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     846:	69 81       	ldd	r22, Y+1	; 0x01
     848:	80 e1       	ldi	r24, 0x10	; 16
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     850:	6a 81       	ldd	r22, Y+2	; 0x02
     852:	81 e1       	ldi	r24, 0x11	; 17
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     85a:	6b 81       	ldd	r22, Y+3	; 0x03
     85c:	82 e1       	ldi	r24, 0x12	; 18
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     864:	6c 81       	ldd	r22, Y+4	; 0x04
     866:	83 e1       	ldi	r24, 0x13	; 19
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     86e:	62 e0       	ldi	r22, 0x02	; 2
     870:	8e e1       	ldi	r24, 0x1E	; 30
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     878:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <__data_end>
     87c:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <__data_end+0x1>
     880:	01 96       	adiw	r24, 0x01	; 1
     882:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <__data_end+0x1>
     886:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <__data_end>
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	48 c0       	rjmp	.+144    	; 0x91e <__stack+0xbf>
     88e:	f8 01       	movw	r30, r16
     890:	60 81       	ld	r22, Z
     892:	84 e1       	ldi	r24, 0x14	; 20
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     89a:	f8 01       	movw	r30, r16
     89c:	61 81       	ldd	r22, Z+1	; 0x01
     89e:	85 e1       	ldi	r24, 0x15	; 21
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     8a6:	f8 01       	movw	r30, r16
     8a8:	62 81       	ldd	r22, Z+2	; 0x02
     8aa:	86 e1       	ldi	r24, 0x16	; 22
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     8b2:	f8 01       	movw	r30, r16
     8b4:	63 81       	ldd	r22, Z+3	; 0x03
     8b6:	87 e1       	ldi	r24, 0x17	; 23
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     8be:	f8 01       	movw	r30, r16
     8c0:	64 81       	ldd	r22, Z+4	; 0x04
     8c2:	88 e1       	ldi	r24, 0x18	; 24
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     8ca:	68 81       	ld	r22, Y
     8cc:	89 e1       	ldi	r24, 0x19	; 25
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     8d4:	69 81       	ldd	r22, Y+1	; 0x01
     8d6:	8a e1       	ldi	r24, 0x1A	; 26
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     8de:	6a 81       	ldd	r22, Y+2	; 0x02
     8e0:	8b e1       	ldi	r24, 0x1B	; 27
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     8e8:	6b 81       	ldd	r22, Y+3	; 0x03
     8ea:	8c e1       	ldi	r24, 0x1C	; 28
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     8f2:	6c 81       	ldd	r22, Y+4	; 0x04
     8f4:	8d e1       	ldi	r24, 0x1D	; 29
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     8fc:	63 e0       	ldi	r22, 0x03	; 3
     8fe:	8e e1       	ldi	r24, 0x1E	; 30
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     906:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <__data_end>
     90a:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <__data_end+0x1>
     90e:	01 96       	adiw	r24, 0x01	; 1
     910:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <__data_end+0x1>
     914:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <__data_end>
     918:	81 e0       	ldi	r24, 0x01	; 1
     91a:	01 c0       	rjmp	.+2      	; 0x91e <__stack+0xbf>
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	df 91       	pop	r29
     920:	cf 91       	pop	r28
     922:	1f 91       	pop	r17
     924:	0f 91       	pop	r16
     926:	08 95       	ret

00000928 <IsUserExist>:
     928:	0f 93       	push	r16
     92a:	1f 93       	push	r17
     92c:	cf 93       	push	r28
     92e:	df 93       	push	r29
     930:	8c 01       	movw	r16, r24
     932:	eb 01       	movw	r28, r22
     934:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <__data_end>
     938:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <__data_end+0x1>
     93c:	82 30       	cpi	r24, 0x02	; 2
     93e:	91 05       	cpc	r25, r1
     940:	09 f4       	brne	.+2      	; 0x944 <IsUserExist+0x1c>
     942:	54 c0       	rjmp	.+168    	; 0x9ec <IsUserExist+0xc4>
     944:	83 30       	cpi	r24, 0x03	; 3
     946:	91 05       	cpc	r25, r1
     948:	09 f4       	brne	.+2      	; 0x94c <IsUserExist+0x24>
     94a:	e9 c0       	rjmp	.+466    	; 0xb1e <IsUserExist+0x1f6>
     94c:	01 97       	sbiw	r24, 0x01	; 1
     94e:	09 f0       	breq	.+2      	; 0x952 <IsUserExist+0x2a>
     950:	cb c1       	rjmp	.+918    	; 0xce8 <IsUserExist+0x3c0>
     952:	80 e0       	ldi	r24, 0x00	; 0
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     95a:	98 81       	ld	r25, Y
     95c:	89 13       	cpse	r24, r25
     95e:	c6 c1       	rjmp	.+908    	; 0xcec <IsUserExist+0x3c4>
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     968:	99 81       	ldd	r25, Y+1	; 0x01
     96a:	89 13       	cpse	r24, r25
     96c:	c1 c1       	rjmp	.+898    	; 0xcf0 <IsUserExist+0x3c8>
     96e:	82 e0       	ldi	r24, 0x02	; 2
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     976:	9a 81       	ldd	r25, Y+2	; 0x02
     978:	89 13       	cpse	r24, r25
     97a:	bc c1       	rjmp	.+888    	; 0xcf4 <IsUserExist+0x3cc>
     97c:	83 e0       	ldi	r24, 0x03	; 3
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     984:	9b 81       	ldd	r25, Y+3	; 0x03
     986:	89 13       	cpse	r24, r25
     988:	b7 c1       	rjmp	.+878    	; 0xcf8 <IsUserExist+0x3d0>
     98a:	84 e0       	ldi	r24, 0x04	; 4
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     992:	9c 81       	ldd	r25, Y+4	; 0x04
     994:	89 13       	cpse	r24, r25
     996:	b2 c1       	rjmp	.+868    	; 0xcfc <IsUserExist+0x3d4>
     998:	85 e0       	ldi	r24, 0x05	; 5
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     9a0:	f8 01       	movw	r30, r16
     9a2:	90 81       	ld	r25, Z
     9a4:	89 13       	cpse	r24, r25
     9a6:	ac c1       	rjmp	.+856    	; 0xd00 <IsUserExist+0x3d8>
     9a8:	86 e0       	ldi	r24, 0x06	; 6
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     9b0:	f8 01       	movw	r30, r16
     9b2:	91 81       	ldd	r25, Z+1	; 0x01
     9b4:	89 13       	cpse	r24, r25
     9b6:	a6 c1       	rjmp	.+844    	; 0xd04 <IsUserExist+0x3dc>
     9b8:	87 e0       	ldi	r24, 0x07	; 7
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     9c0:	f8 01       	movw	r30, r16
     9c2:	92 81       	ldd	r25, Z+2	; 0x02
     9c4:	89 13       	cpse	r24, r25
     9c6:	a0 c1       	rjmp	.+832    	; 0xd08 <IsUserExist+0x3e0>
     9c8:	88 e0       	ldi	r24, 0x08	; 8
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     9d0:	f8 01       	movw	r30, r16
     9d2:	93 81       	ldd	r25, Z+3	; 0x03
     9d4:	89 13       	cpse	r24, r25
     9d6:	9a c1       	rjmp	.+820    	; 0xd0c <IsUserExist+0x3e4>
     9d8:	89 e0       	ldi	r24, 0x09	; 9
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     9e0:	f8 01       	movw	r30, r16
     9e2:	94 81       	ldd	r25, Z+4	; 0x04
     9e4:	89 13       	cpse	r24, r25
     9e6:	94 c1       	rjmp	.+808    	; 0xd10 <IsUserExist+0x3e8>
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	c1 c1       	rjmp	.+898    	; 0xd6e <IsUserExist+0x446>
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     9f4:	98 81       	ld	r25, Y
     9f6:	89 13       	cpse	r24, r25
     9f8:	45 c0       	rjmp	.+138    	; 0xa84 <IsUserExist+0x15c>
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     a02:	99 81       	ldd	r25, Y+1	; 0x01
     a04:	89 13       	cpse	r24, r25
     a06:	3e c0       	rjmp	.+124    	; 0xa84 <IsUserExist+0x15c>
     a08:	82 e0       	ldi	r24, 0x02	; 2
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     a10:	9a 81       	ldd	r25, Y+2	; 0x02
     a12:	89 13       	cpse	r24, r25
     a14:	37 c0       	rjmp	.+110    	; 0xa84 <IsUserExist+0x15c>
     a16:	83 e0       	ldi	r24, 0x03	; 3
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     a1e:	9b 81       	ldd	r25, Y+3	; 0x03
     a20:	89 13       	cpse	r24, r25
     a22:	30 c0       	rjmp	.+96     	; 0xa84 <IsUserExist+0x15c>
     a24:	84 e0       	ldi	r24, 0x04	; 4
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     a2c:	9c 81       	ldd	r25, Y+4	; 0x04
     a2e:	89 13       	cpse	r24, r25
     a30:	29 c0       	rjmp	.+82     	; 0xa84 <IsUserExist+0x15c>
     a32:	85 e0       	ldi	r24, 0x05	; 5
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     a3a:	f8 01       	movw	r30, r16
     a3c:	90 81       	ld	r25, Z
     a3e:	89 13       	cpse	r24, r25
     a40:	21 c0       	rjmp	.+66     	; 0xa84 <IsUserExist+0x15c>
     a42:	86 e0       	ldi	r24, 0x06	; 6
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     a4a:	f8 01       	movw	r30, r16
     a4c:	91 81       	ldd	r25, Z+1	; 0x01
     a4e:	89 13       	cpse	r24, r25
     a50:	19 c0       	rjmp	.+50     	; 0xa84 <IsUserExist+0x15c>
     a52:	87 e0       	ldi	r24, 0x07	; 7
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     a5a:	f8 01       	movw	r30, r16
     a5c:	92 81       	ldd	r25, Z+2	; 0x02
     a5e:	89 13       	cpse	r24, r25
     a60:	11 c0       	rjmp	.+34     	; 0xa84 <IsUserExist+0x15c>
     a62:	88 e0       	ldi	r24, 0x08	; 8
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     a6a:	f8 01       	movw	r30, r16
     a6c:	93 81       	ldd	r25, Z+3	; 0x03
     a6e:	89 13       	cpse	r24, r25
     a70:	09 c0       	rjmp	.+18     	; 0xa84 <IsUserExist+0x15c>
     a72:	89 e0       	ldi	r24, 0x09	; 9
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     a7a:	f8 01       	movw	r30, r16
     a7c:	94 81       	ldd	r25, Z+4	; 0x04
     a7e:	89 17       	cp	r24, r25
     a80:	09 f4       	brne	.+2      	; 0xa84 <IsUserExist+0x15c>
     a82:	48 c1       	rjmp	.+656    	; 0xd14 <IsUserExist+0x3ec>
     a84:	8a e0       	ldi	r24, 0x0A	; 10
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     a8c:	98 81       	ld	r25, Y
     a8e:	89 13       	cpse	r24, r25
     a90:	43 c1       	rjmp	.+646    	; 0xd18 <IsUserExist+0x3f0>
     a92:	8b e0       	ldi	r24, 0x0B	; 11
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     a9a:	99 81       	ldd	r25, Y+1	; 0x01
     a9c:	89 13       	cpse	r24, r25
     a9e:	3e c1       	rjmp	.+636    	; 0xd1c <IsUserExist+0x3f4>
     aa0:	8c e0       	ldi	r24, 0x0C	; 12
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     aa8:	9a 81       	ldd	r25, Y+2	; 0x02
     aaa:	89 13       	cpse	r24, r25
     aac:	39 c1       	rjmp	.+626    	; 0xd20 <IsUserExist+0x3f8>
     aae:	8d e0       	ldi	r24, 0x0D	; 13
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     ab6:	9b 81       	ldd	r25, Y+3	; 0x03
     ab8:	89 13       	cpse	r24, r25
     aba:	34 c1       	rjmp	.+616    	; 0xd24 <IsUserExist+0x3fc>
     abc:	8e e0       	ldi	r24, 0x0E	; 14
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     ac4:	9c 81       	ldd	r25, Y+4	; 0x04
     ac6:	89 13       	cpse	r24, r25
     ac8:	2f c1       	rjmp	.+606    	; 0xd28 <IsUserExist+0x400>
     aca:	8f e0       	ldi	r24, 0x0F	; 15
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     ad2:	f8 01       	movw	r30, r16
     ad4:	90 81       	ld	r25, Z
     ad6:	89 13       	cpse	r24, r25
     ad8:	29 c1       	rjmp	.+594    	; 0xd2c <IsUserExist+0x404>
     ada:	80 e1       	ldi	r24, 0x10	; 16
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     ae2:	f8 01       	movw	r30, r16
     ae4:	91 81       	ldd	r25, Z+1	; 0x01
     ae6:	89 13       	cpse	r24, r25
     ae8:	23 c1       	rjmp	.+582    	; 0xd30 <IsUserExist+0x408>
     aea:	81 e1       	ldi	r24, 0x11	; 17
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     af2:	f8 01       	movw	r30, r16
     af4:	92 81       	ldd	r25, Z+2	; 0x02
     af6:	89 13       	cpse	r24, r25
     af8:	1d c1       	rjmp	.+570    	; 0xd34 <IsUserExist+0x40c>
     afa:	82 e1       	ldi	r24, 0x12	; 18
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     b02:	f8 01       	movw	r30, r16
     b04:	93 81       	ldd	r25, Z+3	; 0x03
     b06:	89 13       	cpse	r24, r25
     b08:	17 c1       	rjmp	.+558    	; 0xd38 <IsUserExist+0x410>
     b0a:	83 e1       	ldi	r24, 0x13	; 19
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     b12:	f8 01       	movw	r30, r16
     b14:	94 81       	ldd	r25, Z+4	; 0x04
     b16:	89 13       	cpse	r24, r25
     b18:	11 c1       	rjmp	.+546    	; 0xd3c <IsUserExist+0x414>
     b1a:	81 e0       	ldi	r24, 0x01	; 1
     b1c:	28 c1       	rjmp	.+592    	; 0xd6e <IsUserExist+0x446>
     b1e:	80 e0       	ldi	r24, 0x00	; 0
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     b26:	98 81       	ld	r25, Y
     b28:	89 13       	cpse	r24, r25
     b2a:	45 c0       	rjmp	.+138    	; 0xbb6 <IsUserExist+0x28e>
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     b34:	99 81       	ldd	r25, Y+1	; 0x01
     b36:	89 13       	cpse	r24, r25
     b38:	3e c0       	rjmp	.+124    	; 0xbb6 <IsUserExist+0x28e>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     b42:	9a 81       	ldd	r25, Y+2	; 0x02
     b44:	89 13       	cpse	r24, r25
     b46:	37 c0       	rjmp	.+110    	; 0xbb6 <IsUserExist+0x28e>
     b48:	83 e0       	ldi	r24, 0x03	; 3
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     b50:	9b 81       	ldd	r25, Y+3	; 0x03
     b52:	89 13       	cpse	r24, r25
     b54:	30 c0       	rjmp	.+96     	; 0xbb6 <IsUserExist+0x28e>
     b56:	84 e0       	ldi	r24, 0x04	; 4
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     b5e:	9c 81       	ldd	r25, Y+4	; 0x04
     b60:	89 13       	cpse	r24, r25
     b62:	29 c0       	rjmp	.+82     	; 0xbb6 <IsUserExist+0x28e>
     b64:	85 e0       	ldi	r24, 0x05	; 5
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     b6c:	f8 01       	movw	r30, r16
     b6e:	90 81       	ld	r25, Z
     b70:	89 13       	cpse	r24, r25
     b72:	21 c0       	rjmp	.+66     	; 0xbb6 <IsUserExist+0x28e>
     b74:	86 e0       	ldi	r24, 0x06	; 6
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     b7c:	f8 01       	movw	r30, r16
     b7e:	91 81       	ldd	r25, Z+1	; 0x01
     b80:	89 13       	cpse	r24, r25
     b82:	19 c0       	rjmp	.+50     	; 0xbb6 <IsUserExist+0x28e>
     b84:	87 e0       	ldi	r24, 0x07	; 7
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     b8c:	f8 01       	movw	r30, r16
     b8e:	92 81       	ldd	r25, Z+2	; 0x02
     b90:	89 13       	cpse	r24, r25
     b92:	11 c0       	rjmp	.+34     	; 0xbb6 <IsUserExist+0x28e>
     b94:	88 e0       	ldi	r24, 0x08	; 8
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     b9c:	f8 01       	movw	r30, r16
     b9e:	93 81       	ldd	r25, Z+3	; 0x03
     ba0:	89 13       	cpse	r24, r25
     ba2:	09 c0       	rjmp	.+18     	; 0xbb6 <IsUserExist+0x28e>
     ba4:	89 e0       	ldi	r24, 0x09	; 9
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     bac:	f8 01       	movw	r30, r16
     bae:	94 81       	ldd	r25, Z+4	; 0x04
     bb0:	89 17       	cp	r24, r25
     bb2:	09 f4       	brne	.+2      	; 0xbb6 <IsUserExist+0x28e>
     bb4:	c5 c0       	rjmp	.+394    	; 0xd40 <IsUserExist+0x418>
     bb6:	8a e0       	ldi	r24, 0x0A	; 10
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     bbe:	98 81       	ld	r25, Y
     bc0:	89 13       	cpse	r24, r25
     bc2:	45 c0       	rjmp	.+138    	; 0xc4e <IsUserExist+0x326>
     bc4:	8b e0       	ldi	r24, 0x0B	; 11
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     bcc:	99 81       	ldd	r25, Y+1	; 0x01
     bce:	89 13       	cpse	r24, r25
     bd0:	3e c0       	rjmp	.+124    	; 0xc4e <IsUserExist+0x326>
     bd2:	8c e0       	ldi	r24, 0x0C	; 12
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     bda:	9a 81       	ldd	r25, Y+2	; 0x02
     bdc:	89 13       	cpse	r24, r25
     bde:	37 c0       	rjmp	.+110    	; 0xc4e <IsUserExist+0x326>
     be0:	8d e0       	ldi	r24, 0x0D	; 13
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     be8:	9b 81       	ldd	r25, Y+3	; 0x03
     bea:	89 13       	cpse	r24, r25
     bec:	30 c0       	rjmp	.+96     	; 0xc4e <IsUserExist+0x326>
     bee:	8e e0       	ldi	r24, 0x0E	; 14
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     bf6:	9c 81       	ldd	r25, Y+4	; 0x04
     bf8:	89 13       	cpse	r24, r25
     bfa:	29 c0       	rjmp	.+82     	; 0xc4e <IsUserExist+0x326>
     bfc:	8f e0       	ldi	r24, 0x0F	; 15
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     c04:	f8 01       	movw	r30, r16
     c06:	90 81       	ld	r25, Z
     c08:	89 13       	cpse	r24, r25
     c0a:	21 c0       	rjmp	.+66     	; 0xc4e <IsUserExist+0x326>
     c0c:	80 e1       	ldi	r24, 0x10	; 16
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     c14:	f8 01       	movw	r30, r16
     c16:	91 81       	ldd	r25, Z+1	; 0x01
     c18:	89 13       	cpse	r24, r25
     c1a:	19 c0       	rjmp	.+50     	; 0xc4e <IsUserExist+0x326>
     c1c:	81 e1       	ldi	r24, 0x11	; 17
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     c24:	f8 01       	movw	r30, r16
     c26:	92 81       	ldd	r25, Z+2	; 0x02
     c28:	89 13       	cpse	r24, r25
     c2a:	11 c0       	rjmp	.+34     	; 0xc4e <IsUserExist+0x326>
     c2c:	82 e1       	ldi	r24, 0x12	; 18
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     c34:	f8 01       	movw	r30, r16
     c36:	93 81       	ldd	r25, Z+3	; 0x03
     c38:	89 13       	cpse	r24, r25
     c3a:	09 c0       	rjmp	.+18     	; 0xc4e <IsUserExist+0x326>
     c3c:	83 e1       	ldi	r24, 0x13	; 19
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     c44:	f8 01       	movw	r30, r16
     c46:	94 81       	ldd	r25, Z+4	; 0x04
     c48:	89 17       	cp	r24, r25
     c4a:	09 f4       	brne	.+2      	; 0xc4e <IsUserExist+0x326>
     c4c:	7b c0       	rjmp	.+246    	; 0xd44 <IsUserExist+0x41c>
     c4e:	84 e1       	ldi	r24, 0x14	; 20
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     c56:	98 81       	ld	r25, Y
     c58:	89 13       	cpse	r24, r25
     c5a:	76 c0       	rjmp	.+236    	; 0xd48 <IsUserExist+0x420>
     c5c:	85 e1       	ldi	r24, 0x15	; 21
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     c64:	99 81       	ldd	r25, Y+1	; 0x01
     c66:	89 13       	cpse	r24, r25
     c68:	71 c0       	rjmp	.+226    	; 0xd4c <IsUserExist+0x424>
     c6a:	86 e1       	ldi	r24, 0x16	; 22
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     c72:	9a 81       	ldd	r25, Y+2	; 0x02
     c74:	89 13       	cpse	r24, r25
     c76:	6c c0       	rjmp	.+216    	; 0xd50 <IsUserExist+0x428>
     c78:	87 e1       	ldi	r24, 0x17	; 23
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     c80:	9b 81       	ldd	r25, Y+3	; 0x03
     c82:	89 13       	cpse	r24, r25
     c84:	67 c0       	rjmp	.+206    	; 0xd54 <IsUserExist+0x42c>
     c86:	88 e1       	ldi	r24, 0x18	; 24
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     c8e:	9c 81       	ldd	r25, Y+4	; 0x04
     c90:	89 13       	cpse	r24, r25
     c92:	62 c0       	rjmp	.+196    	; 0xd58 <IsUserExist+0x430>
     c94:	89 e1       	ldi	r24, 0x19	; 25
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     c9c:	f8 01       	movw	r30, r16
     c9e:	90 81       	ld	r25, Z
     ca0:	89 13       	cpse	r24, r25
     ca2:	5c c0       	rjmp	.+184    	; 0xd5c <IsUserExist+0x434>
     ca4:	8a e1       	ldi	r24, 0x1A	; 26
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     cac:	f8 01       	movw	r30, r16
     cae:	91 81       	ldd	r25, Z+1	; 0x01
     cb0:	89 13       	cpse	r24, r25
     cb2:	56 c0       	rjmp	.+172    	; 0xd60 <IsUserExist+0x438>
     cb4:	8b e1       	ldi	r24, 0x1B	; 27
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     cbc:	f8 01       	movw	r30, r16
     cbe:	92 81       	ldd	r25, Z+2	; 0x02
     cc0:	89 13       	cpse	r24, r25
     cc2:	50 c0       	rjmp	.+160    	; 0xd64 <IsUserExist+0x43c>
     cc4:	8c e1       	ldi	r24, 0x1C	; 28
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     ccc:	f8 01       	movw	r30, r16
     cce:	93 81       	ldd	r25, Z+3	; 0x03
     cd0:	89 13       	cpse	r24, r25
     cd2:	4a c0       	rjmp	.+148    	; 0xd68 <IsUserExist+0x440>
     cd4:	8d e1       	ldi	r24, 0x1D	; 29
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     cdc:	f8 01       	movw	r30, r16
     cde:	94 81       	ldd	r25, Z+4	; 0x04
     ce0:	89 13       	cpse	r24, r25
     ce2:	44 c0       	rjmp	.+136    	; 0xd6c <IsUserExist+0x444>
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	43 c0       	rjmp	.+134    	; 0xd6e <IsUserExist+0x446>
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	41 c0       	rjmp	.+130    	; 0xd6e <IsUserExist+0x446>
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	3f c0       	rjmp	.+126    	; 0xd6e <IsUserExist+0x446>
     cf0:	80 e0       	ldi	r24, 0x00	; 0
     cf2:	3d c0       	rjmp	.+122    	; 0xd6e <IsUserExist+0x446>
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	3b c0       	rjmp	.+118    	; 0xd6e <IsUserExist+0x446>
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	39 c0       	rjmp	.+114    	; 0xd6e <IsUserExist+0x446>
     cfc:	80 e0       	ldi	r24, 0x00	; 0
     cfe:	37 c0       	rjmp	.+110    	; 0xd6e <IsUserExist+0x446>
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	35 c0       	rjmp	.+106    	; 0xd6e <IsUserExist+0x446>
     d04:	80 e0       	ldi	r24, 0x00	; 0
     d06:	33 c0       	rjmp	.+102    	; 0xd6e <IsUserExist+0x446>
     d08:	80 e0       	ldi	r24, 0x00	; 0
     d0a:	31 c0       	rjmp	.+98     	; 0xd6e <IsUserExist+0x446>
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	2f c0       	rjmp	.+94     	; 0xd6e <IsUserExist+0x446>
     d10:	80 e0       	ldi	r24, 0x00	; 0
     d12:	2d c0       	rjmp	.+90     	; 0xd6e <IsUserExist+0x446>
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	2b c0       	rjmp	.+86     	; 0xd6e <IsUserExist+0x446>
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	29 c0       	rjmp	.+82     	; 0xd6e <IsUserExist+0x446>
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	27 c0       	rjmp	.+78     	; 0xd6e <IsUserExist+0x446>
     d20:	80 e0       	ldi	r24, 0x00	; 0
     d22:	25 c0       	rjmp	.+74     	; 0xd6e <IsUserExist+0x446>
     d24:	80 e0       	ldi	r24, 0x00	; 0
     d26:	23 c0       	rjmp	.+70     	; 0xd6e <IsUserExist+0x446>
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	21 c0       	rjmp	.+66     	; 0xd6e <IsUserExist+0x446>
     d2c:	80 e0       	ldi	r24, 0x00	; 0
     d2e:	1f c0       	rjmp	.+62     	; 0xd6e <IsUserExist+0x446>
     d30:	80 e0       	ldi	r24, 0x00	; 0
     d32:	1d c0       	rjmp	.+58     	; 0xd6e <IsUserExist+0x446>
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	1b c0       	rjmp	.+54     	; 0xd6e <IsUserExist+0x446>
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	19 c0       	rjmp	.+50     	; 0xd6e <IsUserExist+0x446>
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	17 c0       	rjmp	.+46     	; 0xd6e <IsUserExist+0x446>
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	15 c0       	rjmp	.+42     	; 0xd6e <IsUserExist+0x446>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	13 c0       	rjmp	.+38     	; 0xd6e <IsUserExist+0x446>
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	11 c0       	rjmp	.+34     	; 0xd6e <IsUserExist+0x446>
     d4c:	80 e0       	ldi	r24, 0x00	; 0
     d4e:	0f c0       	rjmp	.+30     	; 0xd6e <IsUserExist+0x446>
     d50:	80 e0       	ldi	r24, 0x00	; 0
     d52:	0d c0       	rjmp	.+26     	; 0xd6e <IsUserExist+0x446>
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	0b c0       	rjmp	.+22     	; 0xd6e <IsUserExist+0x446>
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	09 c0       	rjmp	.+18     	; 0xd6e <IsUserExist+0x446>
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	07 c0       	rjmp	.+14     	; 0xd6e <IsUserExist+0x446>
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	05 c0       	rjmp	.+10     	; 0xd6e <IsUserExist+0x446>
     d64:	80 e0       	ldi	r24, 0x00	; 0
     d66:	03 c0       	rjmp	.+6      	; 0xd6e <IsUserExist+0x446>
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	01 c0       	rjmp	.+2      	; 0xd6e <IsUserExist+0x446>
     d6c:	80 e0       	ldi	r24, 0x00	; 0
     d6e:	df 91       	pop	r29
     d70:	cf 91       	pop	r28
     d72:	1f 91       	pop	r17
     d74:	0f 91       	pop	r16
     d76:	08 95       	ret

00000d78 <Find_Delete>:
     d78:	0f 93       	push	r16
     d7a:	1f 93       	push	r17
     d7c:	cf 93       	push	r28
     d7e:	df 93       	push	r29
     d80:	8c 01       	movw	r16, r24
     d82:	eb 01       	movw	r28, r22
     d84:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <__data_end>
     d88:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <__data_end+0x1>
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	91 05       	cpc	r25, r1
     d90:	09 f4       	brne	.+2      	; 0xd94 <Find_Delete+0x1c>
     d92:	8b c0       	rjmp	.+278    	; 0xeaa <Find_Delete+0x132>
     d94:	83 30       	cpi	r24, 0x03	; 3
     d96:	91 05       	cpc	r25, r1
     d98:	09 f4       	brne	.+2      	; 0xd9c <Find_Delete+0x24>
     d9a:	8f c1       	rjmp	.+798    	; 0x10ba <Find_Delete+0x342>
     d9c:	01 97       	sbiw	r24, 0x01	; 1
     d9e:	09 f0       	breq	.+2      	; 0xda2 <Find_Delete+0x2a>
     da0:	18 c3       	rjmp	.+1584   	; 0x13d2 <Find_Delete+0x65a>
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     daa:	98 81       	ld	r25, Y
     dac:	89 13       	cpse	r24, r25
     dae:	13 c3       	rjmp	.+1574   	; 0x13d6 <Find_Delete+0x65e>
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     db8:	99 81       	ldd	r25, Y+1	; 0x01
     dba:	89 13       	cpse	r24, r25
     dbc:	0e c3       	rjmp	.+1564   	; 0x13da <Find_Delete+0x662>
     dbe:	82 e0       	ldi	r24, 0x02	; 2
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     dc6:	9a 81       	ldd	r25, Y+2	; 0x02
     dc8:	89 13       	cpse	r24, r25
     dca:	09 c3       	rjmp	.+1554   	; 0x13de <Find_Delete+0x666>
     dcc:	83 e0       	ldi	r24, 0x03	; 3
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     dd4:	9b 81       	ldd	r25, Y+3	; 0x03
     dd6:	89 13       	cpse	r24, r25
     dd8:	04 c3       	rjmp	.+1544   	; 0x13e2 <Find_Delete+0x66a>
     dda:	84 e0       	ldi	r24, 0x04	; 4
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     de2:	9c 81       	ldd	r25, Y+4	; 0x04
     de4:	89 13       	cpse	r24, r25
     de6:	ff c2       	rjmp	.+1534   	; 0x13e6 <Find_Delete+0x66e>
     de8:	85 e0       	ldi	r24, 0x05	; 5
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     df0:	f8 01       	movw	r30, r16
     df2:	90 81       	ld	r25, Z
     df4:	89 13       	cpse	r24, r25
     df6:	f9 c2       	rjmp	.+1522   	; 0x13ea <Find_Delete+0x672>
     df8:	86 e0       	ldi	r24, 0x06	; 6
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     e00:	f8 01       	movw	r30, r16
     e02:	91 81       	ldd	r25, Z+1	; 0x01
     e04:	89 13       	cpse	r24, r25
     e06:	f3 c2       	rjmp	.+1510   	; 0x13ee <Find_Delete+0x676>
     e08:	87 e0       	ldi	r24, 0x07	; 7
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     e10:	f8 01       	movw	r30, r16
     e12:	92 81       	ldd	r25, Z+2	; 0x02
     e14:	89 13       	cpse	r24, r25
     e16:	ed c2       	rjmp	.+1498   	; 0x13f2 <Find_Delete+0x67a>
     e18:	88 e0       	ldi	r24, 0x08	; 8
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     e20:	f8 01       	movw	r30, r16
     e22:	93 81       	ldd	r25, Z+3	; 0x03
     e24:	89 13       	cpse	r24, r25
     e26:	e7 c2       	rjmp	.+1486   	; 0x13f6 <Find_Delete+0x67e>
     e28:	89 e0       	ldi	r24, 0x09	; 9
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     e30:	f8 01       	movw	r30, r16
     e32:	94 81       	ldd	r25, Z+4	; 0x04
     e34:	89 13       	cpse	r24, r25
     e36:	e1 c2       	rjmp	.+1474   	; 0x13fa <Find_Delete+0x682>
     e38:	61 e0       	ldi	r22, 0x01	; 1
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     e42:	61 e0       	ldi	r22, 0x01	; 1
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     e4c:	61 e0       	ldi	r22, 0x01	; 1
     e4e:	82 e0       	ldi	r24, 0x02	; 2
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     e56:	61 e0       	ldi	r22, 0x01	; 1
     e58:	83 e0       	ldi	r24, 0x03	; 3
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     e60:	61 e0       	ldi	r22, 0x01	; 1
     e62:	84 e0       	ldi	r24, 0x04	; 4
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     e6a:	61 e0       	ldi	r22, 0x01	; 1
     e6c:	85 e0       	ldi	r24, 0x05	; 5
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     e74:	61 e0       	ldi	r22, 0x01	; 1
     e76:	86 e0       	ldi	r24, 0x06	; 6
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     e7e:	61 e0       	ldi	r22, 0x01	; 1
     e80:	87 e0       	ldi	r24, 0x07	; 7
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     e88:	61 e0       	ldi	r22, 0x01	; 1
     e8a:	88 e0       	ldi	r24, 0x08	; 8
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     e92:	61 e0       	ldi	r22, 0x01	; 1
     e94:	89 e0       	ldi	r24, 0x09	; 9
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     e9c:	60 e0       	ldi	r22, 0x00	; 0
     e9e:	8e e1       	ldi	r24, 0x1E	; 30
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	d1 c2       	rjmp	.+1442   	; 0x144c <Find_Delete+0x6d4>
     eaa:	80 e0       	ldi	r24, 0x00	; 0
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     eb2:	98 81       	ld	r25, Y
     eb4:	89 13       	cpse	r24, r25
     eb6:	7d c0       	rjmp	.+250    	; 0xfb2 <Find_Delete+0x23a>
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     ec0:	99 81       	ldd	r25, Y+1	; 0x01
     ec2:	89 13       	cpse	r24, r25
     ec4:	76 c0       	rjmp	.+236    	; 0xfb2 <Find_Delete+0x23a>
     ec6:	82 e0       	ldi	r24, 0x02	; 2
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     ece:	9a 81       	ldd	r25, Y+2	; 0x02
     ed0:	89 13       	cpse	r24, r25
     ed2:	6f c0       	rjmp	.+222    	; 0xfb2 <Find_Delete+0x23a>
     ed4:	83 e0       	ldi	r24, 0x03	; 3
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     edc:	9b 81       	ldd	r25, Y+3	; 0x03
     ede:	89 13       	cpse	r24, r25
     ee0:	68 c0       	rjmp	.+208    	; 0xfb2 <Find_Delete+0x23a>
     ee2:	84 e0       	ldi	r24, 0x04	; 4
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     eea:	9c 81       	ldd	r25, Y+4	; 0x04
     eec:	89 13       	cpse	r24, r25
     eee:	61 c0       	rjmp	.+194    	; 0xfb2 <Find_Delete+0x23a>
     ef0:	85 e0       	ldi	r24, 0x05	; 5
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     ef8:	f8 01       	movw	r30, r16
     efa:	90 81       	ld	r25, Z
     efc:	89 13       	cpse	r24, r25
     efe:	59 c0       	rjmp	.+178    	; 0xfb2 <Find_Delete+0x23a>
     f00:	86 e0       	ldi	r24, 0x06	; 6
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     f08:	f8 01       	movw	r30, r16
     f0a:	91 81       	ldd	r25, Z+1	; 0x01
     f0c:	89 13       	cpse	r24, r25
     f0e:	51 c0       	rjmp	.+162    	; 0xfb2 <Find_Delete+0x23a>
     f10:	87 e0       	ldi	r24, 0x07	; 7
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     f18:	f8 01       	movw	r30, r16
     f1a:	92 81       	ldd	r25, Z+2	; 0x02
     f1c:	89 13       	cpse	r24, r25
     f1e:	49 c0       	rjmp	.+146    	; 0xfb2 <Find_Delete+0x23a>
     f20:	88 e0       	ldi	r24, 0x08	; 8
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     f28:	f8 01       	movw	r30, r16
     f2a:	93 81       	ldd	r25, Z+3	; 0x03
     f2c:	89 13       	cpse	r24, r25
     f2e:	41 c0       	rjmp	.+130    	; 0xfb2 <Find_Delete+0x23a>
     f30:	89 e0       	ldi	r24, 0x09	; 9
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     f38:	f8 01       	movw	r30, r16
     f3a:	94 81       	ldd	r25, Z+4	; 0x04
     f3c:	89 13       	cpse	r24, r25
     f3e:	39 c0       	rjmp	.+114    	; 0xfb2 <Find_Delete+0x23a>
     f40:	61 e0       	ldi	r22, 0x01	; 1
     f42:	80 e0       	ldi	r24, 0x00	; 0
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     f4a:	61 e0       	ldi	r22, 0x01	; 1
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     f54:	61 e0       	ldi	r22, 0x01	; 1
     f56:	82 e0       	ldi	r24, 0x02	; 2
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     f5e:	61 e0       	ldi	r22, 0x01	; 1
     f60:	83 e0       	ldi	r24, 0x03	; 3
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     f68:	61 e0       	ldi	r22, 0x01	; 1
     f6a:	84 e0       	ldi	r24, 0x04	; 4
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     f72:	61 e0       	ldi	r22, 0x01	; 1
     f74:	85 e0       	ldi	r24, 0x05	; 5
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     f7c:	61 e0       	ldi	r22, 0x01	; 1
     f7e:	86 e0       	ldi	r24, 0x06	; 6
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     f86:	61 e0       	ldi	r22, 0x01	; 1
     f88:	87 e0       	ldi	r24, 0x07	; 7
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     f90:	61 e0       	ldi	r22, 0x01	; 1
     f92:	88 e0       	ldi	r24, 0x08	; 8
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     f9a:	61 e0       	ldi	r22, 0x01	; 1
     f9c:	89 e0       	ldi	r24, 0x09	; 9
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     fa4:	61 e0       	ldi	r22, 0x01	; 1
     fa6:	8e e1       	ldi	r24, 0x1E	; 30
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	4d c2       	rjmp	.+1178   	; 0x144c <Find_Delete+0x6d4>
     fb2:	8a e0       	ldi	r24, 0x0A	; 10
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     fba:	98 81       	ld	r25, Y
     fbc:	89 13       	cpse	r24, r25
     fbe:	1f c2       	rjmp	.+1086   	; 0x13fe <Find_Delete+0x686>
     fc0:	8b e0       	ldi	r24, 0x0B	; 11
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     fc8:	99 81       	ldd	r25, Y+1	; 0x01
     fca:	89 13       	cpse	r24, r25
     fcc:	1a c2       	rjmp	.+1076   	; 0x1402 <Find_Delete+0x68a>
     fce:	8c e0       	ldi	r24, 0x0C	; 12
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     fd6:	9a 81       	ldd	r25, Y+2	; 0x02
     fd8:	89 13       	cpse	r24, r25
     fda:	15 c2       	rjmp	.+1066   	; 0x1406 <Find_Delete+0x68e>
     fdc:	8d e0       	ldi	r24, 0x0D	; 13
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     fe4:	9b 81       	ldd	r25, Y+3	; 0x03
     fe6:	89 13       	cpse	r24, r25
     fe8:	10 c2       	rjmp	.+1056   	; 0x140a <Find_Delete+0x692>
     fea:	8e e0       	ldi	r24, 0x0E	; 14
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
     ff2:	9c 81       	ldd	r25, Y+4	; 0x04
     ff4:	89 13       	cpse	r24, r25
     ff6:	0b c2       	rjmp	.+1046   	; 0x140e <Find_Delete+0x696>
     ff8:	8f e0       	ldi	r24, 0x0F	; 15
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
    1000:	f8 01       	movw	r30, r16
    1002:	90 81       	ld	r25, Z
    1004:	89 13       	cpse	r24, r25
    1006:	05 c2       	rjmp	.+1034   	; 0x1412 <Find_Delete+0x69a>
    1008:	80 e1       	ldi	r24, 0x10	; 16
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
    1010:	f8 01       	movw	r30, r16
    1012:	91 81       	ldd	r25, Z+1	; 0x01
    1014:	89 13       	cpse	r24, r25
    1016:	ff c1       	rjmp	.+1022   	; 0x1416 <Find_Delete+0x69e>
    1018:	81 e1       	ldi	r24, 0x11	; 17
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
    1020:	f8 01       	movw	r30, r16
    1022:	92 81       	ldd	r25, Z+2	; 0x02
    1024:	89 13       	cpse	r24, r25
    1026:	f9 c1       	rjmp	.+1010   	; 0x141a <Find_Delete+0x6a2>
    1028:	82 e1       	ldi	r24, 0x12	; 18
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
    1030:	f8 01       	movw	r30, r16
    1032:	93 81       	ldd	r25, Z+3	; 0x03
    1034:	89 13       	cpse	r24, r25
    1036:	f3 c1       	rjmp	.+998    	; 0x141e <Find_Delete+0x6a6>
    1038:	83 e1       	ldi	r24, 0x13	; 19
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
    1040:	f8 01       	movw	r30, r16
    1042:	94 81       	ldd	r25, Z+4	; 0x04
    1044:	89 13       	cpse	r24, r25
    1046:	ed c1       	rjmp	.+986    	; 0x1422 <Find_Delete+0x6aa>
    1048:	61 e0       	ldi	r22, 0x01	; 1
    104a:	8a e0       	ldi	r24, 0x0A	; 10
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
    1052:	61 e0       	ldi	r22, 0x01	; 1
    1054:	8b e0       	ldi	r24, 0x0B	; 11
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
    105c:	61 e0       	ldi	r22, 0x01	; 1
    105e:	8c e0       	ldi	r24, 0x0C	; 12
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
    1066:	61 e0       	ldi	r22, 0x01	; 1
    1068:	8d e0       	ldi	r24, 0x0D	; 13
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
    1070:	61 e0       	ldi	r22, 0x01	; 1
    1072:	8e e0       	ldi	r24, 0x0E	; 14
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
    107a:	61 e0       	ldi	r22, 0x01	; 1
    107c:	8f e0       	ldi	r24, 0x0F	; 15
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
    1084:	61 e0       	ldi	r22, 0x01	; 1
    1086:	80 e1       	ldi	r24, 0x10	; 16
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
    108e:	61 e0       	ldi	r22, 0x01	; 1
    1090:	81 e1       	ldi	r24, 0x11	; 17
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
    1098:	61 e0       	ldi	r22, 0x01	; 1
    109a:	82 e1       	ldi	r24, 0x12	; 18
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
    10a2:	61 e0       	ldi	r22, 0x01	; 1
    10a4:	83 e1       	ldi	r24, 0x13	; 19
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
    10ac:	61 e0       	ldi	r22, 0x01	; 1
    10ae:	8e e1       	ldi	r24, 0x1E	; 30
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	c9 c1       	rjmp	.+914    	; 0x144c <Find_Delete+0x6d4>
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
    10c2:	98 81       	ld	r25, Y
    10c4:	89 13       	cpse	r24, r25
    10c6:	7d c0       	rjmp	.+250    	; 0x11c2 <Find_Delete+0x44a>
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
    10d0:	99 81       	ldd	r25, Y+1	; 0x01
    10d2:	89 13       	cpse	r24, r25
    10d4:	76 c0       	rjmp	.+236    	; 0x11c2 <Find_Delete+0x44a>
    10d6:	82 e0       	ldi	r24, 0x02	; 2
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
    10de:	9a 81       	ldd	r25, Y+2	; 0x02
    10e0:	89 13       	cpse	r24, r25
    10e2:	6f c0       	rjmp	.+222    	; 0x11c2 <Find_Delete+0x44a>
    10e4:	83 e0       	ldi	r24, 0x03	; 3
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
    10ec:	9b 81       	ldd	r25, Y+3	; 0x03
    10ee:	89 13       	cpse	r24, r25
    10f0:	68 c0       	rjmp	.+208    	; 0x11c2 <Find_Delete+0x44a>
    10f2:	84 e0       	ldi	r24, 0x04	; 4
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
    10fa:	9c 81       	ldd	r25, Y+4	; 0x04
    10fc:	89 13       	cpse	r24, r25
    10fe:	61 c0       	rjmp	.+194    	; 0x11c2 <Find_Delete+0x44a>
    1100:	85 e0       	ldi	r24, 0x05	; 5
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
    1108:	f8 01       	movw	r30, r16
    110a:	90 81       	ld	r25, Z
    110c:	89 13       	cpse	r24, r25
    110e:	59 c0       	rjmp	.+178    	; 0x11c2 <Find_Delete+0x44a>
    1110:	86 e0       	ldi	r24, 0x06	; 6
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
    1118:	f8 01       	movw	r30, r16
    111a:	91 81       	ldd	r25, Z+1	; 0x01
    111c:	89 13       	cpse	r24, r25
    111e:	51 c0       	rjmp	.+162    	; 0x11c2 <Find_Delete+0x44a>
    1120:	87 e0       	ldi	r24, 0x07	; 7
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
    1128:	f8 01       	movw	r30, r16
    112a:	92 81       	ldd	r25, Z+2	; 0x02
    112c:	89 13       	cpse	r24, r25
    112e:	49 c0       	rjmp	.+146    	; 0x11c2 <Find_Delete+0x44a>
    1130:	88 e0       	ldi	r24, 0x08	; 8
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
    1138:	f8 01       	movw	r30, r16
    113a:	93 81       	ldd	r25, Z+3	; 0x03
    113c:	89 13       	cpse	r24, r25
    113e:	41 c0       	rjmp	.+130    	; 0x11c2 <Find_Delete+0x44a>
    1140:	89 e0       	ldi	r24, 0x09	; 9
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
    1148:	f8 01       	movw	r30, r16
    114a:	94 81       	ldd	r25, Z+4	; 0x04
    114c:	89 13       	cpse	r24, r25
    114e:	39 c0       	rjmp	.+114    	; 0x11c2 <Find_Delete+0x44a>
    1150:	61 e0       	ldi	r22, 0x01	; 1
    1152:	80 e0       	ldi	r24, 0x00	; 0
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
    115a:	61 e0       	ldi	r22, 0x01	; 1
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
    1164:	61 e0       	ldi	r22, 0x01	; 1
    1166:	82 e0       	ldi	r24, 0x02	; 2
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
    116e:	61 e0       	ldi	r22, 0x01	; 1
    1170:	83 e0       	ldi	r24, 0x03	; 3
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
    1178:	61 e0       	ldi	r22, 0x01	; 1
    117a:	84 e0       	ldi	r24, 0x04	; 4
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
    1182:	61 e0       	ldi	r22, 0x01	; 1
    1184:	85 e0       	ldi	r24, 0x05	; 5
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
    118c:	61 e0       	ldi	r22, 0x01	; 1
    118e:	86 e0       	ldi	r24, 0x06	; 6
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
    1196:	61 e0       	ldi	r22, 0x01	; 1
    1198:	87 e0       	ldi	r24, 0x07	; 7
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
    11a0:	61 e0       	ldi	r22, 0x01	; 1
    11a2:	88 e0       	ldi	r24, 0x08	; 8
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
    11aa:	61 e0       	ldi	r22, 0x01	; 1
    11ac:	89 e0       	ldi	r24, 0x09	; 9
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
    11b4:	62 e0       	ldi	r22, 0x02	; 2
    11b6:	8e e1       	ldi	r24, 0x1E	; 30
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	45 c1       	rjmp	.+650    	; 0x144c <Find_Delete+0x6d4>
    11c2:	8a e0       	ldi	r24, 0x0A	; 10
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
    11ca:	98 81       	ld	r25, Y
    11cc:	89 13       	cpse	r24, r25
    11ce:	7d c0       	rjmp	.+250    	; 0x12ca <Find_Delete+0x552>
    11d0:	8b e0       	ldi	r24, 0x0B	; 11
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
    11d8:	99 81       	ldd	r25, Y+1	; 0x01
    11da:	89 13       	cpse	r24, r25
    11dc:	76 c0       	rjmp	.+236    	; 0x12ca <Find_Delete+0x552>
    11de:	8c e0       	ldi	r24, 0x0C	; 12
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
    11e6:	9a 81       	ldd	r25, Y+2	; 0x02
    11e8:	89 13       	cpse	r24, r25
    11ea:	6f c0       	rjmp	.+222    	; 0x12ca <Find_Delete+0x552>
    11ec:	8d e0       	ldi	r24, 0x0D	; 13
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
    11f4:	9b 81       	ldd	r25, Y+3	; 0x03
    11f6:	89 13       	cpse	r24, r25
    11f8:	68 c0       	rjmp	.+208    	; 0x12ca <Find_Delete+0x552>
    11fa:	8e e0       	ldi	r24, 0x0E	; 14
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
    1202:	9c 81       	ldd	r25, Y+4	; 0x04
    1204:	89 13       	cpse	r24, r25
    1206:	61 c0       	rjmp	.+194    	; 0x12ca <Find_Delete+0x552>
    1208:	8f e0       	ldi	r24, 0x0F	; 15
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
    1210:	f8 01       	movw	r30, r16
    1212:	90 81       	ld	r25, Z
    1214:	89 13       	cpse	r24, r25
    1216:	59 c0       	rjmp	.+178    	; 0x12ca <Find_Delete+0x552>
    1218:	80 e1       	ldi	r24, 0x10	; 16
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
    1220:	f8 01       	movw	r30, r16
    1222:	91 81       	ldd	r25, Z+1	; 0x01
    1224:	89 13       	cpse	r24, r25
    1226:	51 c0       	rjmp	.+162    	; 0x12ca <Find_Delete+0x552>
    1228:	81 e1       	ldi	r24, 0x11	; 17
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
    1230:	f8 01       	movw	r30, r16
    1232:	92 81       	ldd	r25, Z+2	; 0x02
    1234:	89 13       	cpse	r24, r25
    1236:	49 c0       	rjmp	.+146    	; 0x12ca <Find_Delete+0x552>
    1238:	82 e1       	ldi	r24, 0x12	; 18
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
    1240:	f8 01       	movw	r30, r16
    1242:	93 81       	ldd	r25, Z+3	; 0x03
    1244:	89 13       	cpse	r24, r25
    1246:	41 c0       	rjmp	.+130    	; 0x12ca <Find_Delete+0x552>
    1248:	83 e1       	ldi	r24, 0x13	; 19
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
    1250:	f8 01       	movw	r30, r16
    1252:	94 81       	ldd	r25, Z+4	; 0x04
    1254:	89 13       	cpse	r24, r25
    1256:	39 c0       	rjmp	.+114    	; 0x12ca <Find_Delete+0x552>
    1258:	61 e0       	ldi	r22, 0x01	; 1
    125a:	8a e0       	ldi	r24, 0x0A	; 10
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
    1262:	61 e0       	ldi	r22, 0x01	; 1
    1264:	8b e0       	ldi	r24, 0x0B	; 11
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
    126c:	61 e0       	ldi	r22, 0x01	; 1
    126e:	8c e0       	ldi	r24, 0x0C	; 12
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
    1276:	61 e0       	ldi	r22, 0x01	; 1
    1278:	8d e0       	ldi	r24, 0x0D	; 13
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
    1280:	61 e0       	ldi	r22, 0x01	; 1
    1282:	8e e0       	ldi	r24, 0x0E	; 14
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
    128a:	61 e0       	ldi	r22, 0x01	; 1
    128c:	8f e0       	ldi	r24, 0x0F	; 15
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
    1294:	61 e0       	ldi	r22, 0x01	; 1
    1296:	80 e1       	ldi	r24, 0x10	; 16
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
    129e:	61 e0       	ldi	r22, 0x01	; 1
    12a0:	81 e1       	ldi	r24, 0x11	; 17
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
    12a8:	61 e0       	ldi	r22, 0x01	; 1
    12aa:	82 e1       	ldi	r24, 0x12	; 18
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
    12b2:	61 e0       	ldi	r22, 0x01	; 1
    12b4:	83 e1       	ldi	r24, 0x13	; 19
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
    12bc:	62 e0       	ldi	r22, 0x02	; 2
    12be:	8e e1       	ldi	r24, 0x1E	; 30
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	c1 c0       	rjmp	.+386    	; 0x144c <Find_Delete+0x6d4>
    12ca:	84 e1       	ldi	r24, 0x14	; 20
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
    12d2:	98 81       	ld	r25, Y
    12d4:	89 13       	cpse	r24, r25
    12d6:	a7 c0       	rjmp	.+334    	; 0x1426 <Find_Delete+0x6ae>
    12d8:	85 e1       	ldi	r24, 0x15	; 21
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
    12e0:	99 81       	ldd	r25, Y+1	; 0x01
    12e2:	89 13       	cpse	r24, r25
    12e4:	a2 c0       	rjmp	.+324    	; 0x142a <Find_Delete+0x6b2>
    12e6:	86 e1       	ldi	r24, 0x16	; 22
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
    12ee:	9a 81       	ldd	r25, Y+2	; 0x02
    12f0:	89 13       	cpse	r24, r25
    12f2:	9d c0       	rjmp	.+314    	; 0x142e <Find_Delete+0x6b6>
    12f4:	87 e1       	ldi	r24, 0x17	; 23
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
    12fc:	9b 81       	ldd	r25, Y+3	; 0x03
    12fe:	89 13       	cpse	r24, r25
    1300:	98 c0       	rjmp	.+304    	; 0x1432 <Find_Delete+0x6ba>
    1302:	88 e1       	ldi	r24, 0x18	; 24
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
    130a:	9c 81       	ldd	r25, Y+4	; 0x04
    130c:	89 13       	cpse	r24, r25
    130e:	93 c0       	rjmp	.+294    	; 0x1436 <Find_Delete+0x6be>
    1310:	89 e1       	ldi	r24, 0x19	; 25
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
    1318:	f8 01       	movw	r30, r16
    131a:	90 81       	ld	r25, Z
    131c:	89 13       	cpse	r24, r25
    131e:	8d c0       	rjmp	.+282    	; 0x143a <Find_Delete+0x6c2>
    1320:	8a e1       	ldi	r24, 0x1A	; 26
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
    1328:	f8 01       	movw	r30, r16
    132a:	91 81       	ldd	r25, Z+1	; 0x01
    132c:	89 13       	cpse	r24, r25
    132e:	87 c0       	rjmp	.+270    	; 0x143e <Find_Delete+0x6c6>
    1330:	8b e1       	ldi	r24, 0x1B	; 27
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
    1338:	f8 01       	movw	r30, r16
    133a:	92 81       	ldd	r25, Z+2	; 0x02
    133c:	89 13       	cpse	r24, r25
    133e:	81 c0       	rjmp	.+258    	; 0x1442 <Find_Delete+0x6ca>
    1340:	8c e1       	ldi	r24, 0x1C	; 28
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
    1348:	f8 01       	movw	r30, r16
    134a:	93 81       	ldd	r25, Z+3	; 0x03
    134c:	89 13       	cpse	r24, r25
    134e:	7b c0       	rjmp	.+246    	; 0x1446 <Find_Delete+0x6ce>
    1350:	8d e1       	ldi	r24, 0x1D	; 29
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
    1358:	f8 01       	movw	r30, r16
    135a:	94 81       	ldd	r25, Z+4	; 0x04
    135c:	89 13       	cpse	r24, r25
    135e:	75 c0       	rjmp	.+234    	; 0x144a <Find_Delete+0x6d2>
    1360:	61 e0       	ldi	r22, 0x01	; 1
    1362:	84 e1       	ldi	r24, 0x14	; 20
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
    136a:	61 e0       	ldi	r22, 0x01	; 1
    136c:	85 e1       	ldi	r24, 0x15	; 21
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
    1374:	61 e0       	ldi	r22, 0x01	; 1
    1376:	86 e1       	ldi	r24, 0x16	; 22
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
    137e:	61 e0       	ldi	r22, 0x01	; 1
    1380:	87 e1       	ldi	r24, 0x17	; 23
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
    1388:	61 e0       	ldi	r22, 0x01	; 1
    138a:	88 e1       	ldi	r24, 0x18	; 24
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
    1392:	61 e0       	ldi	r22, 0x01	; 1
    1394:	89 e1       	ldi	r24, 0x19	; 25
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
    139c:	61 e0       	ldi	r22, 0x01	; 1
    139e:	8a e1       	ldi	r24, 0x1A	; 26
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
    13a6:	61 e0       	ldi	r22, 0x01	; 1
    13a8:	8b e1       	ldi	r24, 0x1B	; 27
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
    13b0:	61 e0       	ldi	r22, 0x01	; 1
    13b2:	8c e1       	ldi	r24, 0x1C	; 28
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
    13ba:	61 e0       	ldi	r22, 0x01	; 1
    13bc:	8d e1       	ldi	r24, 0x1D	; 29
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
    13c4:	62 e0       	ldi	r22, 0x02	; 2
    13c6:	8e e1       	ldi	r24, 0x1E	; 30
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <EEPROM_vWriteByteToAddress>
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	3d c0       	rjmp	.+122    	; 0x144c <Find_Delete+0x6d4>
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	3b c0       	rjmp	.+118    	; 0x144c <Find_Delete+0x6d4>
    13d6:	80 e0       	ldi	r24, 0x00	; 0
    13d8:	39 c0       	rjmp	.+114    	; 0x144c <Find_Delete+0x6d4>
    13da:	80 e0       	ldi	r24, 0x00	; 0
    13dc:	37 c0       	rjmp	.+110    	; 0x144c <Find_Delete+0x6d4>
    13de:	80 e0       	ldi	r24, 0x00	; 0
    13e0:	35 c0       	rjmp	.+106    	; 0x144c <Find_Delete+0x6d4>
    13e2:	80 e0       	ldi	r24, 0x00	; 0
    13e4:	33 c0       	rjmp	.+102    	; 0x144c <Find_Delete+0x6d4>
    13e6:	80 e0       	ldi	r24, 0x00	; 0
    13e8:	31 c0       	rjmp	.+98     	; 0x144c <Find_Delete+0x6d4>
    13ea:	80 e0       	ldi	r24, 0x00	; 0
    13ec:	2f c0       	rjmp	.+94     	; 0x144c <Find_Delete+0x6d4>
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	2d c0       	rjmp	.+90     	; 0x144c <Find_Delete+0x6d4>
    13f2:	80 e0       	ldi	r24, 0x00	; 0
    13f4:	2b c0       	rjmp	.+86     	; 0x144c <Find_Delete+0x6d4>
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	29 c0       	rjmp	.+82     	; 0x144c <Find_Delete+0x6d4>
    13fa:	80 e0       	ldi	r24, 0x00	; 0
    13fc:	27 c0       	rjmp	.+78     	; 0x144c <Find_Delete+0x6d4>
    13fe:	80 e0       	ldi	r24, 0x00	; 0
    1400:	25 c0       	rjmp	.+74     	; 0x144c <Find_Delete+0x6d4>
    1402:	80 e0       	ldi	r24, 0x00	; 0
    1404:	23 c0       	rjmp	.+70     	; 0x144c <Find_Delete+0x6d4>
    1406:	80 e0       	ldi	r24, 0x00	; 0
    1408:	21 c0       	rjmp	.+66     	; 0x144c <Find_Delete+0x6d4>
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	1f c0       	rjmp	.+62     	; 0x144c <Find_Delete+0x6d4>
    140e:	80 e0       	ldi	r24, 0x00	; 0
    1410:	1d c0       	rjmp	.+58     	; 0x144c <Find_Delete+0x6d4>
    1412:	80 e0       	ldi	r24, 0x00	; 0
    1414:	1b c0       	rjmp	.+54     	; 0x144c <Find_Delete+0x6d4>
    1416:	80 e0       	ldi	r24, 0x00	; 0
    1418:	19 c0       	rjmp	.+50     	; 0x144c <Find_Delete+0x6d4>
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	17 c0       	rjmp	.+46     	; 0x144c <Find_Delete+0x6d4>
    141e:	80 e0       	ldi	r24, 0x00	; 0
    1420:	15 c0       	rjmp	.+42     	; 0x144c <Find_Delete+0x6d4>
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	13 c0       	rjmp	.+38     	; 0x144c <Find_Delete+0x6d4>
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	11 c0       	rjmp	.+34     	; 0x144c <Find_Delete+0x6d4>
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	0f c0       	rjmp	.+30     	; 0x144c <Find_Delete+0x6d4>
    142e:	80 e0       	ldi	r24, 0x00	; 0
    1430:	0d c0       	rjmp	.+26     	; 0x144c <Find_Delete+0x6d4>
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	0b c0       	rjmp	.+22     	; 0x144c <Find_Delete+0x6d4>
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	09 c0       	rjmp	.+18     	; 0x144c <Find_Delete+0x6d4>
    143a:	80 e0       	ldi	r24, 0x00	; 0
    143c:	07 c0       	rjmp	.+14     	; 0x144c <Find_Delete+0x6d4>
    143e:	80 e0       	ldi	r24, 0x00	; 0
    1440:	05 c0       	rjmp	.+10     	; 0x144c <Find_Delete+0x6d4>
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	03 c0       	rjmp	.+6      	; 0x144c <Find_Delete+0x6d4>
    1446:	80 e0       	ldi	r24, 0x00	; 0
    1448:	01 c0       	rjmp	.+2      	; 0x144c <Find_Delete+0x6d4>
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	df 91       	pop	r29
    144e:	cf 91       	pop	r28
    1450:	1f 91       	pop	r17
    1452:	0f 91       	pop	r16
    1454:	08 95       	ret

00001456 <Sys_Contole>:
u8 Sys_Contole(void){
	
	LCD_voidSendString("Led Controle:1 ");
    1456:	88 ea       	ldi	r24, 0xA8	; 168
    1458:	91 e0       	ldi	r25, 0x01	; 1
    145a:	0e 94 9f 0c 	call	0x193e	; 0x193e <LCD_voidSendString>
	LCD_voidSetCursor(LCD_U8_ROW_2 , LCD_u8_COLUMN_1);
    145e:	60 e0       	ldi	r22, 0x00	; 0
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	0e 94 b2 0c 	call	0x1964	; 0x1964 <LCD_voidSetCursor>
	
	LCD_voidSendString("Dimmer Controle :2  ");
    1466:	88 eb       	ldi	r24, 0xB8	; 184
    1468:	91 e0       	ldi	r25, 0x01	; 1
    146a:	0e 94 9f 0c 	call	0x193e	; 0x193e <LCD_voidSendString>
	LCD_voidSetCursor(LCD_U8_ROW_1 , LCD_u8_COLUMN_16);
    146e:	6f e0       	ldi	r22, 0x0F	; 15
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	0e 94 b2 0c 	call	0x1964	; 0x1964 <LCD_voidSetCursor>
	LCD_voidSendString("Door Controle :3 ");
    1476:	8d ec       	ldi	r24, 0xCD	; 205
    1478:	91 e0       	ldi	r25, 0x01	; 1
    147a:	0e 94 9f 0c 	call	0x193e	; 0x193e <LCD_voidSendString>
	while (KEYPAD_u8GetPressedButton()=='\0');
    147e:	0e 94 8a 0a 	call	0x1514	; 0x1514 <KEYPAD_u8GetPressedButton>
    1482:	88 23       	and	r24, r24
    1484:	e1 f3       	breq	.-8      	; 0x147e <Sys_Contole+0x28>
	return KEYPAD_u8GetPressedButton() ;
    1486:	0e 94 8a 0a 	call	0x1514	; 0x1514 <KEYPAD_u8GetPressedButton>
	
}
    148a:	08 95       	ret

0000148c <Sys_Contole_For_User>:
u8 Sys_Contole_For_User(void){
	
	LCD_voidSendString("Led Controle:1 ");
    148c:	88 ea       	ldi	r24, 0xA8	; 168
    148e:	91 e0       	ldi	r25, 0x01	; 1
    1490:	0e 94 9f 0c 	call	0x193e	; 0x193e <LCD_voidSendString>
	LCD_voidSetCursor(LCD_U8_ROW_2 , LCD_u8_COLUMN_1);
    1494:	60 e0       	ldi	r22, 0x00	; 0
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	0e 94 b2 0c 	call	0x1964	; 0x1964 <LCD_voidSetCursor>
	
	LCD_voidSendString("Dimmer Controle :2  ");
    149c:	88 eb       	ldi	r24, 0xB8	; 184
    149e:	91 e0       	ldi	r25, 0x01	; 1
    14a0:	0e 94 9f 0c 	call	0x193e	; 0x193e <LCD_voidSendString>
	LCD_voidSetCursor(LCD_U8_ROW_1 , LCD_u8_COLUMN_16);
    14a4:	6f e0       	ldi	r22, 0x0F	; 15
    14a6:	80 e0       	ldi	r24, 0x00	; 0
    14a8:	0e 94 b2 0c 	call	0x1964	; 0x1964 <LCD_voidSetCursor>
	while (KEYPAD_u8GetPressedButton()=='\0');
    14ac:	0e 94 8a 0a 	call	0x1514	; 0x1514 <KEYPAD_u8GetPressedButton>
    14b0:	88 23       	and	r24, r24
    14b2:	e1 f3       	breq	.-8      	; 0x14ac <Sys_Contole_For_User+0x20>
	return KEYPAD_u8GetPressedButton() ;
    14b4:	0e 94 8a 0a 	call	0x1514	; 0x1514 <KEYPAD_u8GetPressedButton>
	
    14b8:	08 95       	ret

000014ba <BUZ_voidSetAlarm>:



void BUZ_voidSetAlarm(void)
{
	DIO_voidSetPinValue(BUZ_U8_A , DIO_U8_HIGH);
    14ba:	61 e0       	ldi	r22, 0x01	; 1
    14bc:	82 e1       	ldi	r24, 0x12	; 18
    14be:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    14c2:	2f e3       	ldi	r18, 0x3F	; 63
    14c4:	8d e0       	ldi	r24, 0x0D	; 13
    14c6:	93 e0       	ldi	r25, 0x03	; 3
    14c8:	21 50       	subi	r18, 0x01	; 1
    14ca:	80 40       	sbci	r24, 0x00	; 0
    14cc:	90 40       	sbci	r25, 0x00	; 0
    14ce:	e1 f7       	brne	.-8      	; 0x14c8 <BUZ_voidSetAlarm+0xe>
    14d0:	00 c0       	rjmp	.+0      	; 0x14d2 <BUZ_voidSetAlarm+0x18>
    14d2:	00 00       	nop
	_delay_ms(100);
	DIO_voidSetPinValue(BUZ_U8_A , DIO_U8_LOW);
    14d4:	60 e0       	ldi	r22, 0x00	; 0
    14d6:	82 e1       	ldi	r24, 0x12	; 18
    14d8:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
    14dc:	08 95       	ret

000014de <Dc_Motor_Enable>:
 *  Author: Moaz Refaat
 */ 

#include "DCMotor.h" 
 void Dc_Motor_Enable(void){
	 DIO_voidSetPinValue(DIO_U8_PIN23,DIO_U8_HIGH);
    14de:	61 e0       	ldi	r22, 0x01	; 1
    14e0:	87 e1       	ldi	r24, 0x17	; 23
    14e2:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
    14e6:	08 95       	ret

000014e8 <Dc_Motor_Disable>:
 }
 void Dc_Motor_Disable(void) {
	 
	  DIO_voidSetPinValue(DIO_U8_PIN23,DIO_U8_LOW);
    14e8:	60 e0       	ldi	r22, 0x00	; 0
    14ea:	87 e1       	ldi	r24, 0x17	; 23
    14ec:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
    14f0:	08 95       	ret

000014f2 <KEYPAD_voidInit>:

void KEYPAD_voidInit(void)
{
	#if KEYPAD_U8_MODE == KEYPAD_U8_INTERNAL_RES
	
	DIO_voidSetPinValue(KEYPAD_U8_C1 , DIO_U8_HIGH);
    14f2:	61 e0       	ldi	r22, 0x01	; 1
    14f4:	83 e1       	ldi	r24, 0x13	; 19
    14f6:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYPAD_U8_C2 , DIO_U8_HIGH);
    14fa:	61 e0       	ldi	r22, 0x01	; 1
    14fc:	84 e1       	ldi	r24, 0x14	; 20
    14fe:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYPAD_U8_C3 , DIO_U8_HIGH);
    1502:	61 e0       	ldi	r22, 0x01	; 1
    1504:	85 e1       	ldi	r24, 0x15	; 21
    1506:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYPAD_U8_C4 , DIO_U8_HIGH);
    150a:	61 e0       	ldi	r22, 0x01	; 1
    150c:	86 e1       	ldi	r24, 0x16	; 22
    150e:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
    1512:	08 95       	ret

00001514 <KEYPAD_u8GetPressedButton>:
	#endif
}

u8 KEYPAD_u8GetPressedButton(void)
{
	DIO_voidSetPinValue(KEYPAD_U8_R1 , DIO_U8_LOW);
    1514:	60 e0       	ldi	r22, 0x00	; 0
    1516:	8c e0       	ldi	r24, 0x0C	; 12
    1518:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYPAD_U8_R2 , DIO_U8_HIGH);
    151c:	61 e0       	ldi	r22, 0x01	; 1
    151e:	8d e0       	ldi	r24, 0x0D	; 13
    1520:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYPAD_U8_R3 , DIO_U8_HIGH);
    1524:	61 e0       	ldi	r22, 0x01	; 1
    1526:	8e e0       	ldi	r24, 0x0E	; 14
    1528:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYPAD_U8_R4 , DIO_U8_HIGH);
    152c:	61 e0       	ldi	r22, 0x01	; 1
    152e:	8f e0       	ldi	r24, 0x0F	; 15
    1530:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
	
	if(DIO_u8GetPinValue(KEYPAD_U8_C1) == 0)
    1534:	83 e1       	ldi	r24, 0x13	; 19
    1536:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <DIO_u8GetPinValue>
    153a:	88 23       	and	r24, r24
    153c:	09 f4       	brne	.+2      	; 0x1540 <KEYPAD_u8GetPressedButton+0x2c>
    153e:	87 c0       	rjmp	.+270    	; 0x164e <KEYPAD_u8GetPressedButton+0x13a>
	{
		return KEYPAD_U8_R1C1;
	}
	else if(DIO_u8GetPinValue(KEYPAD_U8_C2) == 0)
    1540:	84 e1       	ldi	r24, 0x14	; 20
    1542:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <DIO_u8GetPinValue>
    1546:	88 23       	and	r24, r24
    1548:	09 f4       	brne	.+2      	; 0x154c <KEYPAD_u8GetPressedButton+0x38>
    154a:	83 c0       	rjmp	.+262    	; 0x1652 <KEYPAD_u8GetPressedButton+0x13e>
	{
		return KEYPAD_U8_R1C2;
	}
	else if(DIO_u8GetPinValue(KEYPAD_U8_C3) == 0)
    154c:	85 e1       	ldi	r24, 0x15	; 21
    154e:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <DIO_u8GetPinValue>
    1552:	88 23       	and	r24, r24
    1554:	09 f4       	brne	.+2      	; 0x1558 <KEYPAD_u8GetPressedButton+0x44>
    1556:	7f c0       	rjmp	.+254    	; 0x1656 <KEYPAD_u8GetPressedButton+0x142>
	{
		return KEYPAD_U8_R1C3;
	}
	else if(DIO_u8GetPinValue(KEYPAD_U8_C4) == 0)
    1558:	86 e1       	ldi	r24, 0x16	; 22
    155a:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <DIO_u8GetPinValue>
    155e:	88 23       	and	r24, r24
    1560:	09 f4       	brne	.+2      	; 0x1564 <KEYPAD_u8GetPressedButton+0x50>
    1562:	7b c0       	rjmp	.+246    	; 0x165a <KEYPAD_u8GetPressedButton+0x146>
	{
		return KEYPAD_U8_R1C4;
	}
	
	DIO_voidSetPinValue(KEYPAD_U8_R1 , DIO_U8_HIGH);
    1564:	61 e0       	ldi	r22, 0x01	; 1
    1566:	8c e0       	ldi	r24, 0x0C	; 12
    1568:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYPAD_U8_R2 , DIO_U8_LOW);
    156c:	60 e0       	ldi	r22, 0x00	; 0
    156e:	8d e0       	ldi	r24, 0x0D	; 13
    1570:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYPAD_U8_R3 , DIO_U8_HIGH);
    1574:	61 e0       	ldi	r22, 0x01	; 1
    1576:	8e e0       	ldi	r24, 0x0E	; 14
    1578:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYPAD_U8_R4 , DIO_U8_HIGH);
    157c:	61 e0       	ldi	r22, 0x01	; 1
    157e:	8f e0       	ldi	r24, 0x0F	; 15
    1580:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
	
	if(DIO_u8GetPinValue(KEYPAD_U8_C1) == 0)
    1584:	83 e1       	ldi	r24, 0x13	; 19
    1586:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <DIO_u8GetPinValue>
    158a:	88 23       	and	r24, r24
    158c:	09 f4       	brne	.+2      	; 0x1590 <KEYPAD_u8GetPressedButton+0x7c>
    158e:	67 c0       	rjmp	.+206    	; 0x165e <KEYPAD_u8GetPressedButton+0x14a>
	{
		return KEYPAD_U8_R2C1;
	}
	else if(DIO_u8GetPinValue(KEYPAD_U8_C2) == 0)
    1590:	84 e1       	ldi	r24, 0x14	; 20
    1592:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <DIO_u8GetPinValue>
    1596:	88 23       	and	r24, r24
    1598:	09 f4       	brne	.+2      	; 0x159c <KEYPAD_u8GetPressedButton+0x88>
    159a:	63 c0       	rjmp	.+198    	; 0x1662 <KEYPAD_u8GetPressedButton+0x14e>
	{
		return KEYPAD_U8_R2C2;
	}
	else if(DIO_u8GetPinValue(KEYPAD_U8_C3) == 0)
    159c:	85 e1       	ldi	r24, 0x15	; 21
    159e:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <DIO_u8GetPinValue>
    15a2:	88 23       	and	r24, r24
    15a4:	09 f4       	brne	.+2      	; 0x15a8 <KEYPAD_u8GetPressedButton+0x94>
    15a6:	5f c0       	rjmp	.+190    	; 0x1666 <KEYPAD_u8GetPressedButton+0x152>
	{
		return KEYPAD_U8_R2C3;
	}
	else if(DIO_u8GetPinValue(KEYPAD_U8_C4) == 0)
    15a8:	86 e1       	ldi	r24, 0x16	; 22
    15aa:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <DIO_u8GetPinValue>
    15ae:	88 23       	and	r24, r24
    15b0:	09 f4       	brne	.+2      	; 0x15b4 <KEYPAD_u8GetPressedButton+0xa0>
    15b2:	5b c0       	rjmp	.+182    	; 0x166a <KEYPAD_u8GetPressedButton+0x156>
	{
		return KEYPAD_U8_R2C4;
	}
	
	DIO_voidSetPinValue(KEYPAD_U8_R1 , DIO_U8_HIGH);
    15b4:	61 e0       	ldi	r22, 0x01	; 1
    15b6:	8c e0       	ldi	r24, 0x0C	; 12
    15b8:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYPAD_U8_R2 , DIO_U8_HIGH);
    15bc:	61 e0       	ldi	r22, 0x01	; 1
    15be:	8d e0       	ldi	r24, 0x0D	; 13
    15c0:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYPAD_U8_R3 , DIO_U8_LOW);
    15c4:	60 e0       	ldi	r22, 0x00	; 0
    15c6:	8e e0       	ldi	r24, 0x0E	; 14
    15c8:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYPAD_U8_R4 , DIO_U8_HIGH);
    15cc:	61 e0       	ldi	r22, 0x01	; 1
    15ce:	8f e0       	ldi	r24, 0x0F	; 15
    15d0:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
	
	if(DIO_u8GetPinValue(KEYPAD_U8_C1) == 0)
    15d4:	83 e1       	ldi	r24, 0x13	; 19
    15d6:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <DIO_u8GetPinValue>
    15da:	88 23       	and	r24, r24
    15dc:	09 f4       	brne	.+2      	; 0x15e0 <KEYPAD_u8GetPressedButton+0xcc>
    15de:	47 c0       	rjmp	.+142    	; 0x166e <KEYPAD_u8GetPressedButton+0x15a>
	{
		return KEYPAD_U8_R3C1;
	}
	else if(DIO_u8GetPinValue(KEYPAD_U8_C2) == 0)
    15e0:	84 e1       	ldi	r24, 0x14	; 20
    15e2:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <DIO_u8GetPinValue>
    15e6:	88 23       	and	r24, r24
    15e8:	09 f4       	brne	.+2      	; 0x15ec <KEYPAD_u8GetPressedButton+0xd8>
    15ea:	43 c0       	rjmp	.+134    	; 0x1672 <KEYPAD_u8GetPressedButton+0x15e>
	{
		return KEYPAD_U8_R3C2;
	}
	else if(DIO_u8GetPinValue(KEYPAD_U8_C3) == 0)
    15ec:	85 e1       	ldi	r24, 0x15	; 21
    15ee:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <DIO_u8GetPinValue>
    15f2:	88 23       	and	r24, r24
    15f4:	09 f4       	brne	.+2      	; 0x15f8 <KEYPAD_u8GetPressedButton+0xe4>
    15f6:	3f c0       	rjmp	.+126    	; 0x1676 <KEYPAD_u8GetPressedButton+0x162>
	{
		return KEYPAD_U8_R3C3;
	}
	else if(DIO_u8GetPinValue(KEYPAD_U8_C4) == 0)
    15f8:	86 e1       	ldi	r24, 0x16	; 22
    15fa:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <DIO_u8GetPinValue>
    15fe:	88 23       	and	r24, r24
    1600:	e1 f1       	breq	.+120    	; 0x167a <KEYPAD_u8GetPressedButton+0x166>
	{
		return KEYPAD_U8_R3C4;
	}
	
	DIO_voidSetPinValue(KEYPAD_U8_R1 , DIO_U8_HIGH);
    1602:	61 e0       	ldi	r22, 0x01	; 1
    1604:	8c e0       	ldi	r24, 0x0C	; 12
    1606:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYPAD_U8_R2 , DIO_U8_HIGH);
    160a:	61 e0       	ldi	r22, 0x01	; 1
    160c:	8d e0       	ldi	r24, 0x0D	; 13
    160e:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYPAD_U8_R3 , DIO_U8_HIGH);
    1612:	61 e0       	ldi	r22, 0x01	; 1
    1614:	8e e0       	ldi	r24, 0x0E	; 14
    1616:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYPAD_U8_R4 , DIO_U8_LOW);
    161a:	60 e0       	ldi	r22, 0x00	; 0
    161c:	8f e0       	ldi	r24, 0x0F	; 15
    161e:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
	
	if(DIO_u8GetPinValue(KEYPAD_U8_C1) == 0)
    1622:	83 e1       	ldi	r24, 0x13	; 19
    1624:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <DIO_u8GetPinValue>
    1628:	88 23       	and	r24, r24
    162a:	49 f1       	breq	.+82     	; 0x167e <KEYPAD_u8GetPressedButton+0x16a>
	{
		return KEYPAD_U8_R4C1;
	}
	else if(DIO_u8GetPinValue(KEYPAD_U8_C2) == 0)
    162c:	84 e1       	ldi	r24, 0x14	; 20
    162e:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <DIO_u8GetPinValue>
    1632:	88 23       	and	r24, r24
    1634:	31 f1       	breq	.+76     	; 0x1682 <KEYPAD_u8GetPressedButton+0x16e>
	{
		return KEYPAD_U8_R4C2;
	}
	else if(DIO_u8GetPinValue(KEYPAD_U8_C3) == 0)
    1636:	85 e1       	ldi	r24, 0x15	; 21
    1638:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <DIO_u8GetPinValue>
    163c:	88 23       	and	r24, r24
    163e:	19 f1       	breq	.+70     	; 0x1686 <KEYPAD_u8GetPressedButton+0x172>
	{
		return KEYPAD_U8_R4C3;
	}
	else if(DIO_u8GetPinValue(KEYPAD_U8_C4) == 0)
    1640:	86 e1       	ldi	r24, 0x16	; 22
    1642:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <DIO_u8GetPinValue>
    1646:	81 11       	cpse	r24, r1
    1648:	20 c0       	rjmp	.+64     	; 0x168a <KEYPAD_u8GetPressedButton+0x176>
	{
		return KEYPAD_U8_R4C4;
    164a:	8b e2       	ldi	r24, 0x2B	; 43
    164c:	08 95       	ret
	DIO_voidSetPinValue(KEYPAD_U8_R3 , DIO_U8_HIGH);
	DIO_voidSetPinValue(KEYPAD_U8_R4 , DIO_U8_HIGH);
	
	if(DIO_u8GetPinValue(KEYPAD_U8_C1) == 0)
	{
		return KEYPAD_U8_R1C1;
    164e:	87 e3       	ldi	r24, 0x37	; 55
    1650:	08 95       	ret
	}
	else if(DIO_u8GetPinValue(KEYPAD_U8_C2) == 0)
	{
		return KEYPAD_U8_R1C2;
    1652:	88 e3       	ldi	r24, 0x38	; 56
    1654:	08 95       	ret
	}
	else if(DIO_u8GetPinValue(KEYPAD_U8_C3) == 0)
	{
		return KEYPAD_U8_R1C3;
    1656:	89 e3       	ldi	r24, 0x39	; 57
    1658:	08 95       	ret
	}
	else if(DIO_u8GetPinValue(KEYPAD_U8_C4) == 0)
	{
		return KEYPAD_U8_R1C4;
    165a:	8f e2       	ldi	r24, 0x2F	; 47
    165c:	08 95       	ret
	DIO_voidSetPinValue(KEYPAD_U8_R3 , DIO_U8_HIGH);
	DIO_voidSetPinValue(KEYPAD_U8_R4 , DIO_U8_HIGH);
	
	if(DIO_u8GetPinValue(KEYPAD_U8_C1) == 0)
	{
		return KEYPAD_U8_R2C1;
    165e:	84 e3       	ldi	r24, 0x34	; 52
    1660:	08 95       	ret
	}
	else if(DIO_u8GetPinValue(KEYPAD_U8_C2) == 0)
	{
		return KEYPAD_U8_R2C2;
    1662:	85 e3       	ldi	r24, 0x35	; 53
    1664:	08 95       	ret
	}
	else if(DIO_u8GetPinValue(KEYPAD_U8_C3) == 0)
	{
		return KEYPAD_U8_R2C3;
    1666:	86 e3       	ldi	r24, 0x36	; 54
    1668:	08 95       	ret
	}
	else if(DIO_u8GetPinValue(KEYPAD_U8_C4) == 0)
	{
		return KEYPAD_U8_R2C4;
    166a:	8a e2       	ldi	r24, 0x2A	; 42
    166c:	08 95       	ret
	DIO_voidSetPinValue(KEYPAD_U8_R3 , DIO_U8_LOW);
	DIO_voidSetPinValue(KEYPAD_U8_R4 , DIO_U8_HIGH);
	
	if(DIO_u8GetPinValue(KEYPAD_U8_C1) == 0)
	{
		return KEYPAD_U8_R3C1;
    166e:	81 e3       	ldi	r24, 0x31	; 49
    1670:	08 95       	ret
	}
	else if(DIO_u8GetPinValue(KEYPAD_U8_C2) == 0)
	{
		return KEYPAD_U8_R3C2;
    1672:	82 e3       	ldi	r24, 0x32	; 50
    1674:	08 95       	ret
	}
	else if(DIO_u8GetPinValue(KEYPAD_U8_C3) == 0)
	{
		return KEYPAD_U8_R3C3;
    1676:	83 e3       	ldi	r24, 0x33	; 51
    1678:	08 95       	ret
	}
	else if(DIO_u8GetPinValue(KEYPAD_U8_C4) == 0)
	{
		return KEYPAD_U8_R3C4;
    167a:	8d e2       	ldi	r24, 0x2D	; 45
    167c:	08 95       	ret
	DIO_voidSetPinValue(KEYPAD_U8_R3 , DIO_U8_HIGH);
	DIO_voidSetPinValue(KEYPAD_U8_R4 , DIO_U8_LOW);
	
	if(DIO_u8GetPinValue(KEYPAD_U8_C1) == 0)
	{
		return KEYPAD_U8_R4C1;
    167e:	8a e2       	ldi	r24, 0x2A	; 42
    1680:	08 95       	ret
	}
	else if(DIO_u8GetPinValue(KEYPAD_U8_C2) == 0)
	{
		return KEYPAD_U8_R4C2;
    1682:	80 e3       	ldi	r24, 0x30	; 48
    1684:	08 95       	ret
	}
	else if(DIO_u8GetPinValue(KEYPAD_U8_C3) == 0)
	{
		return KEYPAD_U8_R4C3;
    1686:	8d e3       	ldi	r24, 0x3D	; 61
    1688:	08 95       	ret
	else if(DIO_u8GetPinValue(KEYPAD_U8_C4) == 0)
	{
		return KEYPAD_U8_R4C4;
	}	
	
	return KEYPAD_U8_NULL;
    168a:	80 e0       	ldi	r24, 0x00	; 0
    168c:	08 95       	ret

0000168e <LCD_voidSendData>:
		_delay_ms(2);
		LCD_voidSendCommand(0b00000001);     // entry mode set
		_delay_ms(2);
}
void LCD_voidSendData(u8 Copy_u8Data)
{
    168e:	cf 93       	push	r28
    1690:	c8 2f       	mov	r28, r24
	DIO_voidSetPinValue(LCD_U8_RS,DIO_U8_HIGH);
    1692:	61 e0       	ldi	r22, 0x01	; 1
    1694:	89 e0       	ldi	r24, 0x09	; 9
    1696:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_U8_RW,DIO_U8_LOW);
    169a:	60 e0       	ldi	r22, 0x00	; 0
    169c:	8a e0       	ldi	r24, 0x0A	; 10
    169e:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
	
    #if LCD_U8_DATA_LENGTH  == LCD_U8_4_BIT
	if(GET_BIT(Copy_u8Data , 4) == 1)
    16a2:	c4 ff       	sbrs	r28, 4
    16a4:	05 c0       	rjmp	.+10     	; 0x16b0 <LCD_voidSendData+0x22>
	{
		DIO_voidSetPinValue(LCD_U8_D4,DIO_U8_HIGH);
    16a6:	61 e0       	ldi	r22, 0x01	; 1
    16a8:	84 e0       	ldi	r24, 0x04	; 4
    16aa:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
    16ae:	04 c0       	rjmp	.+8      	; 0x16b8 <LCD_voidSendData+0x2a>
	}
	else
	{
		DIO_voidSetPinValue(LCD_U8_D4,DIO_U8_LOW);
    16b0:	60 e0       	ldi	r22, 0x00	; 0
    16b2:	84 e0       	ldi	r24, 0x04	; 4
    16b4:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
	}


	if(GET_BIT(Copy_u8Data , 5) == 1)
    16b8:	c5 ff       	sbrs	r28, 5
    16ba:	05 c0       	rjmp	.+10     	; 0x16c6 <LCD_voidSendData+0x38>
	{
		DIO_voidSetPinValue(LCD_U8_D5,DIO_U8_HIGH);
    16bc:	61 e0       	ldi	r22, 0x01	; 1
    16be:	85 e0       	ldi	r24, 0x05	; 5
    16c0:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
    16c4:	04 c0       	rjmp	.+8      	; 0x16ce <LCD_voidSendData+0x40>
	}
	else
	{
		DIO_voidSetPinValue(LCD_U8_D5,DIO_U8_LOW);
    16c6:	60 e0       	ldi	r22, 0x00	; 0
    16c8:	85 e0       	ldi	r24, 0x05	; 5
    16ca:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
	}


	if(GET_BIT(Copy_u8Data , 6) == 1)
    16ce:	c6 ff       	sbrs	r28, 6
    16d0:	05 c0       	rjmp	.+10     	; 0x16dc <LCD_voidSendData+0x4e>
	{
		DIO_voidSetPinValue(LCD_U8_D6,DIO_U8_HIGH);
    16d2:	61 e0       	ldi	r22, 0x01	; 1
    16d4:	86 e0       	ldi	r24, 0x06	; 6
    16d6:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
    16da:	04 c0       	rjmp	.+8      	; 0x16e4 <LCD_voidSendData+0x56>
	}
	else
	{
		DIO_voidSetPinValue(LCD_U8_D6,DIO_U8_LOW);
    16dc:	60 e0       	ldi	r22, 0x00	; 0
    16de:	86 e0       	ldi	r24, 0x06	; 6
    16e0:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
	}

	if(GET_BIT(Copy_u8Data , 7) == 1)
    16e4:	cc 23       	and	r28, r28
    16e6:	2c f4       	brge	.+10     	; 0x16f2 <LCD_voidSendData+0x64>
	{
		DIO_voidSetPinValue(LCD_U8_D7,DIO_U8_HIGH);
    16e8:	61 e0       	ldi	r22, 0x01	; 1
    16ea:	87 e0       	ldi	r24, 0x07	; 7
    16ec:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
    16f0:	04 c0       	rjmp	.+8      	; 0x16fa <LCD_voidSendData+0x6c>
	}
	else
	{
		DIO_voidSetPinValue(LCD_U8_D7,DIO_U8_LOW);
    16f2:	60 e0       	ldi	r22, 0x00	; 0
    16f4:	87 e0       	ldi	r24, 0x07	; 7
    16f6:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
	}
	
	DIO_voidSetPinValue(LCD_U8_E,DIO_U8_HIGH);
    16fa:	61 e0       	ldi	r22, 0x01	; 1
    16fc:	88 e0       	ldi	r24, 0x08	; 8
    16fe:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
    1702:	8f e9       	ldi	r24, 0x9F	; 159
    1704:	9f e0       	ldi	r25, 0x0F	; 15
    1706:	01 97       	sbiw	r24, 0x01	; 1
    1708:	f1 f7       	brne	.-4      	; 0x1706 <LCD_voidSendData+0x78>
    170a:	00 c0       	rjmp	.+0      	; 0x170c <LCD_voidSendData+0x7e>
    170c:	00 00       	nop
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_U8_E,DIO_U8_LOW);
    170e:	60 e0       	ldi	r22, 0x00	; 0
    1710:	88 e0       	ldi	r24, 0x08	; 8
    1712:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
    1716:	8f e9       	ldi	r24, 0x9F	; 159
    1718:	9f e0       	ldi	r25, 0x0F	; 15
    171a:	01 97       	sbiw	r24, 0x01	; 1
    171c:	f1 f7       	brne	.-4      	; 0x171a <LCD_voidSendData+0x8c>
    171e:	00 c0       	rjmp	.+0      	; 0x1720 <LCD_voidSendData+0x92>
    1720:	00 00       	nop
	_delay_ms(1);	

	if(GET_BIT(Copy_u8Data , 0) == 1)
    1722:	c0 ff       	sbrs	r28, 0
    1724:	05 c0       	rjmp	.+10     	; 0x1730 <LCD_voidSendData+0xa2>
	{
		DIO_voidSetPinValue(LCD_U8_D4,DIO_U8_HIGH);
    1726:	61 e0       	ldi	r22, 0x01	; 1
    1728:	84 e0       	ldi	r24, 0x04	; 4
    172a:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
    172e:	04 c0       	rjmp	.+8      	; 0x1738 <LCD_voidSendData+0xaa>
	}
	else
	{
		DIO_voidSetPinValue(LCD_U8_D4,DIO_U8_LOW);
    1730:	60 e0       	ldi	r22, 0x00	; 0
    1732:	84 e0       	ldi	r24, 0x04	; 4
    1734:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
	}


	if(GET_BIT(Copy_u8Data , 1) == 1)
    1738:	c1 ff       	sbrs	r28, 1
    173a:	05 c0       	rjmp	.+10     	; 0x1746 <LCD_voidSendData+0xb8>
	{
		DIO_voidSetPinValue(LCD_U8_D5,DIO_U8_HIGH);
    173c:	61 e0       	ldi	r22, 0x01	; 1
    173e:	85 e0       	ldi	r24, 0x05	; 5
    1740:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
    1744:	04 c0       	rjmp	.+8      	; 0x174e <LCD_voidSendData+0xc0>
	}
	else
	{
		DIO_voidSetPinValue(LCD_U8_D5,DIO_U8_LOW);
    1746:	60 e0       	ldi	r22, 0x00	; 0
    1748:	85 e0       	ldi	r24, 0x05	; 5
    174a:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
	}


	if(GET_BIT(Copy_u8Data , 2) == 1)
    174e:	c2 ff       	sbrs	r28, 2
    1750:	05 c0       	rjmp	.+10     	; 0x175c <LCD_voidSendData+0xce>
	{
		DIO_voidSetPinValue(LCD_U8_D6,DIO_U8_HIGH);
    1752:	61 e0       	ldi	r22, 0x01	; 1
    1754:	86 e0       	ldi	r24, 0x06	; 6
    1756:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
    175a:	04 c0       	rjmp	.+8      	; 0x1764 <LCD_voidSendData+0xd6>
	}
	else
	{
		DIO_voidSetPinValue(LCD_U8_D6,DIO_U8_LOW);
    175c:	60 e0       	ldi	r22, 0x00	; 0
    175e:	86 e0       	ldi	r24, 0x06	; 6
    1760:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
	}

	if(GET_BIT(Copy_u8Data , 3) == 1)
    1764:	c3 ff       	sbrs	r28, 3
    1766:	05 c0       	rjmp	.+10     	; 0x1772 <LCD_voidSendData+0xe4>
	{
		DIO_voidSetPinValue(LCD_U8_D7,DIO_U8_HIGH);
    1768:	61 e0       	ldi	r22, 0x01	; 1
    176a:	87 e0       	ldi	r24, 0x07	; 7
    176c:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
    1770:	04 c0       	rjmp	.+8      	; 0x177a <LCD_voidSendData+0xec>
	}
	else
	{
		DIO_voidSetPinValue(LCD_U8_D7,DIO_U8_LOW);
    1772:	60 e0       	ldi	r22, 0x00	; 0
    1774:	87 e0       	ldi	r24, 0x07	; 7
    1776:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_U8_D7,DIO_U8_LOW);
	}	
	
	#endif
	
	DIO_voidSetPinValue(LCD_U8_E,DIO_U8_HIGH);
    177a:	61 e0       	ldi	r22, 0x01	; 1
    177c:	88 e0       	ldi	r24, 0x08	; 8
    177e:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
    1782:	8f e9       	ldi	r24, 0x9F	; 159
    1784:	9f e0       	ldi	r25, 0x0F	; 15
    1786:	01 97       	sbiw	r24, 0x01	; 1
    1788:	f1 f7       	brne	.-4      	; 0x1786 <LCD_voidSendData+0xf8>
    178a:	00 c0       	rjmp	.+0      	; 0x178c <LCD_voidSendData+0xfe>
    178c:	00 00       	nop
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_U8_E,DIO_U8_LOW);
    178e:	60 e0       	ldi	r22, 0x00	; 0
    1790:	88 e0       	ldi	r24, 0x08	; 8
    1792:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
    1796:	8f e9       	ldi	r24, 0x9F	; 159
    1798:	9f e0       	ldi	r25, 0x0F	; 15
    179a:	01 97       	sbiw	r24, 0x01	; 1
    179c:	f1 f7       	brne	.-4      	; 0x179a <LCD_voidSendData+0x10c>
    179e:	00 c0       	rjmp	.+0      	; 0x17a0 <LCD_voidSendData+0x112>
    17a0:	00 00       	nop
	_delay_ms(1);
	
}
    17a2:	cf 91       	pop	r28
    17a4:	08 95       	ret

000017a6 <LCD_voidSendCommand>:
void LCD_voidSendCommand(u8 Copy_u8Command)
{
    17a6:	cf 93       	push	r28
    17a8:	c8 2f       	mov	r28, r24
	DIO_voidSetPinValue(LCD_U8_RS,DIO_U8_LOW);
    17aa:	60 e0       	ldi	r22, 0x00	; 0
    17ac:	89 e0       	ldi	r24, 0x09	; 9
    17ae:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_U8_RW,DIO_U8_LOW);
    17b2:	60 e0       	ldi	r22, 0x00	; 0
    17b4:	8a e0       	ldi	r24, 0x0A	; 10
    17b6:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
    #if LCD_U8_DATA_LENGTH  == LCD_U8_4_BIT
	
	if(GET_BIT(Copy_u8Command , 4) == 1)
    17ba:	c4 ff       	sbrs	r28, 4
    17bc:	05 c0       	rjmp	.+10     	; 0x17c8 <LCD_voidSendCommand+0x22>
	{
		DIO_voidSetPinValue(LCD_U8_D4,DIO_U8_HIGH);
    17be:	61 e0       	ldi	r22, 0x01	; 1
    17c0:	84 e0       	ldi	r24, 0x04	; 4
    17c2:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
    17c6:	04 c0       	rjmp	.+8      	; 0x17d0 <LCD_voidSendCommand+0x2a>
	}
	else
	{
		DIO_voidSetPinValue(LCD_U8_D4,DIO_U8_LOW);
    17c8:	60 e0       	ldi	r22, 0x00	; 0
    17ca:	84 e0       	ldi	r24, 0x04	; 4
    17cc:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
	}


	if(GET_BIT(Copy_u8Command , 5) == 1)
    17d0:	c5 ff       	sbrs	r28, 5
    17d2:	05 c0       	rjmp	.+10     	; 0x17de <LCD_voidSendCommand+0x38>
	{
		DIO_voidSetPinValue(LCD_U8_D5,DIO_U8_HIGH);
    17d4:	61 e0       	ldi	r22, 0x01	; 1
    17d6:	85 e0       	ldi	r24, 0x05	; 5
    17d8:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
    17dc:	04 c0       	rjmp	.+8      	; 0x17e6 <LCD_voidSendCommand+0x40>
	}
	else
	{
		DIO_voidSetPinValue(LCD_U8_D5,DIO_U8_LOW);
    17de:	60 e0       	ldi	r22, 0x00	; 0
    17e0:	85 e0       	ldi	r24, 0x05	; 5
    17e2:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
	}


	if(GET_BIT(Copy_u8Command , 6) == 1)
    17e6:	c6 ff       	sbrs	r28, 6
    17e8:	05 c0       	rjmp	.+10     	; 0x17f4 <LCD_voidSendCommand+0x4e>
	{
		DIO_voidSetPinValue(LCD_U8_D6,DIO_U8_HIGH);
    17ea:	61 e0       	ldi	r22, 0x01	; 1
    17ec:	86 e0       	ldi	r24, 0x06	; 6
    17ee:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
    17f2:	04 c0       	rjmp	.+8      	; 0x17fc <LCD_voidSendCommand+0x56>
	}
	else
	{
		DIO_voidSetPinValue(LCD_U8_D6,DIO_U8_LOW);
    17f4:	60 e0       	ldi	r22, 0x00	; 0
    17f6:	86 e0       	ldi	r24, 0x06	; 6
    17f8:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
	}

	if(GET_BIT(Copy_u8Command , 7) == 1)
    17fc:	cc 23       	and	r28, r28
    17fe:	2c f4       	brge	.+10     	; 0x180a <LCD_voidSendCommand+0x64>
	{
		DIO_voidSetPinValue(LCD_U8_D7,DIO_U8_HIGH);
    1800:	61 e0       	ldi	r22, 0x01	; 1
    1802:	87 e0       	ldi	r24, 0x07	; 7
    1804:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
    1808:	04 c0       	rjmp	.+8      	; 0x1812 <LCD_voidSendCommand+0x6c>
	}
	else
	{
		DIO_voidSetPinValue(LCD_U8_D7,DIO_U8_LOW);
    180a:	60 e0       	ldi	r22, 0x00	; 0
    180c:	87 e0       	ldi	r24, 0x07	; 7
    180e:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
	}
	
	
	DIO_voidSetPinValue(LCD_U8_E,DIO_U8_HIGH);
    1812:	61 e0       	ldi	r22, 0x01	; 1
    1814:	88 e0       	ldi	r24, 0x08	; 8
    1816:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
    181a:	8f e9       	ldi	r24, 0x9F	; 159
    181c:	9f e0       	ldi	r25, 0x0F	; 15
    181e:	01 97       	sbiw	r24, 0x01	; 1
    1820:	f1 f7       	brne	.-4      	; 0x181e <LCD_voidSendCommand+0x78>
    1822:	00 c0       	rjmp	.+0      	; 0x1824 <LCD_voidSendCommand+0x7e>
    1824:	00 00       	nop
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_U8_E,DIO_U8_LOW);
    1826:	60 e0       	ldi	r22, 0x00	; 0
    1828:	88 e0       	ldi	r24, 0x08	; 8
    182a:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
    182e:	8f e9       	ldi	r24, 0x9F	; 159
    1830:	9f e0       	ldi	r25, 0x0F	; 15
    1832:	01 97       	sbiw	r24, 0x01	; 1
    1834:	f1 f7       	brne	.-4      	; 0x1832 <LCD_voidSendCommand+0x8c>
    1836:	00 c0       	rjmp	.+0      	; 0x1838 <LCD_voidSendCommand+0x92>
    1838:	00 00       	nop
	_delay_ms(1);	
	
		if(GET_BIT(Copy_u8Command , 0) == 1)
    183a:	c0 ff       	sbrs	r28, 0
    183c:	05 c0       	rjmp	.+10     	; 0x1848 <LCD_voidSendCommand+0xa2>
		{
			DIO_voidSetPinValue(LCD_U8_D4,DIO_U8_HIGH);
    183e:	61 e0       	ldi	r22, 0x01	; 1
    1840:	84 e0       	ldi	r24, 0x04	; 4
    1842:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
    1846:	04 c0       	rjmp	.+8      	; 0x1850 <LCD_voidSendCommand+0xaa>
		}
		else
		{
			DIO_voidSetPinValue(LCD_U8_D4,DIO_U8_LOW);
    1848:	60 e0       	ldi	r22, 0x00	; 0
    184a:	84 e0       	ldi	r24, 0x04	; 4
    184c:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
		}


		if(GET_BIT(Copy_u8Command , 1) == 1)
    1850:	c1 ff       	sbrs	r28, 1
    1852:	05 c0       	rjmp	.+10     	; 0x185e <LCD_voidSendCommand+0xb8>
		{
			DIO_voidSetPinValue(LCD_U8_D5,DIO_U8_HIGH);
    1854:	61 e0       	ldi	r22, 0x01	; 1
    1856:	85 e0       	ldi	r24, 0x05	; 5
    1858:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
    185c:	04 c0       	rjmp	.+8      	; 0x1866 <LCD_voidSendCommand+0xc0>
		}
		else
		{
			DIO_voidSetPinValue(LCD_U8_D5,DIO_U8_LOW);
    185e:	60 e0       	ldi	r22, 0x00	; 0
    1860:	85 e0       	ldi	r24, 0x05	; 5
    1862:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
		}


		if(GET_BIT(Copy_u8Command , 2) == 1)
    1866:	c2 ff       	sbrs	r28, 2
    1868:	05 c0       	rjmp	.+10     	; 0x1874 <LCD_voidSendCommand+0xce>
		{
			DIO_voidSetPinValue(LCD_U8_D6,DIO_U8_HIGH);
    186a:	61 e0       	ldi	r22, 0x01	; 1
    186c:	86 e0       	ldi	r24, 0x06	; 6
    186e:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
    1872:	04 c0       	rjmp	.+8      	; 0x187c <LCD_voidSendCommand+0xd6>
		}
		else
		{
			DIO_voidSetPinValue(LCD_U8_D6,DIO_U8_LOW);
    1874:	60 e0       	ldi	r22, 0x00	; 0
    1876:	86 e0       	ldi	r24, 0x06	; 6
    1878:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
		}

		if(GET_BIT(Copy_u8Command , 3) == 1)
    187c:	c3 ff       	sbrs	r28, 3
    187e:	05 c0       	rjmp	.+10     	; 0x188a <LCD_voidSendCommand+0xe4>
		{
			DIO_voidSetPinValue(LCD_U8_D7,DIO_U8_HIGH);
    1880:	61 e0       	ldi	r22, 0x01	; 1
    1882:	87 e0       	ldi	r24, 0x07	; 7
    1884:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
    1888:	04 c0       	rjmp	.+8      	; 0x1892 <LCD_voidSendCommand+0xec>
		}
		else
		{
			DIO_voidSetPinValue(LCD_U8_D7,DIO_U8_LOW);
    188a:	60 e0       	ldi	r22, 0x00	; 0
    188c:	87 e0       	ldi	r24, 0x07	; 7
    188e:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_U8_D7,DIO_U8_LOW);
	}	
	
	#endif
	
	DIO_voidSetPinValue(LCD_U8_E,DIO_U8_HIGH);
    1892:	61 e0       	ldi	r22, 0x01	; 1
    1894:	88 e0       	ldi	r24, 0x08	; 8
    1896:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
    189a:	8f e9       	ldi	r24, 0x9F	; 159
    189c:	9f e0       	ldi	r25, 0x0F	; 15
    189e:	01 97       	sbiw	r24, 0x01	; 1
    18a0:	f1 f7       	brne	.-4      	; 0x189e <LCD_voidSendCommand+0xf8>
    18a2:	00 c0       	rjmp	.+0      	; 0x18a4 <LCD_voidSendCommand+0xfe>
    18a4:	00 00       	nop
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_U8_E,DIO_U8_LOW);
    18a6:	60 e0       	ldi	r22, 0x00	; 0
    18a8:	88 e0       	ldi	r24, 0x08	; 8
    18aa:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
    18ae:	8f e9       	ldi	r24, 0x9F	; 159
    18b0:	9f e0       	ldi	r25, 0x0F	; 15
    18b2:	01 97       	sbiw	r24, 0x01	; 1
    18b4:	f1 f7       	brne	.-4      	; 0x18b2 <LCD_voidSendCommand+0x10c>
    18b6:	00 c0       	rjmp	.+0      	; 0x18b8 <LCD_voidSendCommand+0x112>
    18b8:	00 00       	nop
	_delay_ms(1);
	
}
    18ba:	cf 91       	pop	r28
    18bc:	08 95       	ret

000018be <LCD_voidInit>:
    18be:	2f e7       	ldi	r18, 0x7F	; 127
    18c0:	85 eb       	ldi	r24, 0xB5	; 181
    18c2:	91 e0       	ldi	r25, 0x01	; 1
    18c4:	21 50       	subi	r18, 0x01	; 1
    18c6:	80 40       	sbci	r24, 0x00	; 0
    18c8:	90 40       	sbci	r25, 0x00	; 0
    18ca:	e1 f7       	brne	.-8      	; 0x18c4 <LCD_voidInit+0x6>
    18cc:	00 c0       	rjmp	.+0      	; 0x18ce <LCD_voidInit+0x10>
    18ce:	00 00       	nop
	LCD_voidSendCommand(0b00000001);
	_delay_ms(2);
	LCD_voidSendCommand(0b00000110);*/
	
		_delay_ms(35);
		LCD_voidSendCommand(0x33);
    18d0:	83 e3       	ldi	r24, 0x33	; 51
    18d2:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <LCD_voidSendCommand>
    18d6:	8f e3       	ldi	r24, 0x3F	; 63
    18d8:	9f e1       	ldi	r25, 0x1F	; 31
    18da:	01 97       	sbiw	r24, 0x01	; 1
    18dc:	f1 f7       	brne	.-4      	; 0x18da <LCD_voidInit+0x1c>
    18de:	00 c0       	rjmp	.+0      	; 0x18e0 <LCD_voidInit+0x22>
    18e0:	00 00       	nop
		_delay_ms(2);
		LCD_voidSendCommand(0x32);
    18e2:	82 e3       	ldi	r24, 0x32	; 50
    18e4:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <LCD_voidSendCommand>
    18e8:	8f e3       	ldi	r24, 0x3F	; 63
    18ea:	9f e1       	ldi	r25, 0x1F	; 31
    18ec:	01 97       	sbiw	r24, 0x01	; 1
    18ee:	f1 f7       	brne	.-4      	; 0x18ec <LCD_voidInit+0x2e>
    18f0:	00 c0       	rjmp	.+0      	; 0x18f2 <LCD_voidInit+0x34>
    18f2:	00 00       	nop
		_delay_ms(2);
		LCD_voidSendCommand(0b00101000);     // function set 
    18f4:	88 e2       	ldi	r24, 0x28	; 40
    18f6:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <LCD_voidSendCommand>
    18fa:	8f e3       	ldi	r24, 0x3F	; 63
    18fc:	9f e1       	ldi	r25, 0x1F	; 31
    18fe:	01 97       	sbiw	r24, 0x01	; 1
    1900:	f1 f7       	brne	.-4      	; 0x18fe <LCD_voidInit+0x40>
    1902:	00 c0       	rjmp	.+0      	; 0x1904 <LCD_voidInit+0x46>
    1904:	00 00       	nop
		_delay_ms(2);
		LCD_voidSendCommand(0b00001100);     //DISPLAY ON , of CONTROLE 
    1906:	8c e0       	ldi	r24, 0x0C	; 12
    1908:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <LCD_voidSendCommand>
    190c:	8f e3       	ldi	r24, 0x3F	; 63
    190e:	9f e1       	ldi	r25, 0x1F	; 31
    1910:	01 97       	sbiw	r24, 0x01	; 1
    1912:	f1 f7       	brne	.-4      	; 0x1910 <LCD_voidInit+0x52>
    1914:	00 c0       	rjmp	.+0      	; 0x1916 <LCD_voidInit+0x58>
    1916:	00 00       	nop
		_delay_ms(2);
		LCD_voidSendCommand(0b00000110);          //display clear 
    1918:	86 e0       	ldi	r24, 0x06	; 6
    191a:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <LCD_voidSendCommand>
    191e:	8f e3       	ldi	r24, 0x3F	; 63
    1920:	9f e1       	ldi	r25, 0x1F	; 31
    1922:	01 97       	sbiw	r24, 0x01	; 1
    1924:	f1 f7       	brne	.-4      	; 0x1922 <LCD_voidInit+0x64>
    1926:	00 c0       	rjmp	.+0      	; 0x1928 <LCD_voidInit+0x6a>
    1928:	00 00       	nop
		_delay_ms(2);
		LCD_voidSendCommand(0b00000001);     // entry mode set
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <LCD_voidSendCommand>
    1930:	8f e3       	ldi	r24, 0x3F	; 63
    1932:	9f e1       	ldi	r25, 0x1F	; 31
    1934:	01 97       	sbiw	r24, 0x01	; 1
    1936:	f1 f7       	brne	.-4      	; 0x1934 <LCD_voidInit+0x76>
    1938:	00 c0       	rjmp	.+0      	; 0x193a <LCD_voidInit+0x7c>
    193a:	00 00       	nop
    193c:	08 95       	ret

0000193e <LCD_voidSendString>:
	DIO_voidSetPinValue(LCD_U8_E,DIO_U8_LOW);
	_delay_ms(1);
	
}
void LCD_voidSendString(s8* P_s8String)
{
    193e:	0f 93       	push	r16
    1940:	1f 93       	push	r17
    1942:	cf 93       	push	r28
    1944:	8c 01       	movw	r16, r24
	u8 Local_u8Counter = 0;
    1946:	c0 e0       	ldi	r28, 0x00	; 0
	while(P_s8String[Local_u8Counter] != '\0')
    1948:	03 c0       	rjmp	.+6      	; 0x1950 <LCD_voidSendString+0x12>
	{
		LCD_voidSendData(P_s8String[Local_u8Counter]);
    194a:	0e 94 47 0b 	call	0x168e	; 0x168e <LCD_voidSendData>
		Local_u8Counter++;
    194e:	cf 5f       	subi	r28, 0xFF	; 255
	
}
void LCD_voidSendString(s8* P_s8String)
{
	u8 Local_u8Counter = 0;
	while(P_s8String[Local_u8Counter] != '\0')
    1950:	f8 01       	movw	r30, r16
    1952:	ec 0f       	add	r30, r28
    1954:	f1 1d       	adc	r31, r1
    1956:	80 81       	ld	r24, Z
    1958:	81 11       	cpse	r24, r1
    195a:	f7 cf       	rjmp	.-18     	; 0x194a <LCD_voidSendString+0xc>
	{
		LCD_voidSendData(P_s8String[Local_u8Counter]);
		Local_u8Counter++;
	}
}
    195c:	cf 91       	pop	r28
    195e:	1f 91       	pop	r17
    1960:	0f 91       	pop	r16
    1962:	08 95       	ret

00001964 <LCD_voidSetCursor>:
void LCD_voidSetCursor(u8 Copy_u8Row ,u8 Copy_u8Column ){
	u8 Local_u8adress = 0;
	switch (Copy_u8Row)
    1964:	88 23       	and	r24, r24
    1966:	19 f0       	breq	.+6      	; 0x196e <LCD_voidSetCursor+0xa>
    1968:	81 30       	cpi	r24, 0x01	; 1
    196a:	21 f0       	breq	.+8      	; 0x1974 <LCD_voidSetCursor+0x10>
    196c:	06 c0       	rjmp	.+12     	; 0x197a <LCD_voidSetCursor+0x16>
	{  case LCD_U8_ROW_1 :
		Local_u8adress = (0x80 +Copy_u8Column ) ; break;
    196e:	80 e8       	ldi	r24, 0x80	; 128
    1970:	86 0f       	add	r24, r22
    1972:	04 c0       	rjmp	.+8      	; 0x197c <LCD_voidSetCursor+0x18>
		case LCD_U8_ROW_2 :
		Local_u8adress =( 0xC0 +Copy_u8Column ) ; break;
    1974:	80 ec       	ldi	r24, 0xC0	; 192
    1976:	86 0f       	add	r24, r22
    1978:	01 c0       	rjmp	.+2      	; 0x197c <LCD_voidSetCursor+0x18>
		LCD_voidSendData(P_s8String[Local_u8Counter]);
		Local_u8Counter++;
	}
}
void LCD_voidSetCursor(u8 Copy_u8Row ,u8 Copy_u8Column ){
	u8 Local_u8adress = 0;
    197a:	80 e0       	ldi	r24, 0x00	; 0
	{  case LCD_U8_ROW_1 :
		Local_u8adress = (0x80 +Copy_u8Column ) ; break;
		case LCD_U8_ROW_2 :
		Local_u8adress =( 0xC0 +Copy_u8Column ) ; break;
	}
	LCD_voidSendCommand(Local_u8adress);
    197c:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <LCD_voidSendCommand>
    1980:	08 95       	ret

00001982 <LCD_voidClearDisplay>:
}
void LCD_voidClearDisplay(void){
	LCD_voidSendCommand( 0b00000001   );
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <LCD_voidSendCommand>
    1988:	08 95       	ret

0000198a <Dimmer_Controle>:
 *
 * Created: 6/18/2023 11:03:15 AM
 *  Author: Moaz Refaat
 */ 
#include "Led.h" 
void  Dimmer_Controle(void){
    198a:	cf 92       	push	r12
    198c:	df 92       	push	r13
    198e:	ef 92       	push	r14
    1990:	ff 92       	push	r15
	
	static f32  duty = 0 ;
	LCD_voidSendString("inc intensity: +");
    1992:	8f ed       	ldi	r24, 0xDF	; 223
    1994:	91 e0       	ldi	r25, 0x01	; 1
    1996:	0e 94 9f 0c 	call	0x193e	; 0x193e <LCD_voidSendString>
	LCD_voidSetCursor(LCD_U8_ROW_2 , LCD_u8_COLUMN_1);
    199a:	60 e0       	ldi	r22, 0x00	; 0
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	0e 94 b2 0c 	call	0x1964	; 0x1964 <LCD_voidSetCursor>
	LCD_voidSendString("dec intinsity: -");
    19a2:	80 ef       	ldi	r24, 0xF0	; 240
    19a4:	91 e0       	ldi	r25, 0x01	; 1
    19a6:	0e 94 9f 0c 	call	0x193e	; 0x193e <LCD_voidSendString>
	LCD_voidSetCursor(LCD_U8_ROW_2 , LCD_u8_COLUMN_16);
    19aa:	6f e0       	ldi	r22, 0x0F	; 15
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	0e 94 b2 0c 	call	0x1964	; 0x1964 <LCD_voidSetCursor>
	LCD_voidSendString("Exit: 1 ");
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	92 e0       	ldi	r25, 0x02	; 2
    19b6:	0e 94 9f 0c 	call	0x193e	; 0x193e <LCD_voidSendString>
	first :
	while (KEYPAD_u8GetPressedButton()=='\0');
    19ba:	0e 94 8a 0a 	call	0x1514	; 0x1514 <KEYPAD_u8GetPressedButton>
    19be:	88 23       	and	r24, r24
    19c0:	e1 f3       	breq	.-8      	; 0x19ba <Dimmer_Controle+0x30>
	if(KEYPAD_u8GetPressedButton()=='1')
    19c2:	0e 94 8a 0a 	call	0x1514	; 0x1514 <KEYPAD_u8GetPressedButton>
    19c6:	81 33       	cpi	r24, 0x31	; 49
    19c8:	d1 f5       	brne	.+116    	; 0x1a3e <Dimmer_Controle+0xb4>
    19ca:	7f c0       	rjmp	.+254    	; 0x1aca <Dimmer_Controle+0x140>
	return ;
	while (KEYPAD_u8GetPressedButton()=='+')
	{ for(duty ; duty<100; duty+=.5)
		{
			TIMER0_void_SetCompareVal(duty);
    19cc:	c7 01       	movw	r24, r14
    19ce:	b6 01       	movw	r22, r12
    19d0:	0e 94 45 10 	call	0x208a	; 0x208a <__fixunssfsi>
    19d4:	86 2f       	mov	r24, r22
    19d6:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <TIMER0_void_SetCompareVal>
			if (KEYPAD_u8GetPressedButton()=='\0')
    19da:	0e 94 8a 0a 	call	0x1514	; 0x1514 <KEYPAD_u8GetPressedButton>
    19de:	88 23       	and	r24, r24
    19e0:	71 f1       	breq	.+92     	; 0x1a3e <Dimmer_Controle+0xb4>
    19e2:	8f e1       	ldi	r24, 0x1F	; 31
    19e4:	9e e4       	ldi	r25, 0x4E	; 78
    19e6:	01 97       	sbiw	r24, 0x01	; 1
    19e8:	f1 f7       	brne	.-4      	; 0x19e6 <Dimmer_Controle+0x5c>
    19ea:	00 c0       	rjmp	.+0      	; 0x19ec <Dimmer_Controle+0x62>
    19ec:	00 00       	nop
	first :
	while (KEYPAD_u8GetPressedButton()=='\0');
	if(KEYPAD_u8GetPressedButton()=='1')
	return ;
	while (KEYPAD_u8GetPressedButton()=='+')
	{ for(duty ; duty<100; duty+=.5)
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	40 e0       	ldi	r20, 0x00	; 0
    19f4:	5f e3       	ldi	r21, 0x3F	; 63
    19f6:	60 91 58 02 	lds	r22, 0x0258	; 0x800258 <duty.1781>
    19fa:	70 91 59 02 	lds	r23, 0x0259	; 0x800259 <duty.1781+0x1>
    19fe:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <duty.1781+0x2>
    1a02:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <duty.1781+0x3>
    1a06:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <__addsf3>
    1a0a:	60 93 58 02 	sts	0x0258, r22	; 0x800258 <duty.1781>
    1a0e:	70 93 59 02 	sts	0x0259, r23	; 0x800259 <duty.1781+0x1>
    1a12:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <duty.1781+0x2>
    1a16:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <duty.1781+0x3>
    1a1a:	c0 90 58 02 	lds	r12, 0x0258	; 0x800258 <duty.1781>
    1a1e:	d0 90 59 02 	lds	r13, 0x0259	; 0x800259 <duty.1781+0x1>
    1a22:	e0 90 5a 02 	lds	r14, 0x025A	; 0x80025a <duty.1781+0x2>
    1a26:	f0 90 5b 02 	lds	r15, 0x025B	; 0x80025b <duty.1781+0x3>
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	48 ec       	ldi	r20, 0xC8	; 200
    1a30:	52 e4       	ldi	r21, 0x42	; 66
    1a32:	c7 01       	movw	r24, r14
    1a34:	b6 01       	movw	r22, r12
    1a36:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <__cmpsf2>
    1a3a:	88 23       	and	r24, r24
    1a3c:	3c f2       	brlt	.-114    	; 0x19cc <Dimmer_Controle+0x42>
	LCD_voidSendString("Exit: 1 ");
	first :
	while (KEYPAD_u8GetPressedButton()=='\0');
	if(KEYPAD_u8GetPressedButton()=='1')
	return ;
	while (KEYPAD_u8GetPressedButton()=='+')
    1a3e:	0e 94 8a 0a 	call	0x1514	; 0x1514 <KEYPAD_u8GetPressedButton>
    1a42:	8b 32       	cpi	r24, 0x2B	; 43
    1a44:	51 f3       	breq	.-44     	; 0x1a1a <Dimmer_Controle+0x90>
    1a46:	3c c0       	rjmp	.+120    	; 0x1ac0 <Dimmer_Controle+0x136>
	
	while (KEYPAD_u8GetPressedButton()=='-')
	{
		for(duty ; duty>1; duty-=5)
		{
			TIMER0_void_SetCompareVal(duty);
    1a48:	c7 01       	movw	r24, r14
    1a4a:	b6 01       	movw	r22, r12
    1a4c:	0e 94 45 10 	call	0x208a	; 0x208a <__fixunssfsi>
    1a50:	86 2f       	mov	r24, r22
    1a52:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <TIMER0_void_SetCompareVal>
			if (KEYPAD_u8GetPressedButton()=='\0')
    1a56:	0e 94 8a 0a 	call	0x1514	; 0x1514 <KEYPAD_u8GetPressedButton>
    1a5a:	88 23       	and	r24, r24
    1a5c:	89 f1       	breq	.+98     	; 0x1ac0 <Dimmer_Controle+0x136>
    1a5e:	9f e5       	ldi	r25, 0x5F	; 95
    1a60:	2a ee       	ldi	r18, 0xEA	; 234
    1a62:	80 e0       	ldi	r24, 0x00	; 0
    1a64:	91 50       	subi	r25, 0x01	; 1
    1a66:	20 40       	sbci	r18, 0x00	; 0
    1a68:	80 40       	sbci	r24, 0x00	; 0
    1a6a:	e1 f7       	brne	.-8      	; 0x1a64 <Dimmer_Controle+0xda>
    1a6c:	00 c0       	rjmp	.+0      	; 0x1a6e <Dimmer_Controle+0xe4>
    1a6e:	00 00       	nop
	}
	
	
	while (KEYPAD_u8GetPressedButton()=='-')
	{
		for(duty ; duty>1; duty-=5)
    1a70:	20 e0       	ldi	r18, 0x00	; 0
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	40 ea       	ldi	r20, 0xA0	; 160
    1a76:	50 e4       	ldi	r21, 0x40	; 64
    1a78:	60 91 58 02 	lds	r22, 0x0258	; 0x800258 <duty.1781>
    1a7c:	70 91 59 02 	lds	r23, 0x0259	; 0x800259 <duty.1781+0x1>
    1a80:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <duty.1781+0x2>
    1a84:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <duty.1781+0x3>
    1a88:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <__subsf3>
    1a8c:	60 93 58 02 	sts	0x0258, r22	; 0x800258 <duty.1781>
    1a90:	70 93 59 02 	sts	0x0259, r23	; 0x800259 <duty.1781+0x1>
    1a94:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <duty.1781+0x2>
    1a98:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <duty.1781+0x3>
    1a9c:	c0 90 58 02 	lds	r12, 0x0258	; 0x800258 <duty.1781>
    1aa0:	d0 90 59 02 	lds	r13, 0x0259	; 0x800259 <duty.1781+0x1>
    1aa4:	e0 90 5a 02 	lds	r14, 0x025A	; 0x80025a <duty.1781+0x2>
    1aa8:	f0 90 5b 02 	lds	r15, 0x025B	; 0x80025b <duty.1781+0x3>
    1aac:	20 e0       	ldi	r18, 0x00	; 0
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	40 e8       	ldi	r20, 0x80	; 128
    1ab2:	5f e3       	ldi	r21, 0x3F	; 63
    1ab4:	c7 01       	movw	r24, r14
    1ab6:	b6 01       	movw	r22, r12
    1ab8:	0e 94 26 11 	call	0x224c	; 0x224c <__gesf2>
    1abc:	18 16       	cp	r1, r24
    1abe:	24 f2       	brlt	.-120    	; 0x1a48 <Dimmer_Controle+0xbe>
		}
		
	}
	
	
	while (KEYPAD_u8GetPressedButton()=='-')
    1ac0:	0e 94 8a 0a 	call	0x1514	; 0x1514 <KEYPAD_u8GetPressedButton>
    1ac4:	8d 32       	cpi	r24, 0x2D	; 45
    1ac6:	51 f3       	breq	.-44     	; 0x1a9c <Dimmer_Controle+0x112>
    1ac8:	78 cf       	rjmp	.-272    	; 0x19ba <Dimmer_Controle+0x30>
			
		}
	}
	
	goto first ;
}
    1aca:	ff 90       	pop	r15
    1acc:	ef 90       	pop	r14
    1ace:	df 90       	pop	r13
    1ad0:	cf 90       	pop	r12
    1ad2:	08 95       	ret

00001ad4 <Led_Controle>:

void  Led_Controle(void){
	
	first :
	LCD_voidSendString("Toggle led no :1,2,3,4,5");
    1ad4:	8a e0       	ldi	r24, 0x0A	; 10
    1ad6:	92 e0       	ldi	r25, 0x02	; 2
    1ad8:	0e 94 9f 0c 	call	0x193e	; 0x193e <LCD_voidSendString>
	LCD_voidSetCursor(LCD_U8_ROW_2 , LCD_u8_COLUMN_1);
    1adc:	60 e0       	ldi	r22, 0x00	; 0
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	0e 94 b2 0c 	call	0x1964	; 0x1964 <LCD_voidSetCursor>
	LCD_voidSendString("for exit : X  ");
    1ae4:	83 e2       	ldi	r24, 0x23	; 35
    1ae6:	92 e0       	ldi	r25, 0x02	; 2
    1ae8:	0e 94 9f 0c 	call	0x193e	; 0x193e <LCD_voidSendString>
	while (KEYPAD_u8GetPressedButton()=='\0');
    1aec:	0e 94 8a 0a 	call	0x1514	; 0x1514 <KEYPAD_u8GetPressedButton>
    1af0:	88 23       	and	r24, r24
    1af2:	e1 f3       	breq	.-8      	; 0x1aec <Led_Controle+0x18>
	switch ( KEYPAD_u8GetPressedButton() )
    1af4:	0e 94 8a 0a 	call	0x1514	; 0x1514 <KEYPAD_u8GetPressedButton>
    1af8:	83 33       	cpi	r24, 0x33	; 51
    1afa:	49 f1       	breq	.+82     	; 0x1b4e <Led_Controle+0x7a>
    1afc:	28 f4       	brcc	.+10     	; 0x1b08 <Led_Controle+0x34>
    1afe:	81 33       	cpi	r24, 0x31	; 49
    1b00:	41 f0       	breq	.+16     	; 0x1b12 <Led_Controle+0x3e>
    1b02:	82 33       	cpi	r24, 0x32	; 50
    1b04:	a9 f0       	breq	.+42     	; 0x1b30 <Led_Controle+0x5c>
    1b06:	08 95       	ret
    1b08:	84 33       	cpi	r24, 0x34	; 52
    1b0a:	81 f1       	breq	.+96     	; 0x1b6c <Led_Controle+0x98>
    1b0c:	85 33       	cpi	r24, 0x35	; 53
    1b0e:	e9 f1       	breq	.+122    	; 0x1b8a <Led_Controle+0xb6>
    1b10:	08 95       	ret
	{
		case '1' :
		if (DIO_u8GetPinValue(DIO_U8_PIN24))
    1b12:	88 e1       	ldi	r24, 0x18	; 24
    1b14:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <DIO_u8GetPinValue>
    1b18:	88 23       	and	r24, r24
    1b1a:	29 f0       	breq	.+10     	; 0x1b26 <Led_Controle+0x52>
		DIO_voidSetPinValue(DIO_U8_PIN24, DIO_U8_LOW);
    1b1c:	60 e0       	ldi	r22, 0x00	; 0
    1b1e:	88 e1       	ldi	r24, 0x18	; 24
    1b20:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
    1b24:	40 c0       	rjmp	.+128    	; 0x1ba6 <Led_Controle+0xd2>
		else
		DIO_voidSetPinValue(DIO_U8_PIN24, DIO_U8_HIGH);
    1b26:	61 e0       	ldi	r22, 0x01	; 1
    1b28:	88 e1       	ldi	r24, 0x18	; 24
    1b2a:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
    1b2e:	3b c0       	rjmp	.+118    	; 0x1ba6 <Led_Controle+0xd2>
		break;
		case '2':
		if (DIO_u8GetPinValue(DIO_U8_PIN25))
    1b30:	89 e1       	ldi	r24, 0x19	; 25
    1b32:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <DIO_u8GetPinValue>
    1b36:	88 23       	and	r24, r24
    1b38:	29 f0       	breq	.+10     	; 0x1b44 <Led_Controle+0x70>
		DIO_voidSetPinValue(DIO_U8_PIN25, DIO_U8_LOW);
    1b3a:	60 e0       	ldi	r22, 0x00	; 0
    1b3c:	89 e1       	ldi	r24, 0x19	; 25
    1b3e:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
    1b42:	31 c0       	rjmp	.+98     	; 0x1ba6 <Led_Controle+0xd2>
		else
		DIO_voidSetPinValue(DIO_U8_PIN25, DIO_U8_HIGH);
    1b44:	61 e0       	ldi	r22, 0x01	; 1
    1b46:	89 e1       	ldi	r24, 0x19	; 25
    1b48:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
    1b4c:	2c c0       	rjmp	.+88     	; 0x1ba6 <Led_Controle+0xd2>
		break;
		case '3' :
		if (DIO_u8GetPinValue(DIO_U8_PIN26))
    1b4e:	8a e1       	ldi	r24, 0x1A	; 26
    1b50:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <DIO_u8GetPinValue>
    1b54:	88 23       	and	r24, r24
    1b56:	29 f0       	breq	.+10     	; 0x1b62 <Led_Controle+0x8e>
		DIO_voidSetPinValue(DIO_U8_PIN26, DIO_U8_LOW);
    1b58:	60 e0       	ldi	r22, 0x00	; 0
    1b5a:	8a e1       	ldi	r24, 0x1A	; 26
    1b5c:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
    1b60:	22 c0       	rjmp	.+68     	; 0x1ba6 <Led_Controle+0xd2>
		else
		DIO_voidSetPinValue(DIO_U8_PIN26, DIO_U8_HIGH);
    1b62:	61 e0       	ldi	r22, 0x01	; 1
    1b64:	8a e1       	ldi	r24, 0x1A	; 26
    1b66:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
    1b6a:	1d c0       	rjmp	.+58     	; 0x1ba6 <Led_Controle+0xd2>
		break ;
		case '4' :
		if (DIO_u8GetPinValue(DIO_U8_PIN28))
    1b6c:	8c e1       	ldi	r24, 0x1C	; 28
    1b6e:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <DIO_u8GetPinValue>
    1b72:	88 23       	and	r24, r24
    1b74:	29 f0       	breq	.+10     	; 0x1b80 <Led_Controle+0xac>
		DIO_voidSetPinValue(DIO_U8_PIN28, DIO_U8_LOW);
    1b76:	60 e0       	ldi	r22, 0x00	; 0
    1b78:	8c e1       	ldi	r24, 0x1C	; 28
    1b7a:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
    1b7e:	13 c0       	rjmp	.+38     	; 0x1ba6 <Led_Controle+0xd2>
		else
		DIO_voidSetPinValue(DIO_U8_PIN28, DIO_U8_HIGH);
    1b80:	61 e0       	ldi	r22, 0x01	; 1
    1b82:	8c e1       	ldi	r24, 0x1C	; 28
    1b84:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
    1b88:	0e c0       	rjmp	.+28     	; 0x1ba6 <Led_Controle+0xd2>
		break ;
		case '5' :
		if (DIO_u8GetPinValue(DIO_U8_PIN29))
    1b8a:	8d e1       	ldi	r24, 0x1D	; 29
    1b8c:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <DIO_u8GetPinValue>
    1b90:	88 23       	and	r24, r24
    1b92:	29 f0       	breq	.+10     	; 0x1b9e <Led_Controle+0xca>
		DIO_voidSetPinValue(DIO_U8_PIN29, DIO_U8_LOW);
    1b94:	60 e0       	ldi	r22, 0x00	; 0
    1b96:	8d e1       	ldi	r24, 0x1D	; 29
    1b98:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
    1b9c:	04 c0       	rjmp	.+8      	; 0x1ba6 <Led_Controle+0xd2>
		else
		DIO_voidSetPinValue(DIO_U8_PIN29, DIO_U8_HIGH);
    1b9e:	61 e0       	ldi	r22, 0x01	; 1
    1ba0:	8d e1       	ldi	r24, 0x1D	; 29
    1ba2:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinValue>
		case 'X' :
		return ;
		default:
		return ;
	}
	LCD_voidClearDisplay();
    1ba6:	0e 94 c1 0c 	call	0x1982	; 0x1982 <LCD_voidClearDisplay>
	goto first ;
    1baa:	94 cf       	rjmp	.-216    	; 0x1ad4 <Led_Controle>

00001bac <Door_Controle>:
#include "ServoMotor.h"

void  Door_Controle(void)
{
	first :
	LCD_voidSendString("Door Open : 1  ");
    1bac:	82 e3       	ldi	r24, 0x32	; 50
    1bae:	92 e0       	ldi	r25, 0x02	; 2
    1bb0:	0e 94 9f 0c 	call	0x193e	; 0x193e <LCD_voidSendString>
	LCD_voidSetCursor(LCD_U8_ROW_2 , LCD_u8_COLUMN_1);
    1bb4:	60 e0       	ldi	r22, 0x00	; 0
    1bb6:	81 e0       	ldi	r24, 0x01	; 1
    1bb8:	0e 94 b2 0c 	call	0x1964	; 0x1964 <LCD_voidSetCursor>
	LCD_voidSendString("Door close : 2  ");
    1bbc:	82 e4       	ldi	r24, 0x42	; 66
    1bbe:	92 e0       	ldi	r25, 0x02	; 2
    1bc0:	0e 94 9f 0c 	call	0x193e	; 0x193e <LCD_voidSendString>
	while (KEYPAD_u8GetPressedButton()=='\0');
    1bc4:	0e 94 8a 0a 	call	0x1514	; 0x1514 <KEYPAD_u8GetPressedButton>
    1bc8:	88 23       	and	r24, r24
    1bca:	e1 f3       	breq	.-8      	; 0x1bc4 <Door_Controle+0x18>
	switch ( KEYPAD_u8GetPressedButton() )
    1bcc:	0e 94 8a 0a 	call	0x1514	; 0x1514 <KEYPAD_u8GetPressedButton>
    1bd0:	81 33       	cpi	r24, 0x31	; 49
    1bd2:	19 f0       	breq	.+6      	; 0x1bda <Door_Controle+0x2e>
    1bd4:	82 33       	cpi	r24, 0x32	; 50
    1bd6:	79 f0       	breq	.+30     	; 0x1bf6 <Door_Controle+0x4a>
    1bd8:	08 95       	ret
	{
		case '1':
		TIMER2_void_SetCompareVal(25);
    1bda:	89 e1       	ldi	r24, 0x19	; 25
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <TIMER2_void_SetCompareVal>
    1be2:	2f e3       	ldi	r18, 0x3F	; 63
    1be4:	8d e0       	ldi	r24, 0x0D	; 13
    1be6:	93 e0       	ldi	r25, 0x03	; 3
    1be8:	21 50       	subi	r18, 0x01	; 1
    1bea:	80 40       	sbci	r24, 0x00	; 0
    1bec:	90 40       	sbci	r25, 0x00	; 0
    1bee:	e1 f7       	brne	.-8      	; 0x1be8 <Door_Controle+0x3c>
    1bf0:	00 c0       	rjmp	.+0      	; 0x1bf2 <Door_Controle+0x46>
    1bf2:	00 00       	nop
    1bf4:	0d c0       	rjmp	.+26     	; 0x1c10 <Door_Controle+0x64>
		_delay_ms(100);
		break;
		case '2':
		TIMER2_void_SetCompareVal(12);
    1bf6:	8c e0       	ldi	r24, 0x0C	; 12
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <TIMER2_void_SetCompareVal>
    1bfe:	2f e3       	ldi	r18, 0x3F	; 63
    1c00:	8d e0       	ldi	r24, 0x0D	; 13
    1c02:	93 e0       	ldi	r25, 0x03	; 3
    1c04:	21 50       	subi	r18, 0x01	; 1
    1c06:	80 40       	sbci	r24, 0x00	; 0
    1c08:	90 40       	sbci	r25, 0x00	; 0
    1c0a:	e1 f7       	brne	.-8      	; 0x1c04 <Door_Controle+0x58>
    1c0c:	00 c0       	rjmp	.+0      	; 0x1c0e <Door_Controle+0x62>
    1c0e:	00 00       	nop
		_delay_ms(100);
		break;
		default:
		return;
	}
	LCD_voidClearDisplay();
    1c10:	0e 94 c1 0c 	call	0x1982	; 0x1982 <LCD_voidClearDisplay>
	goto first ;
    1c14:	cb cf       	rjmp	.-106    	; 0x1bac <Door_Controle>

00001c16 <ADC_voidEnable>:
	SET_BIT(ADCSRA , 7);
}

void ADC_voidDisable(void)
{
	CLEAR_BIT(ADCSRA , 7);
    1c16:	86 b1       	in	r24, 0x06	; 6
    1c18:	80 68       	ori	r24, 0x80	; 128
    1c1a:	86 b9       	out	0x06, r24	; 6
    1c1c:	08 95       	ret

00001c1e <ADC_voidInit>:
    1c1e:	87 b1       	in	r24, 0x07	; 7
    1c20:	8f 7b       	andi	r24, 0xBF	; 191
    1c22:	87 b9       	out	0x07, r24	; 7
    1c24:	87 b1       	in	r24, 0x07	; 7
    1c26:	8f 77       	andi	r24, 0x7F	; 127
    1c28:	87 b9       	out	0x07, r24	; 7
    1c2a:	87 b1       	in	r24, 0x07	; 7
    1c2c:	8f 7d       	andi	r24, 0xDF	; 223
    1c2e:	87 b9       	out	0x07, r24	; 7
    1c30:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <ADC_voidEnable>
    1c34:	08 95       	ret

00001c36 <ADC_u16Convert>:
{
	u8 Local_u8High;
	u8 Local_u8LOW;
	u16 result;
	
	ADMUX = ADMUX & 0b11100000; // mask
    1c36:	97 b1       	in	r25, 0x07	; 7
    1c38:	90 7e       	andi	r25, 0xE0	; 224
    1c3a:	97 b9       	out	0x07, r25	; 7
	ADMUX =  ADMUX | Local_u8Channel;
    1c3c:	97 b1       	in	r25, 0x07	; 7
    1c3e:	89 2b       	or	r24, r25
    1c40:	87 b9       	out	0x07, r24	; 7
	
	// start conversion
	SET_BIT(ADCSRA , 6);
    1c42:	86 b1       	in	r24, 0x06	; 6
    1c44:	80 64       	ori	r24, 0x40	; 64
    1c46:	86 b9       	out	0x06, r24	; 6
	// wait for ADC to finish conversion
	while(GET_BIT(ADCSRA , 6) == 1);
    1c48:	36 99       	sbic	0x06, 6	; 6
    1c4a:	fe cf       	rjmp	.-4      	; 0x1c48 <ADC_u16Convert+0x12>
	
	Local_u8LOW = ADCL;
    1c4c:	24 b1       	in	r18, 0x04	; 4
    Local_u8High = ADCH;
    1c4e:	85 b1       	in	r24, 0x05	; 5

	result = ( (Local_u8High & 0b00000011) << 8) | Local_u8LOW;
    1c50:	83 70       	andi	r24, 0x03	; 3
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	98 2f       	mov	r25, r24
    1c56:	88 27       	eor	r24, r24
	return result;
}
    1c58:	82 2b       	or	r24, r18
    1c5a:	08 95       	ret

00001c5c <DIO_voidInit>:
#include "DIO_config.h"
#include "DIO_private.h"

void DIO_voidInit(void)
{
	DDRA = DIO_U8_DIRA;
    1c5c:	80 ef       	ldi	r24, 0xF0	; 240
    1c5e:	8a bb       	out	0x1a, r24	; 26
	DDRB = DIO_U8_DIRB;
    1c60:	8f ef       	ldi	r24, 0xFF	; 255
    1c62:	87 bb       	out	0x17, r24	; 23
	DDRC = DIO_U8_DIRC;
    1c64:	84 e8       	ldi	r24, 0x84	; 132
    1c66:	84 bb       	out	0x14, r24	; 20
	DDRD = DIO_U8_DIRD;
    1c68:	87 ef       	ldi	r24, 0xF7	; 247
    1c6a:	81 bb       	out	0x11, r24	; 17
    1c6c:	08 95       	ret

00001c6e <DIO_voidSetPinValue>:
}
void DIO_voidSetPinValue(u8 Copy_u8Pin , u8 Copy_u8Value)
{
	if(Copy_u8Pin < DIO_U8_END_PORTA)
    1c6e:	88 30       	cpi	r24, 0x08	; 8
    1c70:	00 f5       	brcc	.+64     	; 0x1cb2 <DIO_voidSetPinValue+0x44>
	{
		switch(Copy_u8Value)
    1c72:	66 23       	and	r22, r22
    1c74:	81 f0       	breq	.+32     	; 0x1c96 <DIO_voidSetPinValue+0x28>
    1c76:	61 30       	cpi	r22, 0x01	; 1
    1c78:	09 f0       	breq	.+2      	; 0x1c7c <DIO_voidSetPinValue+0xe>
    1c7a:	81 c0       	rjmp	.+258    	; 0x1d7e <DIO_voidSetPinValue+0x110>
		{
			case DIO_U8_HIGH: SET_BIT(PORTA,Copy_u8Pin); break;
    1c7c:	4b b3       	in	r20, 0x1b	; 27
    1c7e:	21 e0       	ldi	r18, 0x01	; 1
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	b9 01       	movw	r22, r18
    1c84:	02 c0       	rjmp	.+4      	; 0x1c8a <DIO_voidSetPinValue+0x1c>
    1c86:	66 0f       	add	r22, r22
    1c88:	77 1f       	adc	r23, r23
    1c8a:	8a 95       	dec	r24
    1c8c:	e2 f7       	brpl	.-8      	; 0x1c86 <DIO_voidSetPinValue+0x18>
    1c8e:	cb 01       	movw	r24, r22
    1c90:	84 2b       	or	r24, r20
    1c92:	8b bb       	out	0x1b, r24	; 27
    1c94:	08 95       	ret
			case DIO_U8_LOW:  CLEAR_BIT(PORTA,Copy_u8Pin); break;
    1c96:	4b b3       	in	r20, 0x1b	; 27
    1c98:	21 e0       	ldi	r18, 0x01	; 1
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	b9 01       	movw	r22, r18
    1c9e:	02 c0       	rjmp	.+4      	; 0x1ca4 <DIO_voidSetPinValue+0x36>
    1ca0:	66 0f       	add	r22, r22
    1ca2:	77 1f       	adc	r23, r23
    1ca4:	8a 95       	dec	r24
    1ca6:	e2 f7       	brpl	.-8      	; 0x1ca0 <DIO_voidSetPinValue+0x32>
    1ca8:	cb 01       	movw	r24, r22
    1caa:	80 95       	com	r24
    1cac:	84 23       	and	r24, r20
    1cae:	8b bb       	out	0x1b, r24	; 27
    1cb0:	08 95       	ret
		}
	}
	else if(Copy_u8Pin < DIO_U8_END_PORTB)
    1cb2:	80 31       	cpi	r24, 0x10	; 16
    1cb4:	08 f5       	brcc	.+66     	; 0x1cf8 <DIO_voidSetPinValue+0x8a>
	{
		Copy_u8Pin = Copy_u8Pin - DIO_U8_END_PORTA;
    1cb6:	88 50       	subi	r24, 0x08	; 8
		switch(Copy_u8Value)
    1cb8:	66 23       	and	r22, r22
    1cba:	81 f0       	breq	.+32     	; 0x1cdc <DIO_voidSetPinValue+0x6e>
    1cbc:	61 30       	cpi	r22, 0x01	; 1
    1cbe:	09 f0       	breq	.+2      	; 0x1cc2 <DIO_voidSetPinValue+0x54>
    1cc0:	5e c0       	rjmp	.+188    	; 0x1d7e <DIO_voidSetPinValue+0x110>
		{
			case DIO_U8_HIGH: SET_BIT(PORTB,Copy_u8Pin); break;
    1cc2:	48 b3       	in	r20, 0x18	; 24
    1cc4:	21 e0       	ldi	r18, 0x01	; 1
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	b9 01       	movw	r22, r18
    1cca:	02 c0       	rjmp	.+4      	; 0x1cd0 <DIO_voidSetPinValue+0x62>
    1ccc:	66 0f       	add	r22, r22
    1cce:	77 1f       	adc	r23, r23
    1cd0:	8a 95       	dec	r24
    1cd2:	e2 f7       	brpl	.-8      	; 0x1ccc <DIO_voidSetPinValue+0x5e>
    1cd4:	cb 01       	movw	r24, r22
    1cd6:	84 2b       	or	r24, r20
    1cd8:	88 bb       	out	0x18, r24	; 24
    1cda:	08 95       	ret
			case DIO_U8_LOW:  CLEAR_BIT(PORTB,Copy_u8Pin); break;
    1cdc:	48 b3       	in	r20, 0x18	; 24
    1cde:	21 e0       	ldi	r18, 0x01	; 1
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	b9 01       	movw	r22, r18
    1ce4:	02 c0       	rjmp	.+4      	; 0x1cea <DIO_voidSetPinValue+0x7c>
    1ce6:	66 0f       	add	r22, r22
    1ce8:	77 1f       	adc	r23, r23
    1cea:	8a 95       	dec	r24
    1cec:	e2 f7       	brpl	.-8      	; 0x1ce6 <DIO_voidSetPinValue+0x78>
    1cee:	cb 01       	movw	r24, r22
    1cf0:	80 95       	com	r24
    1cf2:	84 23       	and	r24, r20
    1cf4:	88 bb       	out	0x18, r24	; 24
    1cf6:	08 95       	ret
		}
	}
	else if(Copy_u8Pin < DIO_U8_END_PORTC)
    1cf8:	88 31       	cpi	r24, 0x18	; 24
    1cfa:	00 f5       	brcc	.+64     	; 0x1d3c <DIO_voidSetPinValue+0xce>
	{
		Copy_u8Pin = Copy_u8Pin - DIO_U8_END_PORTB;
    1cfc:	80 51       	subi	r24, 0x10	; 16
		switch(Copy_u8Value)
    1cfe:	66 23       	and	r22, r22
    1d00:	79 f0       	breq	.+30     	; 0x1d20 <DIO_voidSetPinValue+0xb2>
    1d02:	61 30       	cpi	r22, 0x01	; 1
    1d04:	e1 f5       	brne	.+120    	; 0x1d7e <DIO_voidSetPinValue+0x110>
		{
			case DIO_U8_HIGH: SET_BIT(PORTC,Copy_u8Pin); break;
    1d06:	45 b3       	in	r20, 0x15	; 21
    1d08:	21 e0       	ldi	r18, 0x01	; 1
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	b9 01       	movw	r22, r18
    1d0e:	02 c0       	rjmp	.+4      	; 0x1d14 <DIO_voidSetPinValue+0xa6>
    1d10:	66 0f       	add	r22, r22
    1d12:	77 1f       	adc	r23, r23
    1d14:	8a 95       	dec	r24
    1d16:	e2 f7       	brpl	.-8      	; 0x1d10 <DIO_voidSetPinValue+0xa2>
    1d18:	cb 01       	movw	r24, r22
    1d1a:	84 2b       	or	r24, r20
    1d1c:	85 bb       	out	0x15, r24	; 21
    1d1e:	08 95       	ret
			case DIO_U8_LOW:  CLEAR_BIT(PORTC,Copy_u8Pin); break;
    1d20:	45 b3       	in	r20, 0x15	; 21
    1d22:	21 e0       	ldi	r18, 0x01	; 1
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	b9 01       	movw	r22, r18
    1d28:	02 c0       	rjmp	.+4      	; 0x1d2e <DIO_voidSetPinValue+0xc0>
    1d2a:	66 0f       	add	r22, r22
    1d2c:	77 1f       	adc	r23, r23
    1d2e:	8a 95       	dec	r24
    1d30:	e2 f7       	brpl	.-8      	; 0x1d2a <DIO_voidSetPinValue+0xbc>
    1d32:	cb 01       	movw	r24, r22
    1d34:	80 95       	com	r24
    1d36:	84 23       	and	r24, r20
    1d38:	85 bb       	out	0x15, r24	; 21
    1d3a:	08 95       	ret
		}
	}
	
	else if(Copy_u8Pin < DIO_U8_END_PORTD)
    1d3c:	80 32       	cpi	r24, 0x20	; 32
    1d3e:	f8 f4       	brcc	.+62     	; 0x1d7e <DIO_voidSetPinValue+0x110>
	{
		Copy_u8Pin = Copy_u8Pin - DIO_U8_END_PORTC;
    1d40:	88 51       	subi	r24, 0x18	; 24
		switch(Copy_u8Value)
    1d42:	66 23       	and	r22, r22
    1d44:	79 f0       	breq	.+30     	; 0x1d64 <DIO_voidSetPinValue+0xf6>
    1d46:	61 30       	cpi	r22, 0x01	; 1
    1d48:	d1 f4       	brne	.+52     	; 0x1d7e <DIO_voidSetPinValue+0x110>
		{
			case DIO_U8_HIGH: SET_BIT(PORTD,Copy_u8Pin); break;
    1d4a:	42 b3       	in	r20, 0x12	; 18
    1d4c:	21 e0       	ldi	r18, 0x01	; 1
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	b9 01       	movw	r22, r18
    1d52:	02 c0       	rjmp	.+4      	; 0x1d58 <DIO_voidSetPinValue+0xea>
    1d54:	66 0f       	add	r22, r22
    1d56:	77 1f       	adc	r23, r23
    1d58:	8a 95       	dec	r24
    1d5a:	e2 f7       	brpl	.-8      	; 0x1d54 <DIO_voidSetPinValue+0xe6>
    1d5c:	cb 01       	movw	r24, r22
    1d5e:	84 2b       	or	r24, r20
    1d60:	82 bb       	out	0x12, r24	; 18
    1d62:	08 95       	ret
			case DIO_U8_LOW:  CLEAR_BIT(PORTD,Copy_u8Pin); break;
    1d64:	42 b3       	in	r20, 0x12	; 18
    1d66:	21 e0       	ldi	r18, 0x01	; 1
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	b9 01       	movw	r22, r18
    1d6c:	02 c0       	rjmp	.+4      	; 0x1d72 <DIO_voidSetPinValue+0x104>
    1d6e:	66 0f       	add	r22, r22
    1d70:	77 1f       	adc	r23, r23
    1d72:	8a 95       	dec	r24
    1d74:	e2 f7       	brpl	.-8      	; 0x1d6e <DIO_voidSetPinValue+0x100>
    1d76:	cb 01       	movw	r24, r22
    1d78:	80 95       	com	r24
    1d7a:	84 23       	and	r24, r20
    1d7c:	82 bb       	out	0x12, r24	; 18
    1d7e:	08 95       	ret

00001d80 <DIO_u8GetPinValue>:
	}
}
u8 DIO_u8GetPinValue(u8 Copy_u8Pin)
{
	u8 Local_u8Value = 0;
	if(Copy_u8Pin < DIO_U8_END_PORTA)
    1d80:	88 30       	cpi	r24, 0x08	; 8
    1d82:	58 f4       	brcc	.+22     	; 0x1d9a <DIO_u8GetPinValue+0x1a>
	{
		Local_u8Value = GET_BIT(PINA , Copy_u8Pin);
    1d84:	29 b3       	in	r18, 0x19	; 25
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	a9 01       	movw	r20, r18
    1d8a:	02 c0       	rjmp	.+4      	; 0x1d90 <DIO_u8GetPinValue+0x10>
    1d8c:	55 95       	asr	r21
    1d8e:	47 95       	ror	r20
    1d90:	8a 95       	dec	r24
    1d92:	e2 f7       	brpl	.-8      	; 0x1d8c <DIO_u8GetPinValue+0xc>
    1d94:	ca 01       	movw	r24, r20
    1d96:	81 70       	andi	r24, 0x01	; 1
    1d98:	08 95       	ret
	}
	else if(Copy_u8Pin < DIO_U8_END_PORTB)
    1d9a:	80 31       	cpi	r24, 0x10	; 16
    1d9c:	60 f4       	brcc	.+24     	; 0x1db6 <DIO_u8GetPinValue+0x36>
	{
		Copy_u8Pin = Copy_u8Pin - DIO_U8_END_PORTA;
    1d9e:	28 ef       	ldi	r18, 0xF8	; 248
    1da0:	28 0f       	add	r18, r24
		Local_u8Value = GET_BIT(PINB , Copy_u8Pin);
    1da2:	96 b3       	in	r25, 0x16	; 22
    1da4:	89 2f       	mov	r24, r25
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	02 c0       	rjmp	.+4      	; 0x1dae <DIO_u8GetPinValue+0x2e>
    1daa:	95 95       	asr	r25
    1dac:	87 95       	ror	r24
    1dae:	2a 95       	dec	r18
    1db0:	e2 f7       	brpl	.-8      	; 0x1daa <DIO_u8GetPinValue+0x2a>
    1db2:	81 70       	andi	r24, 0x01	; 1
    1db4:	08 95       	ret
	}
	else if(Copy_u8Pin < DIO_U8_END_PORTC)
    1db6:	88 31       	cpi	r24, 0x18	; 24
    1db8:	60 f4       	brcc	.+24     	; 0x1dd2 <DIO_u8GetPinValue+0x52>
	{
		Copy_u8Pin = Copy_u8Pin - DIO_U8_END_PORTB;
    1dba:	20 ef       	ldi	r18, 0xF0	; 240
    1dbc:	28 0f       	add	r18, r24
		Local_u8Value = GET_BIT(PINC , Copy_u8Pin);
    1dbe:	93 b3       	in	r25, 0x13	; 19
    1dc0:	89 2f       	mov	r24, r25
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	02 c0       	rjmp	.+4      	; 0x1dca <DIO_u8GetPinValue+0x4a>
    1dc6:	95 95       	asr	r25
    1dc8:	87 95       	ror	r24
    1dca:	2a 95       	dec	r18
    1dcc:	e2 f7       	brpl	.-8      	; 0x1dc6 <DIO_u8GetPinValue+0x46>
    1dce:	81 70       	andi	r24, 0x01	; 1
    1dd0:	08 95       	ret
	}
	
	else if(Copy_u8Pin < DIO_U8_END_PORTD)
    1dd2:	80 32       	cpi	r24, 0x20	; 32
    1dd4:	60 f4       	brcc	.+24     	; 0x1dee <DIO_u8GetPinValue+0x6e>
	{
		Copy_u8Pin = Copy_u8Pin - DIO_U8_END_PORTC;
    1dd6:	28 ee       	ldi	r18, 0xE8	; 232
    1dd8:	28 0f       	add	r18, r24
		Local_u8Value = GET_BIT(PIND , Copy_u8Pin);
    1dda:	90 b3       	in	r25, 0x10	; 16
    1ddc:	89 2f       	mov	r24, r25
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	02 c0       	rjmp	.+4      	; 0x1de6 <DIO_u8GetPinValue+0x66>
    1de2:	95 95       	asr	r25
    1de4:	87 95       	ror	r24
    1de6:	2a 95       	dec	r18
    1de8:	e2 f7       	brpl	.-8      	; 0x1de2 <DIO_u8GetPinValue+0x62>
    1dea:	81 70       	andi	r24, 0x01	; 1
    1dec:	08 95       	ret
		}
	}
}
u8 DIO_u8GetPinValue(u8 Copy_u8Pin)
{
	u8 Local_u8Value = 0;
    1dee:	80 e0       	ldi	r24, 0x00	; 0
		Copy_u8Pin = Copy_u8Pin - DIO_U8_END_PORTC;
		Local_u8Value = GET_BIT(PIND , Copy_u8Pin);
	}
	
	return Local_u8Value;
    1df0:	08 95       	ret

00001df2 <EEPROM_ui8ReadByteFromAddress>:
		/* move data from data register to the array */
		*(dist + counter) = EEDR;

		counter++;//increase the bytes counter
	}
}
    1df2:	e1 99       	sbic	0x1c, 1	; 28
    1df4:	fe cf       	rjmp	.-4      	; 0x1df2 <EEPROM_ui8ReadByteFromAddress>
    1df6:	9f bb       	out	0x1f, r25	; 31
    1df8:	8e bb       	out	0x1e, r24	; 30
    1dfa:	8c b3       	in	r24, 0x1c	; 28
    1dfc:	81 60       	ori	r24, 0x01	; 1
    1dfe:	8c bb       	out	0x1c, r24	; 28
    1e00:	8d b3       	in	r24, 0x1d	; 29
    1e02:	08 95       	ret

00001e04 <EEPROM_vWriteByteToAddress>:

void EEPROM_vWriteByteToAddress(const u16 uiAddress, const u8 uiData)
{

	/* Wait for completion of previous write process*/
	while ( ( (EECR & (1 << EEWE) ) >>EEWE ) == 1)
    1e04:	e1 99       	sbic	0x1c, 1	; 28
    1e06:	fe cf       	rjmp	.-4      	; 0x1e04 <EEPROM_vWriteByteToAddress>
	;
	/* Set up address register */
	EEAR = uiAddress;
    1e08:	9f bb       	out	0x1f, r25	; 31
    1e0a:	8e bb       	out	0x1e, r24	; 30

	/* Read the byte in the address of EEAR */
	EECR |= (1 << EERE);
    1e0c:	8c b3       	in	r24, 0x1c	; 28
    1e0e:	81 60       	ori	r24, 0x01	; 1
    1e10:	8c bb       	out	0x1c, r24	; 28
	if (EEDR != uiData)//compare the value read to the value to be written
    1e12:	8d b3       	in	r24, 0x1d	; 29
    1e14:	86 17       	cp	r24, r22
    1e16:	39 f0       	breq	.+14     	; 0x1e26 <EEPROM_vWriteByteToAddress+0x22>
	{//if they are not equal then write the data 
		EEDR = uiData;//move the data to EEDR
    1e18:	6d bb       	out	0x1d, r22	; 29

		/* Write logical one to EEMWE */
		EECR |= (1 << EEMWE);
    1e1a:	8c b3       	in	r24, 0x1c	; 28
    1e1c:	84 60       	ori	r24, 0x04	; 4
    1e1e:	8c bb       	out	0x1c, r24	; 28
		/* Start EEPROM write by setting EEWE */
		EECR |= (1 << EEWE);
    1e20:	8c b3       	in	r24, 0x1c	; 28
    1e22:	82 60       	ori	r24, 0x02	; 2
    1e24:	8c bb       	out	0x1c, r24	; 28
    1e26:	08 95       	ret

00001e28 <TIMER2_void_Init>:
	
}

void TIMER2_void_SetTimerReg(u8 Copy_u8Val) // for preload
{
	TCNT2 = Copy_u8Val ;
    1e28:	85 b5       	in	r24, 0x25	; 37
    1e2a:	80 64       	ori	r24, 0x40	; 64
    1e2c:	85 bd       	out	0x25, r24	; 37
    1e2e:	85 b5       	in	r24, 0x25	; 37
    1e30:	88 60       	ori	r24, 0x08	; 8
    1e32:	85 bd       	out	0x25, r24	; 37
    1e34:	85 b5       	in	r24, 0x25	; 37
    1e36:	8f 7e       	andi	r24, 0xEF	; 239
    1e38:	85 bd       	out	0x25, r24	; 37
    1e3a:	85 b5       	in	r24, 0x25	; 37
    1e3c:	80 62       	ori	r24, 0x20	; 32
    1e3e:	85 bd       	out	0x25, r24	; 37
    1e40:	89 b7       	in	r24, 0x39	; 57
    1e42:	8f 7b       	andi	r24, 0xBF	; 191
    1e44:	89 bf       	out	0x39, r24	; 57
    1e46:	89 b7       	in	r24, 0x39	; 57
    1e48:	8f 77       	andi	r24, 0x7F	; 127
    1e4a:	89 bf       	out	0x39, r24	; 57
    1e4c:	88 b7       	in	r24, 0x38	; 56
    1e4e:	80 68       	ori	r24, 0x80	; 128
    1e50:	88 bf       	out	0x38, r24	; 56
    1e52:	88 b7       	in	r24, 0x38	; 56
    1e54:	80 68       	ori	r24, 0x80	; 128
    1e56:	88 bf       	out	0x38, r24	; 56
    1e58:	14 bc       	out	0x24, r1	; 36
    1e5a:	8c e0       	ldi	r24, 0x0C	; 12
    1e5c:	83 bd       	out	0x23, r24	; 35
    1e5e:	85 b5       	in	r24, 0x25	; 37
    1e60:	8e 7f       	andi	r24, 0xFE	; 254
    1e62:	85 bd       	out	0x25, r24	; 37
    1e64:	85 b5       	in	r24, 0x25	; 37
    1e66:	8d 7f       	andi	r24, 0xFD	; 253
    1e68:	85 bd       	out	0x25, r24	; 37
    1e6a:	85 b5       	in	r24, 0x25	; 37
    1e6c:	84 60       	ori	r24, 0x04	; 4
    1e6e:	85 bd       	out	0x25, r24	; 37
    1e70:	08 95       	ret

00001e72 <TIMER2_void_SetCompareVal>:
}

void TIMER2_void_SetCompareVal(u8 Copy_u8Val) 
{
	OCR2 = Copy_u8Val ;
    1e72:	83 bd       	out	0x23, r24	; 35
    1e74:	08 95       	ret

00001e76 <TIMER0_void_Init>:
	OCR0 = 0 ;
}

void TIMER0_void_SetTimerReg(u8 Copy_u8Val) // for preload
{
	TCNT0 = Copy_u8Val ;
    1e76:	83 b7       	in	r24, 0x33	; 51
    1e78:	80 64       	ori	r24, 0x40	; 64
    1e7a:	83 bf       	out	0x33, r24	; 51
    1e7c:	83 b7       	in	r24, 0x33	; 51
    1e7e:	88 60       	ori	r24, 0x08	; 8
    1e80:	83 bf       	out	0x33, r24	; 51
    1e82:	83 b7       	in	r24, 0x33	; 51
    1e84:	8e 7f       	andi	r24, 0xFE	; 254
    1e86:	83 bf       	out	0x33, r24	; 51
    1e88:	83 b7       	in	r24, 0x33	; 51
    1e8a:	82 60       	ori	r24, 0x02	; 2
    1e8c:	83 bf       	out	0x33, r24	; 51
    1e8e:	83 b7       	in	r24, 0x33	; 51
    1e90:	8b 7f       	andi	r24, 0xFB	; 251
    1e92:	83 bf       	out	0x33, r24	; 51
    1e94:	83 b7       	in	r24, 0x33	; 51
    1e96:	8f 7e       	andi	r24, 0xEF	; 239
    1e98:	83 bf       	out	0x33, r24	; 51
    1e9a:	83 b7       	in	r24, 0x33	; 51
    1e9c:	80 62       	ori	r24, 0x20	; 32
    1e9e:	83 bf       	out	0x33, r24	; 51
    1ea0:	89 b7       	in	r24, 0x39	; 57
    1ea2:	8e 7f       	andi	r24, 0xFE	; 254
    1ea4:	89 bf       	out	0x39, r24	; 57
    1ea6:	89 b7       	in	r24, 0x39	; 57
    1ea8:	8d 7f       	andi	r24, 0xFD	; 253
    1eaa:	89 bf       	out	0x39, r24	; 57
    1eac:	88 b7       	in	r24, 0x38	; 56
    1eae:	81 60       	ori	r24, 0x01	; 1
    1eb0:	88 bf       	out	0x38, r24	; 56
    1eb2:	88 b7       	in	r24, 0x38	; 56
    1eb4:	82 60       	ori	r24, 0x02	; 2
    1eb6:	88 bf       	out	0x38, r24	; 56
    1eb8:	12 be       	out	0x32, r1	; 50
    1eba:	1c be       	out	0x3c, r1	; 60
    1ebc:	08 95       	ret

00001ebe <TIMER0_void_SetCompareVal>:
}

void TIMER0_void_SetCompareVal(u8 Copy_u8Val) 
{
	OCR0 = Copy_u8Val ;
    1ebe:	8c bf       	out	0x3c, r24	; 60
    1ec0:	08 95       	ret

00001ec2 <__subsf3>:
    1ec2:	50 58       	subi	r21, 0x80	; 128

00001ec4 <__addsf3>:
    1ec4:	bb 27       	eor	r27, r27
    1ec6:	aa 27       	eor	r26, r26
    1ec8:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <__addsf3x>
    1ecc:	0c 94 ec 10 	jmp	0x21d8	; 0x21d8 <__fp_round>
    1ed0:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fp_pscA>
    1ed4:	38 f0       	brcs	.+14     	; 0x1ee4 <__addsf3+0x20>
    1ed6:	0e 94 e5 10 	call	0x21ca	; 0x21ca <__fp_pscB>
    1eda:	20 f0       	brcs	.+8      	; 0x1ee4 <__addsf3+0x20>
    1edc:	39 f4       	brne	.+14     	; 0x1eec <__addsf3+0x28>
    1ede:	9f 3f       	cpi	r25, 0xFF	; 255
    1ee0:	19 f4       	brne	.+6      	; 0x1ee8 <__addsf3+0x24>
    1ee2:	26 f4       	brtc	.+8      	; 0x1eec <__addsf3+0x28>
    1ee4:	0c 94 db 10 	jmp	0x21b6	; 0x21b6 <__fp_nan>
    1ee8:	0e f4       	brtc	.+2      	; 0x1eec <__addsf3+0x28>
    1eea:	e0 95       	com	r30
    1eec:	e7 fb       	bst	r30, 7
    1eee:	0c 94 d5 10 	jmp	0x21aa	; 0x21aa <__fp_inf>

00001ef2 <__addsf3x>:
    1ef2:	e9 2f       	mov	r30, r25
    1ef4:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__fp_split3>
    1ef8:	58 f3       	brcs	.-42     	; 0x1ed0 <__addsf3+0xc>
    1efa:	ba 17       	cp	r27, r26
    1efc:	62 07       	cpc	r22, r18
    1efe:	73 07       	cpc	r23, r19
    1f00:	84 07       	cpc	r24, r20
    1f02:	95 07       	cpc	r25, r21
    1f04:	20 f0       	brcs	.+8      	; 0x1f0e <__addsf3x+0x1c>
    1f06:	79 f4       	brne	.+30     	; 0x1f26 <__addsf3x+0x34>
    1f08:	a6 f5       	brtc	.+104    	; 0x1f72 <__addsf3x+0x80>
    1f0a:	0c 94 1f 11 	jmp	0x223e	; 0x223e <__fp_zero>
    1f0e:	0e f4       	brtc	.+2      	; 0x1f12 <__addsf3x+0x20>
    1f10:	e0 95       	com	r30
    1f12:	0b 2e       	mov	r0, r27
    1f14:	ba 2f       	mov	r27, r26
    1f16:	a0 2d       	mov	r26, r0
    1f18:	0b 01       	movw	r0, r22
    1f1a:	b9 01       	movw	r22, r18
    1f1c:	90 01       	movw	r18, r0
    1f1e:	0c 01       	movw	r0, r24
    1f20:	ca 01       	movw	r24, r20
    1f22:	a0 01       	movw	r20, r0
    1f24:	11 24       	eor	r1, r1
    1f26:	ff 27       	eor	r31, r31
    1f28:	59 1b       	sub	r21, r25
    1f2a:	99 f0       	breq	.+38     	; 0x1f52 <__addsf3x+0x60>
    1f2c:	59 3f       	cpi	r21, 0xF9	; 249
    1f2e:	50 f4       	brcc	.+20     	; 0x1f44 <__addsf3x+0x52>
    1f30:	50 3e       	cpi	r21, 0xE0	; 224
    1f32:	68 f1       	brcs	.+90     	; 0x1f8e <__addsf3x+0x9c>
    1f34:	1a 16       	cp	r1, r26
    1f36:	f0 40       	sbci	r31, 0x00	; 0
    1f38:	a2 2f       	mov	r26, r18
    1f3a:	23 2f       	mov	r18, r19
    1f3c:	34 2f       	mov	r19, r20
    1f3e:	44 27       	eor	r20, r20
    1f40:	58 5f       	subi	r21, 0xF8	; 248
    1f42:	f3 cf       	rjmp	.-26     	; 0x1f2a <__addsf3x+0x38>
    1f44:	46 95       	lsr	r20
    1f46:	37 95       	ror	r19
    1f48:	27 95       	ror	r18
    1f4a:	a7 95       	ror	r26
    1f4c:	f0 40       	sbci	r31, 0x00	; 0
    1f4e:	53 95       	inc	r21
    1f50:	c9 f7       	brne	.-14     	; 0x1f44 <__addsf3x+0x52>
    1f52:	7e f4       	brtc	.+30     	; 0x1f72 <__addsf3x+0x80>
    1f54:	1f 16       	cp	r1, r31
    1f56:	ba 0b       	sbc	r27, r26
    1f58:	62 0b       	sbc	r22, r18
    1f5a:	73 0b       	sbc	r23, r19
    1f5c:	84 0b       	sbc	r24, r20
    1f5e:	ba f0       	brmi	.+46     	; 0x1f8e <__addsf3x+0x9c>
    1f60:	91 50       	subi	r25, 0x01	; 1
    1f62:	a1 f0       	breq	.+40     	; 0x1f8c <__addsf3x+0x9a>
    1f64:	ff 0f       	add	r31, r31
    1f66:	bb 1f       	adc	r27, r27
    1f68:	66 1f       	adc	r22, r22
    1f6a:	77 1f       	adc	r23, r23
    1f6c:	88 1f       	adc	r24, r24
    1f6e:	c2 f7       	brpl	.-16     	; 0x1f60 <__addsf3x+0x6e>
    1f70:	0e c0       	rjmp	.+28     	; 0x1f8e <__addsf3x+0x9c>
    1f72:	ba 0f       	add	r27, r26
    1f74:	62 1f       	adc	r22, r18
    1f76:	73 1f       	adc	r23, r19
    1f78:	84 1f       	adc	r24, r20
    1f7a:	48 f4       	brcc	.+18     	; 0x1f8e <__addsf3x+0x9c>
    1f7c:	87 95       	ror	r24
    1f7e:	77 95       	ror	r23
    1f80:	67 95       	ror	r22
    1f82:	b7 95       	ror	r27
    1f84:	f7 95       	ror	r31
    1f86:	9e 3f       	cpi	r25, 0xFE	; 254
    1f88:	08 f0       	brcs	.+2      	; 0x1f8c <__addsf3x+0x9a>
    1f8a:	b0 cf       	rjmp	.-160    	; 0x1eec <__addsf3+0x28>
    1f8c:	93 95       	inc	r25
    1f8e:	88 0f       	add	r24, r24
    1f90:	08 f0       	brcs	.+2      	; 0x1f94 <__addsf3x+0xa2>
    1f92:	99 27       	eor	r25, r25
    1f94:	ee 0f       	add	r30, r30
    1f96:	97 95       	ror	r25
    1f98:	87 95       	ror	r24
    1f9a:	08 95       	ret

00001f9c <__cmpsf2>:
    1f9c:	0e 94 b1 10 	call	0x2162	; 0x2162 <__fp_cmp>
    1fa0:	08 f4       	brcc	.+2      	; 0x1fa4 <__cmpsf2+0x8>
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	08 95       	ret

00001fa6 <__divsf3>:
    1fa6:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <__divsf3x>
    1faa:	0c 94 ec 10 	jmp	0x21d8	; 0x21d8 <__fp_round>
    1fae:	0e 94 e5 10 	call	0x21ca	; 0x21ca <__fp_pscB>
    1fb2:	58 f0       	brcs	.+22     	; 0x1fca <__divsf3+0x24>
    1fb4:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fp_pscA>
    1fb8:	40 f0       	brcs	.+16     	; 0x1fca <__divsf3+0x24>
    1fba:	29 f4       	brne	.+10     	; 0x1fc6 <__divsf3+0x20>
    1fbc:	5f 3f       	cpi	r21, 0xFF	; 255
    1fbe:	29 f0       	breq	.+10     	; 0x1fca <__divsf3+0x24>
    1fc0:	0c 94 d5 10 	jmp	0x21aa	; 0x21aa <__fp_inf>
    1fc4:	51 11       	cpse	r21, r1
    1fc6:	0c 94 20 11 	jmp	0x2240	; 0x2240 <__fp_szero>
    1fca:	0c 94 db 10 	jmp	0x21b6	; 0x21b6 <__fp_nan>

00001fce <__divsf3x>:
    1fce:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__fp_split3>
    1fd2:	68 f3       	brcs	.-38     	; 0x1fae <__divsf3+0x8>

00001fd4 <__divsf3_pse>:
    1fd4:	99 23       	and	r25, r25
    1fd6:	b1 f3       	breq	.-20     	; 0x1fc4 <__divsf3+0x1e>
    1fd8:	55 23       	and	r21, r21
    1fda:	91 f3       	breq	.-28     	; 0x1fc0 <__divsf3+0x1a>
    1fdc:	95 1b       	sub	r25, r21
    1fde:	55 0b       	sbc	r21, r21
    1fe0:	bb 27       	eor	r27, r27
    1fe2:	aa 27       	eor	r26, r26
    1fe4:	62 17       	cp	r22, r18
    1fe6:	73 07       	cpc	r23, r19
    1fe8:	84 07       	cpc	r24, r20
    1fea:	38 f0       	brcs	.+14     	; 0x1ffa <__divsf3_pse+0x26>
    1fec:	9f 5f       	subi	r25, 0xFF	; 255
    1fee:	5f 4f       	sbci	r21, 0xFF	; 255
    1ff0:	22 0f       	add	r18, r18
    1ff2:	33 1f       	adc	r19, r19
    1ff4:	44 1f       	adc	r20, r20
    1ff6:	aa 1f       	adc	r26, r26
    1ff8:	a9 f3       	breq	.-22     	; 0x1fe4 <__divsf3_pse+0x10>
    1ffa:	35 d0       	rcall	.+106    	; 0x2066 <__divsf3_pse+0x92>
    1ffc:	0e 2e       	mov	r0, r30
    1ffe:	3a f0       	brmi	.+14     	; 0x200e <__divsf3_pse+0x3a>
    2000:	e0 e8       	ldi	r30, 0x80	; 128
    2002:	32 d0       	rcall	.+100    	; 0x2068 <__divsf3_pse+0x94>
    2004:	91 50       	subi	r25, 0x01	; 1
    2006:	50 40       	sbci	r21, 0x00	; 0
    2008:	e6 95       	lsr	r30
    200a:	00 1c       	adc	r0, r0
    200c:	ca f7       	brpl	.-14     	; 0x2000 <__divsf3_pse+0x2c>
    200e:	2b d0       	rcall	.+86     	; 0x2066 <__divsf3_pse+0x92>
    2010:	fe 2f       	mov	r31, r30
    2012:	29 d0       	rcall	.+82     	; 0x2066 <__divsf3_pse+0x92>
    2014:	66 0f       	add	r22, r22
    2016:	77 1f       	adc	r23, r23
    2018:	88 1f       	adc	r24, r24
    201a:	bb 1f       	adc	r27, r27
    201c:	26 17       	cp	r18, r22
    201e:	37 07       	cpc	r19, r23
    2020:	48 07       	cpc	r20, r24
    2022:	ab 07       	cpc	r26, r27
    2024:	b0 e8       	ldi	r27, 0x80	; 128
    2026:	09 f0       	breq	.+2      	; 0x202a <__divsf3_pse+0x56>
    2028:	bb 0b       	sbc	r27, r27
    202a:	80 2d       	mov	r24, r0
    202c:	bf 01       	movw	r22, r30
    202e:	ff 27       	eor	r31, r31
    2030:	93 58       	subi	r25, 0x83	; 131
    2032:	5f 4f       	sbci	r21, 0xFF	; 255
    2034:	3a f0       	brmi	.+14     	; 0x2044 <__divsf3_pse+0x70>
    2036:	9e 3f       	cpi	r25, 0xFE	; 254
    2038:	51 05       	cpc	r21, r1
    203a:	78 f0       	brcs	.+30     	; 0x205a <__divsf3_pse+0x86>
    203c:	0c 94 d5 10 	jmp	0x21aa	; 0x21aa <__fp_inf>
    2040:	0c 94 20 11 	jmp	0x2240	; 0x2240 <__fp_szero>
    2044:	5f 3f       	cpi	r21, 0xFF	; 255
    2046:	e4 f3       	brlt	.-8      	; 0x2040 <__divsf3_pse+0x6c>
    2048:	98 3e       	cpi	r25, 0xE8	; 232
    204a:	d4 f3       	brlt	.-12     	; 0x2040 <__divsf3_pse+0x6c>
    204c:	86 95       	lsr	r24
    204e:	77 95       	ror	r23
    2050:	67 95       	ror	r22
    2052:	b7 95       	ror	r27
    2054:	f7 95       	ror	r31
    2056:	9f 5f       	subi	r25, 0xFF	; 255
    2058:	c9 f7       	brne	.-14     	; 0x204c <__divsf3_pse+0x78>
    205a:	88 0f       	add	r24, r24
    205c:	91 1d       	adc	r25, r1
    205e:	96 95       	lsr	r25
    2060:	87 95       	ror	r24
    2062:	97 f9       	bld	r25, 7
    2064:	08 95       	ret
    2066:	e1 e0       	ldi	r30, 0x01	; 1
    2068:	66 0f       	add	r22, r22
    206a:	77 1f       	adc	r23, r23
    206c:	88 1f       	adc	r24, r24
    206e:	bb 1f       	adc	r27, r27
    2070:	62 17       	cp	r22, r18
    2072:	73 07       	cpc	r23, r19
    2074:	84 07       	cpc	r24, r20
    2076:	ba 07       	cpc	r27, r26
    2078:	20 f0       	brcs	.+8      	; 0x2082 <__divsf3_pse+0xae>
    207a:	62 1b       	sub	r22, r18
    207c:	73 0b       	sbc	r23, r19
    207e:	84 0b       	sbc	r24, r20
    2080:	ba 0b       	sbc	r27, r26
    2082:	ee 1f       	adc	r30, r30
    2084:	88 f7       	brcc	.-30     	; 0x2068 <__divsf3_pse+0x94>
    2086:	e0 95       	com	r30
    2088:	08 95       	ret

0000208a <__fixunssfsi>:
    208a:	0e 94 05 11 	call	0x220a	; 0x220a <__fp_splitA>
    208e:	88 f0       	brcs	.+34     	; 0x20b2 <__fixunssfsi+0x28>
    2090:	9f 57       	subi	r25, 0x7F	; 127
    2092:	98 f0       	brcs	.+38     	; 0x20ba <__fixunssfsi+0x30>
    2094:	b9 2f       	mov	r27, r25
    2096:	99 27       	eor	r25, r25
    2098:	b7 51       	subi	r27, 0x17	; 23
    209a:	b0 f0       	brcs	.+44     	; 0x20c8 <__fixunssfsi+0x3e>
    209c:	e1 f0       	breq	.+56     	; 0x20d6 <__fixunssfsi+0x4c>
    209e:	66 0f       	add	r22, r22
    20a0:	77 1f       	adc	r23, r23
    20a2:	88 1f       	adc	r24, r24
    20a4:	99 1f       	adc	r25, r25
    20a6:	1a f0       	brmi	.+6      	; 0x20ae <__fixunssfsi+0x24>
    20a8:	ba 95       	dec	r27
    20aa:	c9 f7       	brne	.-14     	; 0x209e <__fixunssfsi+0x14>
    20ac:	14 c0       	rjmp	.+40     	; 0x20d6 <__fixunssfsi+0x4c>
    20ae:	b1 30       	cpi	r27, 0x01	; 1
    20b0:	91 f0       	breq	.+36     	; 0x20d6 <__fixunssfsi+0x4c>
    20b2:	0e 94 1f 11 	call	0x223e	; 0x223e <__fp_zero>
    20b6:	b1 e0       	ldi	r27, 0x01	; 1
    20b8:	08 95       	ret
    20ba:	0c 94 1f 11 	jmp	0x223e	; 0x223e <__fp_zero>
    20be:	67 2f       	mov	r22, r23
    20c0:	78 2f       	mov	r23, r24
    20c2:	88 27       	eor	r24, r24
    20c4:	b8 5f       	subi	r27, 0xF8	; 248
    20c6:	39 f0       	breq	.+14     	; 0x20d6 <__fixunssfsi+0x4c>
    20c8:	b9 3f       	cpi	r27, 0xF9	; 249
    20ca:	cc f3       	brlt	.-14     	; 0x20be <__fixunssfsi+0x34>
    20cc:	86 95       	lsr	r24
    20ce:	77 95       	ror	r23
    20d0:	67 95       	ror	r22
    20d2:	b3 95       	inc	r27
    20d4:	d9 f7       	brne	.-10     	; 0x20cc <__fixunssfsi+0x42>
    20d6:	3e f4       	brtc	.+14     	; 0x20e6 <__fixunssfsi+0x5c>
    20d8:	90 95       	com	r25
    20da:	80 95       	com	r24
    20dc:	70 95       	com	r23
    20de:	61 95       	neg	r22
    20e0:	7f 4f       	sbci	r23, 0xFF	; 255
    20e2:	8f 4f       	sbci	r24, 0xFF	; 255
    20e4:	9f 4f       	sbci	r25, 0xFF	; 255
    20e6:	08 95       	ret

000020e8 <__floatunsisf>:
    20e8:	e8 94       	clt
    20ea:	09 c0       	rjmp	.+18     	; 0x20fe <__floatsisf+0x12>

000020ec <__floatsisf>:
    20ec:	97 fb       	bst	r25, 7
    20ee:	3e f4       	brtc	.+14     	; 0x20fe <__floatsisf+0x12>
    20f0:	90 95       	com	r25
    20f2:	80 95       	com	r24
    20f4:	70 95       	com	r23
    20f6:	61 95       	neg	r22
    20f8:	7f 4f       	sbci	r23, 0xFF	; 255
    20fa:	8f 4f       	sbci	r24, 0xFF	; 255
    20fc:	9f 4f       	sbci	r25, 0xFF	; 255
    20fe:	99 23       	and	r25, r25
    2100:	a9 f0       	breq	.+42     	; 0x212c <__floatsisf+0x40>
    2102:	f9 2f       	mov	r31, r25
    2104:	96 e9       	ldi	r25, 0x96	; 150
    2106:	bb 27       	eor	r27, r27
    2108:	93 95       	inc	r25
    210a:	f6 95       	lsr	r31
    210c:	87 95       	ror	r24
    210e:	77 95       	ror	r23
    2110:	67 95       	ror	r22
    2112:	b7 95       	ror	r27
    2114:	f1 11       	cpse	r31, r1
    2116:	f8 cf       	rjmp	.-16     	; 0x2108 <__floatsisf+0x1c>
    2118:	fa f4       	brpl	.+62     	; 0x2158 <__floatsisf+0x6c>
    211a:	bb 0f       	add	r27, r27
    211c:	11 f4       	brne	.+4      	; 0x2122 <__floatsisf+0x36>
    211e:	60 ff       	sbrs	r22, 0
    2120:	1b c0       	rjmp	.+54     	; 0x2158 <__floatsisf+0x6c>
    2122:	6f 5f       	subi	r22, 0xFF	; 255
    2124:	7f 4f       	sbci	r23, 0xFF	; 255
    2126:	8f 4f       	sbci	r24, 0xFF	; 255
    2128:	9f 4f       	sbci	r25, 0xFF	; 255
    212a:	16 c0       	rjmp	.+44     	; 0x2158 <__floatsisf+0x6c>
    212c:	88 23       	and	r24, r24
    212e:	11 f0       	breq	.+4      	; 0x2134 <__floatsisf+0x48>
    2130:	96 e9       	ldi	r25, 0x96	; 150
    2132:	11 c0       	rjmp	.+34     	; 0x2156 <__floatsisf+0x6a>
    2134:	77 23       	and	r23, r23
    2136:	21 f0       	breq	.+8      	; 0x2140 <__floatsisf+0x54>
    2138:	9e e8       	ldi	r25, 0x8E	; 142
    213a:	87 2f       	mov	r24, r23
    213c:	76 2f       	mov	r23, r22
    213e:	05 c0       	rjmp	.+10     	; 0x214a <__floatsisf+0x5e>
    2140:	66 23       	and	r22, r22
    2142:	71 f0       	breq	.+28     	; 0x2160 <__floatsisf+0x74>
    2144:	96 e8       	ldi	r25, 0x86	; 134
    2146:	86 2f       	mov	r24, r22
    2148:	70 e0       	ldi	r23, 0x00	; 0
    214a:	60 e0       	ldi	r22, 0x00	; 0
    214c:	2a f0       	brmi	.+10     	; 0x2158 <__floatsisf+0x6c>
    214e:	9a 95       	dec	r25
    2150:	66 0f       	add	r22, r22
    2152:	77 1f       	adc	r23, r23
    2154:	88 1f       	adc	r24, r24
    2156:	da f7       	brpl	.-10     	; 0x214e <__floatsisf+0x62>
    2158:	88 0f       	add	r24, r24
    215a:	96 95       	lsr	r25
    215c:	87 95       	ror	r24
    215e:	97 f9       	bld	r25, 7
    2160:	08 95       	ret

00002162 <__fp_cmp>:
    2162:	99 0f       	add	r25, r25
    2164:	00 08       	sbc	r0, r0
    2166:	55 0f       	add	r21, r21
    2168:	aa 0b       	sbc	r26, r26
    216a:	e0 e8       	ldi	r30, 0x80	; 128
    216c:	fe ef       	ldi	r31, 0xFE	; 254
    216e:	16 16       	cp	r1, r22
    2170:	17 06       	cpc	r1, r23
    2172:	e8 07       	cpc	r30, r24
    2174:	f9 07       	cpc	r31, r25
    2176:	c0 f0       	brcs	.+48     	; 0x21a8 <__fp_cmp+0x46>
    2178:	12 16       	cp	r1, r18
    217a:	13 06       	cpc	r1, r19
    217c:	e4 07       	cpc	r30, r20
    217e:	f5 07       	cpc	r31, r21
    2180:	98 f0       	brcs	.+38     	; 0x21a8 <__fp_cmp+0x46>
    2182:	62 1b       	sub	r22, r18
    2184:	73 0b       	sbc	r23, r19
    2186:	84 0b       	sbc	r24, r20
    2188:	95 0b       	sbc	r25, r21
    218a:	39 f4       	brne	.+14     	; 0x219a <__fp_cmp+0x38>
    218c:	0a 26       	eor	r0, r26
    218e:	61 f0       	breq	.+24     	; 0x21a8 <__fp_cmp+0x46>
    2190:	23 2b       	or	r18, r19
    2192:	24 2b       	or	r18, r20
    2194:	25 2b       	or	r18, r21
    2196:	21 f4       	brne	.+8      	; 0x21a0 <__fp_cmp+0x3e>
    2198:	08 95       	ret
    219a:	0a 26       	eor	r0, r26
    219c:	09 f4       	brne	.+2      	; 0x21a0 <__fp_cmp+0x3e>
    219e:	a1 40       	sbci	r26, 0x01	; 1
    21a0:	a6 95       	lsr	r26
    21a2:	8f ef       	ldi	r24, 0xFF	; 255
    21a4:	81 1d       	adc	r24, r1
    21a6:	81 1d       	adc	r24, r1
    21a8:	08 95       	ret

000021aa <__fp_inf>:
    21aa:	97 f9       	bld	r25, 7
    21ac:	9f 67       	ori	r25, 0x7F	; 127
    21ae:	80 e8       	ldi	r24, 0x80	; 128
    21b0:	70 e0       	ldi	r23, 0x00	; 0
    21b2:	60 e0       	ldi	r22, 0x00	; 0
    21b4:	08 95       	ret

000021b6 <__fp_nan>:
    21b6:	9f ef       	ldi	r25, 0xFF	; 255
    21b8:	80 ec       	ldi	r24, 0xC0	; 192
    21ba:	08 95       	ret

000021bc <__fp_pscA>:
    21bc:	00 24       	eor	r0, r0
    21be:	0a 94       	dec	r0
    21c0:	16 16       	cp	r1, r22
    21c2:	17 06       	cpc	r1, r23
    21c4:	18 06       	cpc	r1, r24
    21c6:	09 06       	cpc	r0, r25
    21c8:	08 95       	ret

000021ca <__fp_pscB>:
    21ca:	00 24       	eor	r0, r0
    21cc:	0a 94       	dec	r0
    21ce:	12 16       	cp	r1, r18
    21d0:	13 06       	cpc	r1, r19
    21d2:	14 06       	cpc	r1, r20
    21d4:	05 06       	cpc	r0, r21
    21d6:	08 95       	ret

000021d8 <__fp_round>:
    21d8:	09 2e       	mov	r0, r25
    21da:	03 94       	inc	r0
    21dc:	00 0c       	add	r0, r0
    21de:	11 f4       	brne	.+4      	; 0x21e4 <__fp_round+0xc>
    21e0:	88 23       	and	r24, r24
    21e2:	52 f0       	brmi	.+20     	; 0x21f8 <__fp_round+0x20>
    21e4:	bb 0f       	add	r27, r27
    21e6:	40 f4       	brcc	.+16     	; 0x21f8 <__fp_round+0x20>
    21e8:	bf 2b       	or	r27, r31
    21ea:	11 f4       	brne	.+4      	; 0x21f0 <__fp_round+0x18>
    21ec:	60 ff       	sbrs	r22, 0
    21ee:	04 c0       	rjmp	.+8      	; 0x21f8 <__fp_round+0x20>
    21f0:	6f 5f       	subi	r22, 0xFF	; 255
    21f2:	7f 4f       	sbci	r23, 0xFF	; 255
    21f4:	8f 4f       	sbci	r24, 0xFF	; 255
    21f6:	9f 4f       	sbci	r25, 0xFF	; 255
    21f8:	08 95       	ret

000021fa <__fp_split3>:
    21fa:	57 fd       	sbrc	r21, 7
    21fc:	90 58       	subi	r25, 0x80	; 128
    21fe:	44 0f       	add	r20, r20
    2200:	55 1f       	adc	r21, r21
    2202:	59 f0       	breq	.+22     	; 0x221a <__fp_splitA+0x10>
    2204:	5f 3f       	cpi	r21, 0xFF	; 255
    2206:	71 f0       	breq	.+28     	; 0x2224 <__fp_splitA+0x1a>
    2208:	47 95       	ror	r20

0000220a <__fp_splitA>:
    220a:	88 0f       	add	r24, r24
    220c:	97 fb       	bst	r25, 7
    220e:	99 1f       	adc	r25, r25
    2210:	61 f0       	breq	.+24     	; 0x222a <__fp_splitA+0x20>
    2212:	9f 3f       	cpi	r25, 0xFF	; 255
    2214:	79 f0       	breq	.+30     	; 0x2234 <__fp_splitA+0x2a>
    2216:	87 95       	ror	r24
    2218:	08 95       	ret
    221a:	12 16       	cp	r1, r18
    221c:	13 06       	cpc	r1, r19
    221e:	14 06       	cpc	r1, r20
    2220:	55 1f       	adc	r21, r21
    2222:	f2 cf       	rjmp	.-28     	; 0x2208 <__fp_split3+0xe>
    2224:	46 95       	lsr	r20
    2226:	f1 df       	rcall	.-30     	; 0x220a <__fp_splitA>
    2228:	08 c0       	rjmp	.+16     	; 0x223a <__fp_splitA+0x30>
    222a:	16 16       	cp	r1, r22
    222c:	17 06       	cpc	r1, r23
    222e:	18 06       	cpc	r1, r24
    2230:	99 1f       	adc	r25, r25
    2232:	f1 cf       	rjmp	.-30     	; 0x2216 <__fp_splitA+0xc>
    2234:	86 95       	lsr	r24
    2236:	71 05       	cpc	r23, r1
    2238:	61 05       	cpc	r22, r1
    223a:	08 94       	sec
    223c:	08 95       	ret

0000223e <__fp_zero>:
    223e:	e8 94       	clt

00002240 <__fp_szero>:
    2240:	bb 27       	eor	r27, r27
    2242:	66 27       	eor	r22, r22
    2244:	77 27       	eor	r23, r23
    2246:	cb 01       	movw	r24, r22
    2248:	97 f9       	bld	r25, 7
    224a:	08 95       	ret

0000224c <__gesf2>:
    224c:	0e 94 b1 10 	call	0x2162	; 0x2162 <__fp_cmp>
    2250:	08 f4       	brcc	.+2      	; 0x2254 <__gesf2+0x8>
    2252:	8f ef       	ldi	r24, 0xFF	; 255
    2254:	08 95       	ret

00002256 <__mulsf3>:
    2256:	0e 94 3e 11 	call	0x227c	; 0x227c <__mulsf3x>
    225a:	0c 94 ec 10 	jmp	0x21d8	; 0x21d8 <__fp_round>
    225e:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fp_pscA>
    2262:	38 f0       	brcs	.+14     	; 0x2272 <__mulsf3+0x1c>
    2264:	0e 94 e5 10 	call	0x21ca	; 0x21ca <__fp_pscB>
    2268:	20 f0       	brcs	.+8      	; 0x2272 <__mulsf3+0x1c>
    226a:	95 23       	and	r25, r21
    226c:	11 f0       	breq	.+4      	; 0x2272 <__mulsf3+0x1c>
    226e:	0c 94 d5 10 	jmp	0x21aa	; 0x21aa <__fp_inf>
    2272:	0c 94 db 10 	jmp	0x21b6	; 0x21b6 <__fp_nan>
    2276:	11 24       	eor	r1, r1
    2278:	0c 94 20 11 	jmp	0x2240	; 0x2240 <__fp_szero>

0000227c <__mulsf3x>:
    227c:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__fp_split3>
    2280:	70 f3       	brcs	.-36     	; 0x225e <__mulsf3+0x8>

00002282 <__mulsf3_pse>:
    2282:	95 9f       	mul	r25, r21
    2284:	c1 f3       	breq	.-16     	; 0x2276 <__mulsf3+0x20>
    2286:	95 0f       	add	r25, r21
    2288:	50 e0       	ldi	r21, 0x00	; 0
    228a:	55 1f       	adc	r21, r21
    228c:	62 9f       	mul	r22, r18
    228e:	f0 01       	movw	r30, r0
    2290:	72 9f       	mul	r23, r18
    2292:	bb 27       	eor	r27, r27
    2294:	f0 0d       	add	r31, r0
    2296:	b1 1d       	adc	r27, r1
    2298:	63 9f       	mul	r22, r19
    229a:	aa 27       	eor	r26, r26
    229c:	f0 0d       	add	r31, r0
    229e:	b1 1d       	adc	r27, r1
    22a0:	aa 1f       	adc	r26, r26
    22a2:	64 9f       	mul	r22, r20
    22a4:	66 27       	eor	r22, r22
    22a6:	b0 0d       	add	r27, r0
    22a8:	a1 1d       	adc	r26, r1
    22aa:	66 1f       	adc	r22, r22
    22ac:	82 9f       	mul	r24, r18
    22ae:	22 27       	eor	r18, r18
    22b0:	b0 0d       	add	r27, r0
    22b2:	a1 1d       	adc	r26, r1
    22b4:	62 1f       	adc	r22, r18
    22b6:	73 9f       	mul	r23, r19
    22b8:	b0 0d       	add	r27, r0
    22ba:	a1 1d       	adc	r26, r1
    22bc:	62 1f       	adc	r22, r18
    22be:	83 9f       	mul	r24, r19
    22c0:	a0 0d       	add	r26, r0
    22c2:	61 1d       	adc	r22, r1
    22c4:	22 1f       	adc	r18, r18
    22c6:	74 9f       	mul	r23, r20
    22c8:	33 27       	eor	r19, r19
    22ca:	a0 0d       	add	r26, r0
    22cc:	61 1d       	adc	r22, r1
    22ce:	23 1f       	adc	r18, r19
    22d0:	84 9f       	mul	r24, r20
    22d2:	60 0d       	add	r22, r0
    22d4:	21 1d       	adc	r18, r1
    22d6:	82 2f       	mov	r24, r18
    22d8:	76 2f       	mov	r23, r22
    22da:	6a 2f       	mov	r22, r26
    22dc:	11 24       	eor	r1, r1
    22de:	9f 57       	subi	r25, 0x7F	; 127
    22e0:	50 40       	sbci	r21, 0x00	; 0
    22e2:	9a f0       	brmi	.+38     	; 0x230a <__mulsf3_pse+0x88>
    22e4:	f1 f0       	breq	.+60     	; 0x2322 <__mulsf3_pse+0xa0>
    22e6:	88 23       	and	r24, r24
    22e8:	4a f0       	brmi	.+18     	; 0x22fc <__mulsf3_pse+0x7a>
    22ea:	ee 0f       	add	r30, r30
    22ec:	ff 1f       	adc	r31, r31
    22ee:	bb 1f       	adc	r27, r27
    22f0:	66 1f       	adc	r22, r22
    22f2:	77 1f       	adc	r23, r23
    22f4:	88 1f       	adc	r24, r24
    22f6:	91 50       	subi	r25, 0x01	; 1
    22f8:	50 40       	sbci	r21, 0x00	; 0
    22fa:	a9 f7       	brne	.-22     	; 0x22e6 <__mulsf3_pse+0x64>
    22fc:	9e 3f       	cpi	r25, 0xFE	; 254
    22fe:	51 05       	cpc	r21, r1
    2300:	80 f0       	brcs	.+32     	; 0x2322 <__mulsf3_pse+0xa0>
    2302:	0c 94 d5 10 	jmp	0x21aa	; 0x21aa <__fp_inf>
    2306:	0c 94 20 11 	jmp	0x2240	; 0x2240 <__fp_szero>
    230a:	5f 3f       	cpi	r21, 0xFF	; 255
    230c:	e4 f3       	brlt	.-8      	; 0x2306 <__mulsf3_pse+0x84>
    230e:	98 3e       	cpi	r25, 0xE8	; 232
    2310:	d4 f3       	brlt	.-12     	; 0x2306 <__mulsf3_pse+0x84>
    2312:	86 95       	lsr	r24
    2314:	77 95       	ror	r23
    2316:	67 95       	ror	r22
    2318:	b7 95       	ror	r27
    231a:	f7 95       	ror	r31
    231c:	e7 95       	ror	r30
    231e:	9f 5f       	subi	r25, 0xFF	; 255
    2320:	c1 f7       	brne	.-16     	; 0x2312 <__mulsf3_pse+0x90>
    2322:	fe 2b       	or	r31, r30
    2324:	88 0f       	add	r24, r24
    2326:	91 1d       	adc	r25, r1
    2328:	96 95       	lsr	r25
    232a:	87 95       	ror	r24
    232c:	97 f9       	bld	r25, 7
    232e:	08 95       	ret

00002330 <_exit>:
    2330:	f8 94       	cli

00002332 <__stop_program>:
    2332:	ff cf       	rjmp	.-2      	; 0x2332 <__stop_program>
